#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Fabulator
  module Expr
    class Parser < Racc::Parser

module_eval(<<'...end xsm_expression_parser.racc/module_eval...', 'xsm_expression_parser.racc', 197)
  # == Fabulator Expression Parser
  #
  # <tt>Fabulator::Expr::Parser</tt> provides a parser for Fabulator
  # expressions operating on a DOM-like data model provided by
  # Fabulator::Expr::Context and Fabulator::Expr::Node.
  #
  # The expression language is based on XQuery and XPath.
  #

  require 'fabulator/expr'
  require 'rational'
  require 'bigdecimal'
  require 'bigdecimal/util'

  # Within the context of a Fabulator::Expr::Context object, this will
  # parse the given string and return an object that can be run to return
  # an array if Fabulator::Expr::Node objects.
  #
  # Example:
  #
  #   parser  = Fabulator::Expr::Parser.new
  #   context = Fabulator::Expr::Context.new
  #   expr    = parser.parse('//foo', context)
  #   foos    = expr.run(context)
  #
  # Results in 'foos' being an array of all of the nodes in the
  # context that are named 'foo' regardless of their depth in the
  # node tree.
  def parse(text, context)
    @source = text
    @curpos = 0
    @context = context.merge
    @line = 0
    @col = 0

    @yydebug = true

    @last_token = nil

    do_parse
  end

  # Used internally by the parser to raise a Fabulator::Expr::ParserError
  # when the parse fails.
  def on_error(*args)
    raise Fabulator::Expr::ParserError.new("unable to parse '#{args[1]}' near line #{@line + 1}, column #{@col}")
  end


  @@regex = {
    :simple_tokens => %r{\.\.|::|!=|>=|<=|\/\/|:=|\.|@|[*]|\(|\)|\[|\]|\{|\}|\/|\||\+|-|=|>|<|&|,|;},
    :ncname => %r{(?:[a-zA-Z_][-a-zA-Z0-9_.]*)},
    :event_type => %r{(?:processing-instruction|comment|text|node)},
    :axis_name => %r{(?:attribute|child|child-or-self|descendant|descendant-or-self|method|self)},
    :namespace_name => %r{(?:context|global|local|session|universal)},
    :number => %r{(-?\d+(?:\.\d+)?|\.\d+)},
    :literal => %r{((?:"(?:[^\\"]*(?:\\.[^\\"]*)*)")|(?:'(?:[^\\']*(?:\\.[^\\']*)*)'))},
  }

  @@regex[:axis] = %r{(#{@@regex[:ncname]})\s*(?=::)}
  @@regex[:name_colon_star] = %r{(#{@@regex[:ncname]}:\*)}
  @@regex[:qname] = %r{((?:#{@@regex[:ncname]}:)?#{@@regex[:ncname]})}
  @@regex[:xmlns] = %r{((?:xmlns:)#{@@regex[:ncname]})}
  @@regex[:dollar_qname] = %r{\$#{@@regex[:qname]}}
  @@regex[:dollar_int] = %r{\$([0-9]+)}
  @@regex[:function_name] = %r{#{@@regex[:qname]}\??\*?\s*(?=\([^:])}

  @@ops = {
    '..' => :DOT_DOT,
    '::' => :COLON_COLON,
    '!=' => :NEQ,
    '>=' => :GTE,
    '<=' => :LTE,
    '//' => :SLASH_SLASH,
    ':=' => :COLON_EQUAL,
    '.'  => :DOT,
    '@'  => :AT,
    '*'  => :STAR,
    '('  => :LP,
    ')'  => :RP,
    '['  => :LB,
    ']'  => :RB,
    '{'  => :LC,
    '}'  => :RC,
    '/'  => :SLASH,
    '|'  => :PIPE,
    '+'  => :PLUS,
    '-'  => :MINUS,
    '='  => :EQ,
    '>'  => :GT,
    '<'  => :LT,
    '&'  => :AMP,
    ','  => :COMMA,
    ';'  => :SEMI
  }

  @@preceding_tokens = { }
  [%{
    @ :: ( 
    and or mod div 
    * 
    / // | + - = != < <= > >=
    == & && ||
  }.split(/\s*/), '[', ',', '$' ].each { |t| @@preceding_tokens[t] = true }

  @@regex[:general] = Regexp.compile(%{^(?:#{@@regex[:xmlns]}|#{@@regex[:function_name]}|#{@@regex[:axis]}|#{@@regex[:name_colon_star]}|#{@@regex[:qname]}|#{@@regex[:literal]}|#{@@regex[:number]}|#{@@regex[:dollar_qname]}|#{@@regex[:dollar_int]}|(#{@@regex[:simple_tokens]}))})

  def next_token  
    @token = nil
    white_space = 0
    new_line = 0
    while @curpos < @source.length && @source[@curpos..@curpos] =~ /\s/ do
      if @source[@curpos..@curpos] =~ /\n/
        new_line = new_line + 1
        @line = @line + 1
        @col = 0
      else
        @col = @col + 1
      end
      @curpos = @curpos + 1
      white_space = white_space + 1
    end

    # skip comments delimited by (:  :)
    # comments can be nested
    # these are XPath 2.0 comments
    #
    if @curpos < @source.length && @source[@curpos..@curpos+1] == '(:'
      comment_depth = 1
      @curpos = @curpos + 2
      @col = @col + 2
      while comment_depth > 0 && @curpos < @source.length
        if @source[@curpos..@curpos+1] == '(:'
          comment_depth = comment_depth + 1
          @curpos = @curpos + 1
          @col = @col + 1
        end
        if @source[@curpos..@curpos+1] == ':)'
          comment_depth = comment_depth - 1
          @curpos = @curpos + 1
          @col = @col + 1
        end
        @curpos = @curpos + 1
        @col = @col + 1
      end
      white_space = white_space + 1
    end

    while @curpos < @source.length && @source[@curpos..@curpos] =~ /\s/ do
      if @source[@curpos..@curpos] =~ /\n/
        new_line = new_line + 1
        @line = @line + 1
        @col = 0
      else
        @col = @col + 1
      end
      @curpos = @curpos + 1
      white_space = white_space + 1
    end
        
    if @curpos >= @source.length
      @last_token = nil
      return [ false, false ]
    end

    #if new_line > 0 || white_space > 0
    #  @token = [ :SP, '' ]
    #end

    if @token.nil? && @last_token && ! @@preceding_tokens[@last_token[1]]
      if @source[@curpos..@curpos] == '*'
        @token = [ :STAR, '*' ]
      else
        if @source[@curpos..@source.length-1] =~ /^(#{@@regex[:ncname]})/
          ncname = $1
          case ncname
            when 'for' then
              @token = [ :FOR, 'for' ]
            when 'return' then
              @token = [ :RETURN, 'return' ]
            when 'in' then
              @token = [ :IN, 'in' ]
            when 'let' then
              @token = [ :LET, 'let' ]
            when 'except' then
              @token = [ :EXCEPT, 'except' ]
            when 'every' then
              @token = [ :EVERY, 'every' ]
            when 'some' then
              @token = [ :SOME, 'some' ]
            when 'satisfies' then
              @token = [ :SATISFIES, 'satisfies' ]
            when 'if' then
              @token = [ :IF, 'if' ]
            when 'then' then
              @token = [ :THEN, 'then' ]
            when 'else' then
              @token = [ :ELSE, 'else' ]
            when 'to' then
              @token = [ :TO, 'to' ]
            when 'and' then
              @token = [ :AND, 'and' ]
            when 'or' then
              @token = [ :OR, 'or' ]
            when 'mod' then
              @token = [ :MOD, 'mod' ]
            when 'div' then
              @token = [ :DIV, 'div' ]
            when 'err' then
              @token = [ :ERR, 'err' ]
            #when '*doh*' then
            #  # do nothing
            #  @token = nil
            else
              @token = nil
          end
        end
      end
    end
 
    if @token.nil? && @source[@curpos..@curpos+1] == '..'
      @token = [ :DOT_DOT, '..' ]
    end

    if @token.nil?
      if @curpos >= @source.length
        @token = [false, false]
        return @token
      end

      res = @@regex[:general].match(@source[@curpos..@source.length-1])
      #@source[@curpos..@source.length-1] =~ @@regex[:general]
      #res = [ nil, $1, $2, $3, $4, $5, $6, $7, $8 ]
      if res.nil?
        raise "Failed to parse '#{@source}' at #{@curpos}': #{@source[@curpos..@source.length-1]}"
      else
        if !res[1].nil?
          @token = [ :XMLNS_COLON_NCNAME, res[1] ]
        elsif !res[2].nil?
          if res[2] == 'if'
            @token = [ :IF, 'if' ]
          else
            if @source[@curpos+res[2].length .. @curpos+res[2].length + 1] =~ /^(\??\*?)/
              @token = [ :FUNCTION_NAME, res[2]+$1 ]
            else
              @token = [ :FUNCTION_NAME, res[2] ]
            end
          end
        elsif !res[3].nil?
          @token = [ res[3] == 'method' ? :AXIS_METHOD : :AXIS_NAME, res[3] ]
        elsif !res[4].nil?
          @token = [ :NAME_COLON_STAR, res[4] ]
        elsif !res[5].nil?
          qname = res[5]
          case qname
            when 'for' then
              @token = [ :FOR, 'for' ]
            when 'return' then
              @token = [ :RETURN, 'return' ]
            when 'in' then
              @token = [ :IN, 'in' ]
            when 'let' then
              @token = [ :LET, 'let' ]
            when 'except' then
              @token = [ :EXCEPT, 'except' ]
            when 'every' then
              @token = [ :EVERY, 'every' ]
            when 'some' then
              @token = [ :SOME, 'some' ]   
            when 'satisfies' then
              @token = [ :SATISFIES, 'satisfies' ]
            when 'if' then
              @token = [ :IF, 'if' ]
            when 'then' then
              @token = [ :THEN, 'then' ]
            when 'else' then
              @token = [ :ELSE, 'else' ]
            when 'with' then
              @token = [ :WITH, 'with' ]
            when 'err' then
              @token = [ :ERR, 'err' ]
            else
              @token = [ :QNAME, qname ]
          end
        elsif !res[6].nil?
          s = res[6]
          @curpos = @curpos + s.length
          @col = @col + s.length
          s = s[1..s.length-2]
          s.gsub!(/\\n/, "\n")
          s.gsub!(/\\'/, "'")
          s.gsub!(/\\"/, '"')
          @line += s.split(/\n/).count
          @curpos = @curpos - s.length
          @col = @col - s.length
          @token = [ :LITERAL, s ]
        elsif !res[7].nil?
          @token = [ :NUMBER, res[7] ]
        elsif !res[8].nil?
          @curpos = @curpos + 1
          @col = @col + 1
          @token = [ :DOLLAR_QNAME, res[8] ]
        elsif !res[9].nil?
          @curpos = @curpos + 1
          @col = @col + 1
          @token = [ :DOLLAR_QNAME, res[9] ]
        elsif !res[10].nil?
          @token = [ @@ops[res[10]] || res[10], res[10] ]
        else
          raise "Failed to parse '#{@source}' at #{@curpos}: #{@source[@curpos..@source.length-1]}"
        end
      end
    end

    if !@token[1].nil?
      @curpos = @curpos + @token[1].length
      @col = @col + @token[1].length
    end
    @last_token = @token
    return @token
  end
...end xsm_expression_parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    55,    56,    13,    43,   174,    47,    14,    44,    55,    56,
   144,    15,   134,    85,    16,   117,    17,   117,    53,   117,
    54,    84,    22,    98,   141,   142,   172,   175,    39,   116,
   119,    26,    52,   173,   120,   133,    33,    34,    38,    41,
    42,   103,    48,    49,    50,    51,    13,    43,   151,    47,
    14,    44,   105,    39,   113,    15,   114,    52,    16,   118,
    17,    52,    63,    38,    41,    42,    22,    91,   144,    50,
    51,    91,    39,    50,    51,    26,    52,   -19,    76,    77,
    33,    34,    38,    41,    42,   -20,    48,    49,    50,    51,
    43,   155,    47,    63,    44,    55,    56,    68,    69,    63,
   -19,    70,    71,    72,    73,    74,    75,    76,    77,    22,
    55,    56,    80,    81,    82,    39,    80,    81,    82,    52,
    55,    56,   180,    33,    34,    38,    41,    42,   150,    48,
    49,    50,    51,    43,    63,    47,    14,    44,    60,    39,
   134,    15,    57,    52,    16,   153,    17,    52,   152,    38,
    41,    42,    22,    91,   nil,    50,    51,    91,    39,    50,
    51,    26,    52,    80,    81,    82,    33,    34,    38,    41,
    42,   nil,    48,    49,    50,    51,    43,    39,    47,   nil,
    44,    52,    55,    56,    66,    67,    39,    38,    41,    42,
    52,    91,   149,    50,    51,    22,    38,    41,    42,   nil,
    91,    39,    50,    51,    26,    52,    58,    59,   nil,    33,
    34,    38,    41,    42,   nil,    48,    49,    50,    51,    43,
   nil,    47,    14,    44,   nil,    39,   nil,    15,   nil,    52,
    16,   nil,    17,    55,    56,    38,    41,    42,    22,    91,
   nil,    50,    51,   156,    39,    55,    56,    26,    52,    66,
    67,   nil,    33,    34,    38,    41,    42,   nil,    48,    49,
    50,    51,    43,    39,    47,   nil,    44,    52,    74,    75,
    76,    77,    39,    38,    41,    42,    52,    91,   nil,    50,
    51,    22,    38,    41,    42,   nil,    91,    39,    50,    51,
    26,    52,    87,    88,   nil,    33,    34,    38,    41,    42,
   nil,    48,    49,    50,    51,    43,    39,    47,   nil,    44,
    52,    87,    88,    87,    88,   nil,    38,    41,    42,   nil,
    91,   nil,    50,    51,    22,    87,    88,    55,    56,   nil,
    39,    55,    56,    26,    52,    76,    77,   nil,    33,    34,
    38,    41,    42,   nil,    48,    49,    50,    51,    43,    52,
    47,   nil,    44,    93,    94,    76,    77,    76,    77,    91,
   nil,    50,    51,   nil,    68,    69,   nil,    22,    70,    71,
    72,    73,   nil,    39,    76,    77,    26,    52,    76,    77,
   nil,    33,    34,    38,    41,    42,   nil,    48,    49,    50,
    51,    43,   nil,    47,    14,    44,    76,    77,   nil,    15,
    76,    77,    16,   nil,    17,    76,    77,    55,    56,   nil,
    22,    55,    56,    55,    56,   nil,    39,    55,    56,    26,
    52,    55,    56,   nil,    33,    34,    38,    41,    42,   nil,
    48,    49,    50,    51,    43,   nil,    47,    14,    44,    55,
    56,   nil,    15,    87,    88,    16,   nil,    17,    87,    88,
    87,    88,   nil,    22,   nil,   nil,   nil,   nil,   nil,    39,
   nil,   nil,    26,    52,   nil,   nil,   nil,    33,    34,    38,
    41,    42,   nil,    48,    49,    50,    51,    43,   nil,    47,
    14,    44,   nil,   nil,   nil,    15,   nil,   nil,    16,   nil,
    17,   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,   nil,
   nil,   nil,    39,   nil,   nil,    26,    52,   nil,   nil,   nil,
    33,    34,    38,    41,    42,   nil,    48,    49,    50,    51,
    43,   nil,    47,   nil,    44,    68,    69,   nil,   nil,    70,
    71,    72,    73,    74,    75,    76,    77,   nil,   nil,    22,
   nil,   nil,   nil,   nil,   nil,    39,   nil,   nil,    26,    52,
   nil,   nil,   nil,    33,    34,    38,    41,    42,   nil,    48,
    49,    50,    51,    43,   nil,    47,    14,    44,   nil,   nil,
   nil,    15,   nil,   nil,    16,   nil,    17,   nil,   nil,   nil,
   nil,   nil,    22,   nil,   nil,   nil,   nil,   nil,    39,   nil,
   nil,    26,    52,   nil,   nil,   nil,    33,    34,    38,    41,
    42,   nil,    48,    49,    50,    51,    43,   nil,    47,   nil,
    44,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,   nil,   nil,
   nil,    39,   nil,   nil,   nil,    52,   nil,   nil,   nil,    33,
    34,    38,    41,    42,   nil,    48,    49,    50,    51,    43,
   nil,    47,    14,    44,   nil,   nil,   nil,    15,   nil,   nil,
    16,   nil,    17,   nil,   nil,   nil,   nil,   nil,    22,   nil,
   nil,   nil,   nil,   nil,    39,   nil,   nil,    26,    52,   nil,
   nil,   nil,    33,    34,    38,    41,    42,   nil,    48,    49,
    50,    51,    43,   nil,    47,    14,    44,   nil,   nil,   nil,
    15,   nil,   nil,    16,   nil,    17,   nil,   nil,   nil,   nil,
   nil,    22,   nil,   nil,   nil,   nil,   nil,    39,   nil,   nil,
    26,    52,   nil,   nil,   nil,    33,    34,    38,    41,    42,
   nil,    48,    49,    50,    51,    43,   nil,    47,   nil,    44,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    22,   nil,   nil,   nil,   nil,   nil,
    39,   nil,   nil,    26,    52,   nil,   nil,   nil,    33,    34,
    38,    41,    42,   nil,    48,    49,    50,    51,    43,   nil,
    47,   nil,    44,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,
   nil,   nil,   nil,    39,   nil,   nil,    26,    52,   nil,   nil,
   nil,    33,    34,    38,    41,    42,   nil,    48,    49,    50,
    51,    43,   nil,    47,    14,    44,   nil,   nil,   nil,    15,
   nil,   nil,    16,   nil,    17,   nil,   nil,   nil,   nil,   nil,
    22,   nil,   nil,   nil,   nil,   nil,    39,   nil,   nil,    26,
    52,   nil,   nil,   nil,    33,    34,    38,    41,    42,   nil,
    48,    49,    50,    51,    43,   nil,    47,   nil,    44,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    22,   nil,   nil,   nil,   nil,   nil,    39,
   nil,   nil,    26,    52,   nil,   nil,   nil,    33,    34,    38,
    41,    42,   nil,    48,    49,    50,    51,    43,   nil,    47,
    14,    44,   nil,   nil,   nil,    15,   nil,   nil,    16,   nil,
    17,   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,   nil,
   nil,   nil,    39,   nil,   nil,    26,    52,   nil,   nil,   nil,
    33,    34,    38,    41,    42,   nil,    48,    49,    50,    51,
    43,   nil,    47,   nil,    44,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,
   nil,   nil,   nil,   nil,   nil,    39,   nil,   nil,    26,    52,
   nil,   nil,   nil,    33,    34,    38,    41,    42,   nil,    48,
    49,    50,    51,    43,   nil,    47,    14,    44,   nil,   nil,
   nil,    15,   nil,   nil,    16,   nil,    17,   nil,   nil,   nil,
   nil,   nil,    22,   nil,   nil,   nil,   nil,   nil,    39,   nil,
   nil,    26,    52,   nil,   nil,   nil,    33,    34,    38,    41,
    42,   nil,    48,    49,    50,    51,    43,   nil,    47,    14,
    44,   nil,   nil,   nil,    15,   nil,   nil,    16,   nil,    17,
   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,   nil,   nil,
   nil,    39,   nil,   nil,    26,    52,   nil,   nil,   nil,    33,
    34,    38,    41,    42,   nil,    48,    49,    50,    51,    43,
   nil,    47,    14,    44,   nil,   nil,   nil,    15,   nil,   nil,
    16,   nil,    17,   nil,   nil,   nil,   nil,   nil,    22,   nil,
   nil,   nil,   nil,   nil,    39,   nil,   nil,    26,    52,   nil,
   nil,   nil,    33,    34,    38,    41,    42,   nil,    48,    49,
    50,    51,    43,   nil,    47,    14,    44,   nil,   nil,   nil,
    15,   nil,   nil,    16,   nil,    17,   nil,   nil,   nil,   nil,
   nil,    22,   nil,   nil,   nil,   nil,   nil,    39,   nil,   nil,
    26,    52,   nil,   nil,   nil,    33,    34,    38,    41,    42,
   nil,    48,    49,    50,    51,    43,   nil,    47,   nil,    44,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    22,   nil,   nil,   nil,   nil,    43,
    39,    47,   nil,    44,    52,   nil,   nil,   nil,    33,    34,
    38,    41,    42,   nil,    48,    49,    50,    51,    22,   nil,
   nil,   nil,   nil,   nil,    39,   nil,   nil,    26,    52,   nil,
   nil,   nil,    33,    34,    38,    41,    42,   nil,    48,    49,
    50,    51,    43,   nil,    47,   nil,    44,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    22,   nil,   nil,   nil,   nil,   nil,    39,   nil,   nil,
    26,    52,   nil,   nil,   nil,    33,    34,    38,    41,    42,
   nil,    48,    49,    50,    51,    43,   nil,    47,   nil,    44,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    22,   nil,   nil,   nil,   nil,   nil,
    39,   nil,   nil,    26,    52,   nil,   nil,   nil,    33,    34,
    38,    41,    42,   nil,    48,    49,    50,    51,    43,   nil,
    47,    14,    44,   nil,   nil,   nil,    15,   nil,   nil,    16,
   nil,    17,   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,
   nil,   nil,   nil,    39,   nil,   nil,    26,    52,   nil,   nil,
   nil,    33,    34,    38,    41,    42,   nil,    48,    49,    50,
    51,    43,   nil,    47,   nil,    44,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    22,   nil,   nil,   nil,   nil,   nil,    39,   nil,   nil,    26,
    52,   nil,   nil,   nil,    33,    34,    38,    41,    42,   nil,
    48,    49,    50,    51,    43,   nil,    47,    14,    44,   nil,
   nil,   nil,    15,   nil,   nil,    16,   nil,    17,   nil,   nil,
   nil,   nil,   nil,    22,   nil,   nil,   nil,   nil,   nil,    39,
   nil,   nil,    26,    52,   nil,   nil,   nil,    33,    34,    38,
    41,    42,   nil,    48,    49,    50,    51,    43,   nil,    47,
   nil,    44,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,   nil,
   nil,   nil,    39,   nil,   nil,    26,    52,   nil,   nil,   nil,
    33,    34,    38,    41,    42,   nil,    48,    49,    50,    51,
    43,   nil,    47,   nil,    44,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,
   nil,   nil,   nil,   nil,    43,    39,    47,   nil,    44,    52,
   nil,   nil,   nil,    33,    34,    38,    41,    42,   nil,    48,
    49,    50,    51,    22,   nil,   nil,   nil,   nil,   nil,    39,
   nil,   nil,    26,    52,   nil,   nil,   nil,    33,    34,    38,
    41,    42,   nil,    48,    49,    50,    51,    43,   nil,    47,
   nil,    44,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,   nil,
   nil,   nil,    39,   nil,   nil,    26,    52,   nil,   nil,   nil,
    33,    34,    38,    41,    42,   nil,    48,    49,    50,    51,
    43,   nil,    47,   nil,    44,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,
   nil,   nil,   nil,   nil,   nil,    39,   nil,   nil,    26,    52,
   nil,   nil,   nil,    33,    34,    38,    41,    42,   nil,    48,
    49,    50,    51,    43,   nil,    47,   nil,    44,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    22,   nil,   nil,   nil,   nil,   nil,    39,   nil,
   nil,    26,    52,   nil,   nil,   nil,    33,    34,    38,    41,
    42,   nil,    48,    49,    50,    51 ]

racc_action_check = [
   104,   104,    54,    54,   169,    54,    54,    54,   166,   166,
    86,    54,    79,    28,    54,    64,    54,    61,     1,    65,
     1,    27,    54,    42,    86,    86,   156,   169,    54,    61,
    64,    54,    54,   166,    65,    79,    54,    54,    54,    54,
    54,    49,    54,    54,    54,    54,     0,     0,   104,     0,
     0,     0,    53,   142,    58,     0,    59,   142,     0,    63,
     0,    90,   117,   142,   142,   142,     0,   142,    96,   142,
   142,    90,     0,    90,    90,     0,     0,   167,   130,   130,
     0,     0,     0,     0,     0,   165,     0,     0,     0,     0,
    84,   114,    84,    17,    84,   181,   181,   167,   167,    16,
   167,   167,   167,   167,   167,   167,   167,   167,   167,    84,
   176,   176,   132,   132,   132,    84,   131,   131,   131,    84,
     3,     3,   176,    84,    84,    84,    84,    84,   100,    84,
    84,    84,    84,   103,    15,   103,   103,   103,    14,   141,
   101,   103,     6,   141,   103,   110,   103,    41,   108,   141,
   141,   141,   103,   141,   nil,   141,   141,    41,   103,    41,
    41,   103,   103,    23,    23,    23,   103,   103,   103,   103,
   103,   nil,   103,   103,   103,   103,   174,    93,   174,   nil,
   174,    93,    99,    99,   111,   111,    88,    93,    93,    93,
    88,    93,    99,    93,    93,   174,    88,    88,    88,   nil,
    88,   174,    88,    88,   174,   174,    13,    13,   nil,   174,
   174,   174,   174,   174,   nil,   174,   174,   174,   174,   172,
   nil,   172,   172,   172,   nil,    94,   nil,   172,   nil,    94,
   172,   nil,   172,   115,   115,    94,    94,    94,   172,    94,
   nil,    94,    94,   115,   172,   171,   171,   172,   172,    18,
    18,   nil,   172,   172,   172,   172,   172,   nil,   172,   172,
   172,   172,    82,    87,    82,   nil,    82,    87,   177,   177,
   177,   177,    33,    87,    87,    87,    33,    87,   nil,    87,
    87,    82,    33,    33,    33,   nil,    33,    82,    33,    33,
    82,    82,   164,   164,   nil,    82,    82,    82,    82,    82,
   nil,    82,    82,    82,    82,    81,    34,    81,   nil,    81,
    34,    92,    92,   163,   163,   nil,    34,    34,    34,   nil,
    34,   nil,    34,    34,    81,    89,    89,    78,    78,   nil,
    81,   162,   162,    81,    81,   123,   123,   nil,    81,    81,
    81,    81,    81,   nil,    81,    81,    81,    81,    80,    35,
    80,   nil,    80,    35,    35,   124,   124,   125,   125,    35,
   nil,    35,    35,   nil,   112,   112,   nil,    80,   112,   112,
   112,   112,   nil,    80,   112,   112,    80,    80,   126,   126,
   nil,    80,    80,    80,    80,    80,   nil,    80,    80,    80,
    80,   113,   nil,   113,   113,   113,   127,   127,   nil,   113,
   128,   128,   113,   nil,   113,   129,   129,   107,   107,   nil,
   113,   161,   161,   160,   160,   nil,   113,   159,   159,   113,
   113,   157,   157,   nil,   113,   113,   113,   113,   113,   nil,
   113,   113,   113,   113,    22,   nil,    22,    22,    22,   154,
   154,   nil,    22,   148,   148,    22,   nil,    22,   147,   147,
    31,    31,   nil,    22,   nil,   nil,   nil,   nil,   nil,    22,
   nil,   nil,    22,    22,   nil,   nil,   nil,    22,    22,    22,
    22,    22,   nil,    22,    22,    22,    22,   119,   nil,   119,
   119,   119,   nil,   nil,   nil,   119,   nil,   nil,   119,   nil,
   119,   nil,   nil,   nil,   nil,   nil,   119,   nil,   nil,   nil,
   nil,   nil,   119,   nil,   nil,   119,   119,   nil,   nil,   nil,
   119,   119,   119,   119,   119,   nil,   119,   119,   119,   119,
    26,   nil,    26,   nil,    26,    21,    21,   nil,   nil,    21,
    21,    21,    21,    21,    21,    21,    21,   nil,   nil,    26,
   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,    26,    26,
   nil,   nil,   nil,    26,    26,    26,    26,    26,   nil,    26,
    26,    26,    26,   153,   nil,   153,   153,   153,   nil,   nil,
   nil,   153,   nil,   nil,   153,   nil,   153,   nil,   nil,   nil,
   nil,   nil,   153,   nil,   nil,   nil,   nil,   nil,   153,   nil,
   nil,   153,   153,   nil,   nil,   nil,   153,   153,   153,   153,
   153,   nil,   153,   153,   153,   153,   152,   nil,   152,   nil,
   152,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   152,   nil,   nil,   nil,   nil,
   nil,   152,   nil,   nil,   nil,   152,   nil,   nil,   nil,   152,
   152,   152,   152,   152,   nil,   152,   152,   152,   152,   144,
   nil,   144,   144,   144,   nil,   nil,   nil,   144,   nil,   nil,
   144,   nil,   144,   nil,   nil,   nil,   nil,   nil,   144,   nil,
   nil,   nil,   nil,   nil,   144,   nil,   nil,   144,   144,   nil,
   nil,   nil,   144,   144,   144,   144,   144,   nil,   144,   144,
   144,   144,   180,   nil,   180,   180,   180,   nil,   nil,   nil,
   180,   nil,   nil,   180,   nil,   180,   nil,   nil,   nil,   nil,
   nil,   180,   nil,   nil,   nil,   nil,   nil,   180,   nil,   nil,
   180,   180,   nil,   nil,   nil,   180,   180,   180,   180,   180,
   nil,   180,   180,   180,   180,    77,   nil,    77,   nil,    77,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    77,   nil,   nil,   nil,   nil,   nil,
    77,   nil,   nil,    77,    77,   nil,   nil,   nil,    77,    77,
    77,    77,    77,   nil,    77,    77,    77,    77,    76,   nil,
    76,   nil,    76,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    76,   nil,   nil,
   nil,   nil,   nil,    76,   nil,   nil,    76,    76,   nil,   nil,
   nil,    76,    76,    76,    76,    76,   nil,    76,    76,    76,
    76,   116,   nil,   116,   116,   116,   nil,   nil,   nil,   116,
   nil,   nil,   116,   nil,   116,   nil,   nil,   nil,   nil,   nil,
   116,   nil,   nil,   nil,   nil,   nil,   116,   nil,   nil,   116,
   116,   nil,   nil,   nil,   116,   116,   116,   116,   116,   nil,
   116,   116,   116,   116,    75,   nil,    75,   nil,    75,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    75,   nil,   nil,   nil,   nil,   nil,    75,
   nil,   nil,    75,    75,   nil,   nil,   nil,    75,    75,    75,
    75,    75,   nil,    75,    75,    75,    75,    44,   nil,    44,
    44,    44,   nil,   nil,   nil,    44,   nil,   nil,    44,   nil,
    44,   nil,   nil,   nil,   nil,   nil,    44,   nil,   nil,   nil,
   nil,   nil,    44,   nil,   nil,    44,    44,   nil,   nil,   nil,
    44,    44,    44,    44,    44,   nil,    44,    44,    44,    44,
    74,   nil,    74,   nil,    74,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    74,
   nil,   nil,   nil,   nil,   nil,    74,   nil,   nil,    74,    74,
   nil,   nil,   nil,    74,    74,    74,    74,    74,   nil,    74,
    74,    74,    74,    51,   nil,    51,    51,    51,   nil,   nil,
   nil,    51,   nil,   nil,    51,   nil,    51,   nil,   nil,   nil,
   nil,   nil,    51,   nil,   nil,   nil,   nil,   nil,    51,   nil,
   nil,    51,    51,   nil,   nil,   nil,    51,    51,    51,    51,
    51,   nil,    51,    51,    51,    51,   134,   nil,   134,   134,
   134,   nil,   nil,   nil,   134,   nil,   nil,   134,   nil,   134,
   nil,   nil,   nil,   nil,   nil,   134,   nil,   nil,   nil,   nil,
   nil,   134,   nil,   nil,   134,   134,   nil,   nil,   nil,   134,
   134,   134,   134,   134,   nil,   134,   134,   134,   134,   118,
   nil,   118,   118,   118,   nil,   nil,   nil,   118,   nil,   nil,
   118,   nil,   118,   nil,   nil,   nil,   nil,   nil,   118,   nil,
   nil,   nil,   nil,   nil,   118,   nil,   nil,   118,   118,   nil,
   nil,   nil,   118,   118,   118,   118,   118,   nil,   118,   118,
   118,   118,    55,   nil,    55,    55,    55,   nil,   nil,   nil,
    55,   nil,   nil,    55,   nil,    55,   nil,   nil,   nil,   nil,
   nil,    55,   nil,   nil,   nil,   nil,   nil,    55,   nil,   nil,
    55,    55,   nil,   nil,   nil,    55,    55,    55,    55,    55,
   nil,    55,    55,    55,    55,    56,   nil,    56,   nil,    56,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    56,   nil,   nil,   nil,   nil,    69,
    56,    69,   nil,    69,    56,   nil,   nil,   nil,    56,    56,
    56,    56,    56,   nil,    56,    56,    56,    56,    69,   nil,
   nil,   nil,   nil,   nil,    69,   nil,   nil,    69,    69,   nil,
   nil,   nil,    69,    69,    69,    69,    69,   nil,    69,    69,
    69,    69,    73,   nil,    73,   nil,    73,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    73,   nil,   nil,   nil,   nil,   nil,    73,   nil,   nil,
    73,    73,   nil,   nil,   nil,    73,    73,    73,    73,    73,
   nil,    73,    73,    73,    73,    72,   nil,    72,   nil,    72,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    72,   nil,   nil,   nil,   nil,   nil,
    72,   nil,   nil,    72,    72,   nil,   nil,   nil,    72,    72,
    72,    72,    72,   nil,    72,    72,    72,    72,    60,   nil,
    60,    60,    60,   nil,   nil,   nil,    60,   nil,   nil,    60,
   nil,    60,   nil,   nil,   nil,   nil,   nil,    60,   nil,   nil,
   nil,   nil,   nil,    60,   nil,   nil,    60,    60,   nil,   nil,
   nil,    60,    60,    60,    60,    60,   nil,    60,    60,    60,
    60,    71,   nil,    71,   nil,    71,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    71,   nil,   nil,   nil,   nil,   nil,    71,   nil,   nil,    71,
    71,   nil,   nil,   nil,    71,    71,    71,    71,    71,   nil,
    71,    71,    71,    71,   120,   nil,   120,   120,   120,   nil,
   nil,   nil,   120,   nil,   nil,   120,   nil,   120,   nil,   nil,
   nil,   nil,   nil,   120,   nil,   nil,   nil,   nil,   nil,   120,
   nil,   nil,   120,   120,   nil,   nil,   nil,   120,   120,   120,
   120,   120,   nil,   120,   120,   120,   120,    70,   nil,    70,
   nil,    70,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    70,   nil,   nil,   nil,
   nil,   nil,    70,   nil,   nil,    70,    70,   nil,   nil,   nil,
    70,    70,    70,    70,    70,   nil,    70,    70,    70,    70,
    85,   nil,    85,   nil,    85,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    85,
   nil,   nil,   nil,   nil,    66,    85,    66,   nil,    66,    85,
   nil,   nil,   nil,    85,    85,    85,    85,    85,   nil,    85,
    85,    85,    85,    66,   nil,   nil,   nil,   nil,   nil,    66,
   nil,   nil,    66,    66,   nil,   nil,   nil,    66,    66,    66,
    66,    66,   nil,    66,    66,    66,    66,    67,   nil,    67,
   nil,    67,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    67,   nil,   nil,   nil,
   nil,   nil,    67,   nil,   nil,    67,    67,   nil,   nil,   nil,
    67,    67,    67,    67,    67,   nil,    67,    67,    67,    67,
    68,   nil,    68,   nil,    68,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    68,
   nil,   nil,   nil,   nil,   nil,    68,   nil,   nil,    68,    68,
   nil,   nil,   nil,    68,    68,    68,    68,    68,   nil,    68,
    68,    68,    68,    57,   nil,    57,   nil,    57,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    57,   nil,   nil,   nil,   nil,   nil,    57,   nil,
   nil,    57,    57,   nil,   nil,   nil,    57,    57,    57,    57,
    57,   nil,    57,    57,    57,    57 ]

racc_action_pointer = [
    39,    18,   nil,   117,   nil,   nil,   120,   nil,   nil,   nil,
   nil,   nil,   nil,   198,   126,   126,    91,    85,   226,   nil,
   nil,   500,   426,   126,   nil,   nil,   512,   -19,   -27,   nil,
   nil,   409,   nil,   239,   273,   312,   nil,   nil,   nil,   nil,
   nil,   110,   -23,   nil,   899,   nil,   nil,   nil,   nil,    29,
   nil,   985,   nil,    52,    -5,  1114,  1157,  1635,    48,    50,
  1310,    12,   nil,    41,    10,    14,  1506,  1549,  1592,  1181,
  1439,  1353,  1267,  1224,   942,   856,   770,   727,   324,     7,
   340,   297,   254,   nil,    82,  1482,   -17,   230,   153,   284,
    24,   nil,   270,   144,   192,   nil,    41,   nil,   nil,   179,
   115,   135,   nil,   125,    -3,   nil,   nil,   404,   143,   nil,
   139,   161,   339,   383,    81,   230,   813,    54,  1071,   469,
  1396,   nil,   nil,   300,   320,   322,   343,   361,   365,   370,
    43,    79,    75,   nil,  1028,   nil,   nil,   nil,   nil,   nil,
   nil,   106,    20,   nil,   641,   nil,   nil,   407,   402,   nil,
   nil,   nil,   598,   555,   436,   nil,    12,   418,   nil,   414,
   410,   408,   328,   272,   251,    80,     5,    72,   nil,    -1,
   nil,   242,   211,   nil,   168,   nil,   107,   235,   nil,   nil,
   684,    92 ]

racc_action_default = [
    -3,  -104,    -1,    -4,    -5,    -6,    -7,    -8,    -9,   -10,
   -11,   -12,   -13,  -104,  -104,  -104,  -104,  -104,   -33,   -35,
   -38,   -42,  -104,   -49,   -52,   -56,  -104,   -58,   -59,   -62,
   -84,   -67,   -68,   -69,  -104,  -104,   -74,   -84,   -78,   -79,
   -80,  -104,  -104,   -88,   -96,   -90,   -91,   -92,   -93,  -104,
  -100,  -104,  -103,  -104,    -3,  -104,  -104,  -104,  -104,  -104,
  -104,  -104,   -28,  -104,  -104,  -104,  -104,  -104,  -104,  -104,
  -104,  -104,  -104,  -104,  -104,  -104,  -104,  -104,   -98,  -104,
  -104,  -104,  -104,   -57,  -104,  -104,   -64,  -104,  -104,   -70,
  -104,  -101,   -71,  -104,  -104,   -81,   -77,   -82,   -83,   -98,
  -104,   -97,   -94,   -96,  -104,   182,    -2,   -14,   -15,   -16,
  -104,   -34,   -42,  -104,  -104,  -104,  -104,  -104,  -104,  -104,
  -104,   -36,   -37,   -39,   -40,   -43,   -44,   -45,   -46,   -47,
   -48,   -50,   -51,   -41,  -104,   -53,   -54,   -55,   -60,   -61,
   -63,  -104,  -104,   -85,  -104,   -75,   -76,   -72,   -73,   -89,
   -95,  -102,  -104,  -104,   -23,   -24,  -104,   -27,   -29,   -30,
   -31,   -32,   -99,   -65,   -66,    -8,  -104,   -42,   -21,  -104,
   -17,   -18,  -104,   -86,  -104,   -87,   -26,   -19,   -20,   -22,
  -104,   -25 ]

racc_goto_table = [
    78,   112,    89,    92,   109,    90,    90,   110,   111,   168,
   112,   112,   123,   124,   125,   126,   127,   128,   129,   130,
    83,   165,    99,     2,    95,    86,    61,    64,    65,   104,
    97,    79,    96,   107,   140,   138,   139,   158,   115,   179,
   145,   146,   121,   122,   131,   132,   169,   108,     1,   102,
   nil,   178,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    90,
    90,   nil,   147,   148,   nil,    90,    90,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   135,   136,   137,   106,   nil,    95,
   nil,    78,   nil,   nil,   nil,   nil,   nil,   nil,   167,   nil,
   nil,   154,   nil,   nil,   157,   nil,   159,   160,   161,   nil,
   170,   nil,   nil,   110,   nil,   nil,   nil,   nil,   nil,   nil,
   163,   164,   162,    90,    90,   nil,   nil,   nil,   177,   nil,
   nil,   nil,   166,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   171,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   176,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   181 ]

racc_goto_check = [
     3,    17,    34,    34,    14,    36,    36,    15,    21,    16,
    17,    17,    17,    17,    17,    17,    17,    17,    17,    17,
    27,     7,     3,     2,    39,    32,    19,    19,    19,     3,
    39,    25,    32,     3,    33,    15,    15,    20,     3,    16,
    37,    37,    22,    22,    26,    26,    18,    13,     1,    41,
   nil,     7,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    36,
    36,   nil,    34,    34,   nil,    36,    36,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    27,    27,    27,     2,   nil,    39,
   nil,     3,   nil,   nil,   nil,   nil,   nil,   nil,    17,   nil,
   nil,     3,   nil,   nil,     3,   nil,     3,     3,     3,   nil,
    14,   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,
    34,    34,     3,    36,    36,   nil,   nil,   nil,    17,   nil,
   nil,   nil,     3,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     3,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     3,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3 ]

racc_goto_pointer = [
   nil,    48,    23,   -22,   nil,   nil,   nil,  -123,   nil,   nil,
   nil,   nil,   nil,    -9,   -52,   -49,  -135,   -56,   -98,    11,
   -80,   -49,   -24,   nil,   nil,     9,   -32,    -6,   nil,   nil,
   nil,   nil,    -5,   -52,   -31,   nil,   -28,   -47,   nil,   -11,
   nil,     0,   nil ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     6,     7,     8,     9,
    10,    11,    12,   nil,   nil,    27,   nil,    21,   nil,   nil,
    62,    18,    19,    20,    46,   101,    23,    24,    25,    28,
    29,    30,   nil,   nil,    31,    32,    35,    36,    37,    40,
   143,    45,   100 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 53, :_reduce_1,
  3, 53, :_reduce_2,
  0, 54, :_reduce_none,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  1, 54, :_reduce_6,
  1, 55, :_reduce_none,
  1, 55, :_reduce_none,
  1, 55, :_reduce_none,
  1, 55, :_reduce_none,
  1, 55, :_reduce_none,
  1, 55, :_reduce_none,
  1, 55, :_reduce_none,
  3, 64, :_reduce_14,
  3, 63, :_reduce_15,
  1, 65, :_reduce_16,
  3, 65, :_reduce_17,
  3, 66, :_reduce_18,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 70, :_reduce_21,
  3, 70, :_reduce_22,
  4, 56, :_reduce_23,
  4, 57, :_reduce_24,
  8, 60, :_reduce_25,
  6, 60, :_reduce_26,
  4, 61, :_reduce_27,
  1, 71, :_reduce_28,
  3, 71, :_reduce_29,
  3, 72, :_reduce_30,
  4, 62, :_reduce_31,
  4, 62, :_reduce_32,
  1, 58, :_reduce_none,
  3, 58, :_reduce_34,
  1, 73, :_reduce_none,
  3, 73, :_reduce_36,
  3, 73, :_reduce_37,
  1, 74, :_reduce_none,
  3, 74, :_reduce_39,
  3, 74, :_reduce_40,
  3, 76, :_reduce_41,
  1, 75, :_reduce_none,
  3, 75, :_reduce_43,
  3, 75, :_reduce_44,
  3, 75, :_reduce_45,
  3, 75, :_reduce_46,
  3, 59, :_reduce_47,
  3, 59, :_reduce_48,
  1, 69, :_reduce_none,
  3, 69, :_reduce_50,
  3, 69, :_reduce_51,
  1, 78, :_reduce_none,
  3, 78, :_reduce_53,
  3, 78, :_reduce_54,
  3, 78, :_reduce_55,
  1, 79, :_reduce_none,
  2, 79, :_reduce_57,
  1, 80, :_reduce_none,
  1, 80, :_reduce_59,
  3, 81, :_reduce_60,
  3, 81, :_reduce_61,
  1, 67, :_reduce_62,
  3, 67, :_reduce_63,
  0, 85, :_reduce_none,
  2, 85, :_reduce_65,
  2, 85, :_reduce_66,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  1, 87, :_reduce_69,
  2, 87, :_reduce_70,
  2, 87, :_reduce_71,
  3, 87, :_reduce_72,
  3, 87, :_reduce_73,
  1, 86, :_reduce_74,
  3, 86, :_reduce_75,
  3, 86, :_reduce_76,
  2, 89, :_reduce_77,
  1, 89, :_reduce_78,
  1, 89, :_reduce_79,
  1, 90, :_reduce_80,
  2, 90, :_reduce_81,
  2, 90, :_reduce_82,
  2, 88, :_reduce_83,
  0, 84, :_reduce_84,
  2, 84, :_reduce_85,
  3, 92, :_reduce_86,
  3, 92, :_reduce_87,
  1, 83, :_reduce_88,
  3, 83, :_reduce_89,
  1, 83, :_reduce_none,
  1, 83, :_reduce_none,
  1, 83, :_reduce_92,
  1, 83, :_reduce_93,
  2, 83, :_reduce_94,
  3, 93, :_reduce_95,
  0, 94, :_reduce_96,
  1, 94, :_reduce_none,
  1, 77, :_reduce_98,
  3, 77, :_reduce_99,
  1, 91, :_reduce_none,
  1, 91, :_reduce_101,
  3, 91, :_reduce_102,
  1, 91, :_reduce_none ]

racc_reduce_n = 104

racc_shift_n = 182

racc_token_table = {
  false => 0,
  :error => 1,
  :SEMI => 2,
  :ERR => 3,
  :WITH => 4,
  :COMMA => 5,
  :COLON_EQUAL => 6,
  :LET => 7,
  :DOLLAR_QNAME => 8,
  :XMLNS_COLON_NCNAME => 9,
  :LITERAL => 10,
  :IF => 11,
  :LP => 12,
  :RP => 13,
  :THEN => 14,
  :ELSE => 15,
  :FOR => 16,
  :RETURN => 17,
  :IN => 18,
  :SOME => 19,
  :SATISFIES => 20,
  :EVERY => 21,
  :OR => 22,
  :AND => 23,
  :EXCEPT => 24,
  :EQ => 25,
  :NEQ => 26,
  :LB => 27,
  :RB => 28,
  :LT => 29,
  :GT => 30,
  :LTE => 31,
  :GTE => 32,
  :DOT_DOT => 33,
  :TO => 34,
  :PLUS => 35,
  :MINUS => 36,
  :STAR => 37,
  :DIV => 38,
  :MOD => 39,
  :PIPE => 40,
  :SLASH => 41,
  :SLASH_SLASH => 42,
  :DOT => 43,
  :AT => 44,
  :AXIS_NAME => 45,
  :COLON_COLON => 46,
  :NUMBER => 47,
  :FUNCTION_NAME => 48,
  :QNAME => 49,
  :LC => 50,
  :RC => 51 }

racc_nt_base = 52

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "SEMI",
  "ERR",
  "WITH",
  "COMMA",
  "COLON_EQUAL",
  "LET",
  "DOLLAR_QNAME",
  "XMLNS_COLON_NCNAME",
  "LITERAL",
  "IF",
  "LP",
  "RP",
  "THEN",
  "ELSE",
  "FOR",
  "RETURN",
  "IN",
  "SOME",
  "SATISFIES",
  "EVERY",
  "OR",
  "AND",
  "EXCEPT",
  "EQ",
  "NEQ",
  "LB",
  "RB",
  "LT",
  "GT",
  "LTE",
  "GTE",
  "DOT_DOT",
  "TO",
  "PLUS",
  "MINUS",
  "STAR",
  "DIV",
  "MOD",
  "PIPE",
  "SLASH",
  "SLASH_SLASH",
  "DOT",
  "AT",
  "AXIS_NAME",
  "COLON_COLON",
  "NUMBER",
  "FUNCTION_NAME",
  "QNAME",
  "LC",
  "RC",
  "$start",
  "statements",
  "statement",
  "expr",
  "let_expr",
  "ns_expr",
  "or_expr",
  "range_expr",
  "if_expr",
  "for_expr",
  "quant_expr",
  "with_expr",
  "err_expr",
  "expr_set_list",
  "expr_set",
  "path_expr",
  "num_expr",
  "additive_expr",
  "num_list",
  "for_vars",
  "for_var",
  "and_expr",
  "equality_expr",
  "relational_expr",
  "tuple",
  "args",
  "multiplicative_expr",
  "unary_expr",
  "union_expr",
  "union_expr_x",
  "location_path",
  "primary_expr",
  "predicates",
  "segment",
  "relative_location_path",
  "absolute_location_path",
  "axis_name",
  "step",
  "axis",
  "node_test",
  "predicate",
  "list",
  "opt_args" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 12)
  def _reduce_1(val, _values, result)
     result = Fabulator::Expr::StatementList.new; result.add_statement(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 13)
  def _reduce_2(val, _values, result)
     result = val[0]; result.add_statement(val[2]) 
    result
  end
.,.,

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 18)
  def _reduce_6(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 28)
  def _reduce_14(val, _values, result)
     result = Fabulator::Expr::ErrExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 30)
  def _reduce_15(val, _values, result)
     result = Fabulator::Expr::WithExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 32)
  def _reduce_16(val, _values, result)
     result = Fabulator::Expr::StatementList.new; result.add_statement(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 33)
  def _reduce_17(val, _values, result)
     result = val[0]; result.add_statement(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 35)
  def _reduce_18(val, _values, result)
     result = Fabulator::Expr::DataSet.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 19 omitted

# reduce 20 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 42)
  def _reduce_21(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 43)
  def _reduce_22(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 45)
  def _reduce_23(val, _values, result)
     result = Fabulator::Expr::LetExpr.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 48)
  def _reduce_24(val, _values, result)
        @context.set_ns(val[1].gsub(/^xmlns:/, ''), val[3])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 51)
  def _reduce_25(val, _values, result)
     result = Fabulator::Expr::IfExpr.new(val[2], val[5], val[7]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 52)
  def _reduce_26(val, _values, result)
     result = Fabulator::Expr::IfExpr.new(val[2], val[5], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 54)
  def _reduce_27(val, _values, result)
     result = Fabulator::Expr::ForExpr.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 56)
  def _reduce_28(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 57)
  def _reduce_29(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 59)
  def _reduce_30(val, _values, result)
     result = Fabulator::Expr::ForVar.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 61)
  def _reduce_31(val, _values, result)
     result = Fabulator::Expr::SomeExpr.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 62)
  def _reduce_32(val, _values, result)
     result = Fabulator::Expr::EveryExpr.new(val[1], val[3]) 
    result
  end
.,.,

# reduce 33 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 65)
  def _reduce_34(val, _values, result)
     result = Fabulator::Expr::OrExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 35 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 68)
  def _reduce_36(val, _values, result)
     result = Fabulator::Expr::AndExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 69)
  def _reduce_37(val, _values, result)
     result = Fabulator::Expr::ExceptExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 38 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 72)
  def _reduce_39(val, _values, result)
     result = Fabulator::Expr::EqExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 73)
  def _reduce_40(val, _values, result)
     result = Fabulator::Expr::NeqExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 75)
  def _reduce_41(val, _values, result)
     result = Fabulator::Expr::Tuple.new(val[1]) 
    result
  end
.,.,

# reduce 42 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 80)
  def _reduce_43(val, _values, result)
     result = Fabulator::Expr::LtExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 81)
  def _reduce_44(val, _values, result)
     result = Fabulator::Expr::LtExpr.new(val[2], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 82)
  def _reduce_45(val, _values, result)
     result = Fabulator::Expr::LteExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 83)
  def _reduce_46(val, _values, result)
     result = Fabulator::Expr::LteExpr.new(val[2], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 94)
  def _reduce_47(val, _values, result)
     result = Fabulator::Expr::RangeExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 95)
  def _reduce_48(val, _values, result)
     result = Fabulator::Expr::RangeExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 49 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 98)
  def _reduce_50(val, _values, result)
     result = Fabulator::Expr::AddExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 99)
  def _reduce_51(val, _values, result)
     result = Fabulator::Expr::SubExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 52 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 102)
  def _reduce_53(val, _values, result)
     result = Fabulator::Expr::MpyExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 103)
  def _reduce_54(val, _values, result)
     result = Fabulator::Expr::DivExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 104)
  def _reduce_55(val, _values, result)
     result = Fabulator::Expr::ModExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 56 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 107)
  def _reduce_57(val, _values, result)
     result = Fabulator::Expr::NegExpr.new(val[1]) 
    result
  end
.,.,

# reduce 58 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 110)
  def _reduce_59(val, _values, result)
     result = Fabulator::Expr::UnionExpr.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 112)
  def _reduce_60(val, _values, result)
     result = [ val[0], val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 113)
  def _reduce_61(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 115)
  def _reduce_62(val, _values, result)
     result = Fabulator::Expr::PathExpr.new(nil, [], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 116)
  def _reduce_63(val, _values, result)
     result = ((val[1].nil? || val[1].empty?) && (val[2].nil? || val[2].empty?)) ? val[0] : Fabulator::Expr::PathExpr.new(val[0], val[1], val[2]) 
    result
  end
.,.,

# reduce 64 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 119)
  def _reduce_65(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 120)
  def _reduce_66(val, _values, result)
     result = [ Fabulator::Expr::AxisDescendentOrSelf.new ] + val[1] 
    result
  end
.,.,

# reduce 67 omitted

# reduce 68 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 128)
  def _reduce_69(val, _values, result)
     result = Fabulator::Expr::RootContext.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 129)
  def _reduce_70(val, _values, result)
     result = Fabulator::Expr::PathExpr.new(Fabulator::Expr::RootContext.new, [], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 130)
  def _reduce_71(val, _values, result)
     result = [ Fabulator::Expr::RootContext.new, Fabulator::Expr::AxisDescendentOrSelf.new(val[1][0]) ] + val[1][1..val[1].size-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 131)
  def _reduce_72(val, _values, result)
     result = [ Fabulator::Expr::RootContext.new(val[0]) ] + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 132)
  def _reduce_73(val, _values, result)
     result = [ Fabulator::Expr::RootContext.new(val[0]), Fabulator::Expr::AxisDescendentOrSelf.new(val[2][0]) ] + val[2][1..val[2].size-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 134)
  def _reduce_74(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 135)
  def _reduce_75(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 136)
  def _reduce_76(val, _values, result)
     result = val[0] + [ Fabulator::Expr::AxisDescendentOrSelf.new(val[2]) ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 138)
  def _reduce_77(val, _values, result)
     result = val[1].nil? || val[1].empty? ? val[0] : Fabulator::Expr::Predicates.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 139)
  def _reduce_78(val, _values, result)
     result = Fabulator::Expr::CurrentContext.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 140)
  def _reduce_79(val, _values, result)
     result = Fabulator::Expr::AxisParent.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 146)
  def _reduce_80(val, _values, result)
     result = Fabulator::Expr::AxisChild.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 147)
  def _reduce_81(val, _values, result)
     result = Fabulator::Expr::Axis.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 148)
  def _reduce_82(val, _values, result)
     result = Fabulator::Expr::AxisAttribute.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 150)
  def _reduce_83(val, _values, result)
     result = Fabulator::Expr::Axis.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 152)
  def _reduce_84(val, _values, result)
     result = [ ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 153)
  def _reduce_85(val, _values, result)
     result = val[0] + [ val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 155)
  def _reduce_86(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 156)
  def _reduce_87(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 163)
  def _reduce_88(val, _values, result)
     result = Fabulator::Expr::Var.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 164)
  def _reduce_89(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 90 omitted

# reduce 91 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 167)
  def _reduce_92(val, _values, result)
     result = Fabulator::Expr::Literal.new(val[0], [ Fabulator::FAB_NS, 'string' ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 168)
  def _reduce_93(val, _values, result)
     result = Fabulator::Expr::Literal.new(val[0] =~ /\./ ? val[0].to_d.to_r : val[0].to_i.to_r, [ Fabulator::FAB_NS, 'numeric' ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 170)
  def _reduce_94(val, _values, result)
            result = Fabulator::Expr::Function.new(@context, val[0], val[1]) 
#          when 'any'  then Fabulator::Expr::AnyExpr.new(@context, val[1])
#          when 'all'  then Fabulator::Expr::AllExpr.new(@context, val[1])
#          when 'one'  then Fabulator::Expr::OneExpr.new(@context, val[1])
#          when 'none' then Fabulator::Expr::NoneExpr.new(@context, val[1])
#          else Fabulator::Expr::Function.new(@context, val[0], val[1]) 
#        end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 179)
  def _reduce_95(val, _values, result)
     result = Fabulator::Expr::List.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 182)
  def _reduce_96(val, _values, result)
     result = [ ] 
    result
  end
.,.,

# reduce 97 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 185)
  def _reduce_98(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 186)
  def _reduce_99(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

# reduce 100 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 189)
  def _reduce_101(val, _values, result)
     result = val[0].to_s 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 190)
  def _reduce_102(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 103 omitted

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Expr
  end   # module Fabulator
