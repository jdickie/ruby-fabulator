#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Fabulator
  module Expr
    class Parser < Racc::Parser

module_eval(<<'...end xsm_expression_parser.racc/module_eval...', 'xsm_expression_parser.racc', 160)
  require 'fabulator/expr'
  require 'rational'
  require 'bigdecimal'
  require 'bigdecimal/util'

  def parse(t, xml = { })
    @source = t
    @curpos = 0
    @namespaces = { }

    if xml.nil?
      @namespaces = { }
    elsif xml.is_a?(Hash)
      @namespaces = xml
    else
      xml.namespaces.each do |ns|
        @namespaces[ns.prefix] = ns.href
      end
      begin
        @namespaces[''] = xml.namespaces.default.href
      rescue
      end
    end

    @yydebug = true

    @last_token = nil
      
    do_parse
  end

  @@regex = {
    :simple_tokens => %r{\.\.|::|!=|>=|<=|\/\/|:=|\.|@|[*]|\(|\)|\[|\]|\{|\}|\/|\||\+|-|=|>|<|&|,|;},
    :ncname => %r{(?:[a-zA-Z_][-a-zA-Z0-9_.]*)},
    :event_type => %r{(?:processing-instruction|comment|text|node)},
    :axis_name => %r{(?:attribute|child|child-or-self|descendant|descendant-or-self|method|self)},
    :namespace_name => %r{(?:context|global|local|session|universal)},
    :number => %r{(-?\d+(?:\.\d+)?|\.\d+)},
  }

  @@regex[:axis] = %r{(#{@@regex[:ncname]})\s*(?=::)}
  @@regex[:name_colon_star] = %r{(#{@@regex[:ncname]}:\*)}
  @@regex[:qname] = %r{((?:#{@@regex[:ncname]}:)?#{@@regex[:ncname]})}
  @@regex[:dollar_qname] = %r{\$#{@@regex[:qname]}}
  @@regex[:function_name] = %r{#{@@regex[:qname]}\s*(?=\([^:])}

  @@ops = {
    '..' => :DOT_DOT,
    '::' => :COLON_COLON,
    '!=' => :NEQ,
    '>=' => :GTE,
    '<=' => :LTE,
    '//' => :SLASH_SLASH,
    ':=' => :COLON_EQUAL,
    '.'  => :DOT,
    '@'  => :AT,
    '*'  => :STAR,
    '('  => :LP,
    ')'  => :RP,
    '['  => :LB,
    ']'  => :RB,
    '{'  => :LC,
    '}'  => :RC,
    '/'  => :SLASH,
    '|'  => :PIPE,
    '+'  => :PLUS,
    '-'  => :MINUS,
    '='  => :EQ,
    '>'  => :GT,
    '<'  => :LT,
    '&'  => :AMP,
    ','  => :COMMA,
    ';'  => :SEMI
  }

  @@preceding_tokens = { }
  [%{
    @ :: ( 
    and or mod div 
    * 
    / // | + - = != < <= > >=
    == & && ||
  }.split(/\s*/), '[', ',', '$' ].each { |t| @@preceding_tokens[t] = true }

  @@regex[:general] = Regexp.compile(%{^(?:#{@@regex[:function_name]}|#{@@regex[:axis]}|#{@@regex[:name_colon_star]}|#{@@regex[:qname]}|('[^']*'|"[^"]*")|#{@@regex[:number]}|#{@@regex[:dollar_qname]}|(#{@@regex[:simple_tokens]}))})

  def next_token  
    @token = nil
    white_space = 0
    new_line = 0
    while @curpos < @source.length && @source[@curpos..@curpos] =~ /\s/ do
      if @source[@curpos..@curpos] =~ /\n/
        new_line = new_line + 1
      end
      @curpos = @curpos + 1
      white_space = white_space + 1
    end

    # skip comments delimited by (:  :)
    # comments can be nested
    # these are XPath 2.0 comments
    #
    if @curpos < @source.length && @source[@curpos..@curpos+1] == '(:'
      comment_depth = 1
      @curpos = @curpos + 2
      while comment_depth > 0 && @curpos < @source.length
        if @source[@curpos..@curpos+1] == '(:'
          comment_depth = comment_depth + 1
          @curpos = @curpos + 1
        end
        if @source[@curpos..@curpos+1] == ':)'
          comment_depth = comment_depth - 1
          @curpos = @curpos + 1
        end
        @curpos = @curpos + 1
      end
      white_space = white_space + 1
    end

    while @curpos < @source.length && @source[@curpos..@curpos] =~ /\s/ do
      if @source[@curpos..@curpos] =~ /\n/
        new_line = new_line + 1
      end
      @curpos = @curpos + 1
      white_space = white_space + 1
    end
        
    if @curpos >= @source.length
      @last_token = nil
      return [ false, false ]
    end

    #if new_line > 0 || white_space > 0
    #  @token = [ :SP, '' ]
    #end

    if @token.nil? && @last_token && ! @@preceding_tokens[@last_token[1]]
      if @source[@curpos..@curpos] == '*'
        @token = [ :STAR, '*' ]
      else
        if @source[@curpos..@source.length-1] =~ /^(#{@@regex[:ncname]})/
          ncname = $1
          case ncname
            when 'for':
              @token = [ :FOR, 'for' ]
            when 'return':
              @token = [ :RETURN, 'return' ]
            when 'in':
              @token = [ :IN, 'in' ]
            when 'let':
              @token = [ :LET, 'let' ]
            when 'except':
              @token = [ :EXCEPT, 'except' ]
            when 'every':
              @token = [ :EVERY, 'every' ]
            when 'some':
              @token = [ :SOME, 'some' ]
            when 'satisfies':
              @token = [ :SATISFIES, 'satisfies' ]
            when 'if':
              @token = [ :IF, 'if' ]
            when 'then':
              @token = [ :THEN, 'then' ]
            when 'else':
              @token = [ :ELSE, 'else' ]
            when 'to':
              @token = [ :TO, 'to' ]
            when 'and':
              @token = [ :AND, 'and' ]
            when 'or':
              @token = [ :OR, 'or' ]
            when 'mod':
              @token = [ :MOD, 'mod' ]
            when 'div':
              @token = [ :DIV, 'div' ]
            #when '*doh*':
            #  # do nothing
            #  @token = nil
            else
              @token = nil
          end
        end
      end
    end
 
    if @token.nil? && @source[@curpos..@curpos+1] == '..'
      @token = [ :DOT_DOT, '..' ]
    end

    if @token.nil?
      if @curpos >= @source.length
        @token = [false, false]
        return @token
      end

      res = @@regex[:general].match(@source[@curpos..@source.length-1])
      #@source[@curpos..@source.length-1] =~ @@regex[:general]
      #res = [ nil, $1, $2, $3, $4, $5, $6, $7, $8 ]
      if res.nil?
        raise "Failed to parse '#{@source}' at #{@curpos}': #{@source[@curpos..@source.length-1]}"
      else
        if !res[1].nil?
          if res[1] == 'if'
            @token = [ :IF, 'if' ]
          else
            @token = [ :FUNCTION_NAME, res[1] ]
          end
        elsif !res[2].nil?
          @token = [ res[2] == 'method' ? :AXIS_METHOD : :AXIS_NAME, res[2] ]
        elsif !res[3].nil?
          @token = [ :NAME_COLON_STAR, res[3] ]
        elsif !res[4].nil?
          qname = res[4]
          case qname
            when 'for':
              @token = [ :FOR, 'for' ]
            when 'return':
              @token = [ :RETURN, 'return' ]
            when 'in':
              @token = [ :IN, 'in' ]
            when 'let':
              @token = [ :LET, 'let' ]
            when 'except':
              @token = [ :EXCEPT, 'except' ]
            when 'every':
              @token = [ :EVERY, 'every' ]
            when 'some':
              @token = [ :SOME, 'some' ]   
            when 'satisfies':
              @token = [ :SATISFIES, 'satisfies' ]
            when 'if':
              @token = [ :IF, 'if' ]
            when 'then':
              @token = [ :THEN, 'then' ]
            when 'else':
              @token = [ :ELSE, 'else' ]
            else
              @token = [ :QNAME, res[4] ]
          end
        elsif !res[5].nil?
          s = res[5]
          s = s[1..s.length-2]
          @token = [ :LITERAL, s ]
          @curpos = @curpos + 2  # the quotes
        elsif !res[6].nil?
          @token = [ :NUMBER, res[6] ]
        elsif !res[7].nil?
          @curpos = @curpos + 1
          @token = [ :DOLLAR_QNAME, res[7] ]
        elsif !res[8].nil?
          @token = [ @@ops[res[8]] || res[8], res[8] ]
        else
          raise "Failed to parse '#{@source}' at #{@curpos}: #{@source[@curpos..@source.length-1]}"
        end
      end
    end

    if !@token[1].nil?
      @curpos = @curpos + @token[1].length
    end
    @last_token = @token
    return @token
  end
...end xsm_expression_parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    24,    25,   102,    36,    38,    27,   102,   159,     8,    41,
    27,    23,   101,    33,    41,    21,    26,    31,   161,   120,
    21,    26,    31,    27,    10,    15,    39,    41,    66,    10,
    15,    12,    17,    21,    26,    31,    81,   102,    82,    44,
     1,     5,    10,    15,    24,    25,   160,    36,    38,    27,
   107,    56,     8,    41,    27,    23,    64,    33,    41,    21,
    26,    31,    76,    77,    21,    26,    31,    27,    10,    15,
    39,    41,   -12,    10,    15,    12,    17,    21,    26,    31,
    68,    41,    56,    44,     1,     5,    10,    15,    25,    41,
    36,    38,    41,    50,    51,     8,    10,    15,    23,   157,
    33,    54,    55,    53,    10,    15,    79,    10,    15,    25,
    27,    56,    38,    39,    41,    54,    55,    53,    12,    17,
    21,    26,    31,    54,    55,    53,    44,     1,     5,    10,
    15,    27,   170,    25,    39,    41,    38,    91,    92,    12,
    17,    21,    26,    31,    91,    92,    84,    44,     1,     5,
    10,    15,    76,    77,    25,    27,    56,    38,    39,    41,
    91,    92,    93,    12,    17,    21,    26,    31,    76,    77,
   129,    44,     1,     5,    10,    15,    27,   123,   124,    39,
    41,    76,    77,   105,    12,    17,    21,    26,    31,    76,
    77,   128,    44,     1,     5,    10,    15,    25,   127,    36,
    38,    76,    77,   100,     8,   121,   150,    23,   151,    33,
    76,    77,    76,    77,    74,    75,    76,    77,    25,    27,
   103,    38,    39,    41,    91,    92,    49,    12,    17,    21,
    26,    31,    91,    92,   105,    44,     1,     5,    10,    15,
    27,   175,    25,    39,    41,    38,    76,    77,    12,    17,
    21,    26,    31,    89,    90,   108,    44,     1,     5,    10,
    15,    76,    77,    25,    27,   nil,    38,    39,    41,    76,
    77,   nil,    12,    17,    21,    26,    31,    91,    92,   nil,
    44,     1,     5,    10,    15,    27,   nil,    25,    39,    41,
    38,    91,    92,    12,    17,    21,    26,    31,    76,    77,
   nil,    44,     1,     5,    10,    15,    76,    77,    25,    27,
   nil,    38,    39,    41,    89,    90,   nil,    12,    17,    21,
    26,    31,   nil,   nil,   nil,    44,     1,     5,    10,    15,
    27,   nil,    25,    39,    41,    38,   nil,   nil,    12,    17,
    21,    26,    31,   nil,   nil,   nil,    44,     1,     5,    10,
    15,   nil,   nil,   146,    27,   147,   nil,    39,    41,    76,
    77,   nil,    12,    17,    21,    26,    31,   nil,   nil,   nil,
    44,     1,     5,    10,    15,    25,   nil,    36,    38,    27,
   nil,   nil,     8,    41,    27,    23,   nil,    33,    41,    21,
    26,    31,   nil,   nil,    21,    26,    31,    27,    10,    15,
    39,    41,   nil,    10,    15,    12,    17,    21,    26,    31,
   nil,   nil,   nil,    44,     1,     5,    10,    15,    25,   nil,
    36,    38,    27,   nil,   nil,     8,    41,    27,    23,   nil,
    33,    41,    21,    26,    31,   nil,   nil,    21,    26,    31,
    27,    10,    15,    39,    41,   nil,    10,    15,    12,    17,
    21,    26,    31,   nil,   nil,   nil,    44,     1,     5,    10,
    15,    25,   nil,    36,    38,   nil,   nil,   nil,     8,   nil,
   nil,    23,   nil,    33,   nil,   nil,    78,    69,    70,    71,
    72,    73,   nil,    27,    76,    77,    39,    41,   nil,   nil,
   nil,    12,    17,    21,    26,    31,   nil,   nil,   nil,    44,
     1,     5,    10,    15,    25,   nil,    36,    38,   nil,   nil,
   nil,     8,   nil,   148,    23,   149,    33,   nil,    76,    77,
   nil,   nil,   152,   nil,   153,   nil,    27,    76,    77,    39,
    41,   nil,   nil,   nil,    12,    17,    21,    26,    31,   nil,
   nil,   nil,    44,     1,     5,    10,    15,    25,   nil,    36,
    38,   nil,   nil,   nil,     8,   nil,   nil,    23,   nil,    33,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    27,
   nil,   nil,    39,    41,   nil,   nil,   nil,    12,    17,    21,
    26,    31,   nil,   nil,   nil,    44,     1,     5,    10,    15,
    25,   nil,    36,    38,   nil,   nil,   nil,     8,   nil,   nil,
    23,   nil,    33,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    25,    27,   nil,    38,    39,    41,   nil,   nil,   nil,
    12,    17,    21,    26,    31,   nil,   nil,   nil,    44,     1,
     5,    10,    15,    27,   nil,   nil,    39,    41,   nil,   nil,
   nil,    12,    17,    21,    26,    31,   nil,   nil,   nil,    44,
     1,     5,    10,    15,    25,   nil,    36,    38,   nil,   nil,
   nil,     8,   nil,   nil,    23,   nil,    33,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    25,    27,   nil,    38,    39,
    41,   nil,   nil,   nil,    12,    17,    21,    26,    31,   nil,
   nil,   nil,    44,     1,     5,    10,    15,    27,   nil,    25,
    39,    41,    38,   nil,   nil,    12,    17,    21,    26,    31,
   nil,   nil,   nil,    44,     1,     5,    10,    15,   nil,   nil,
   nil,    27,   nil,   nil,    39,    41,   nil,   nil,   nil,    12,
    17,    21,    26,    31,   nil,   nil,   nil,    44,     1,     5,
    10,    15,    25,   nil,    36,    38,   nil,   nil,   nil,     8,
   nil,   nil,    23,   nil,    33,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    25,    27,   nil,    38,    39,    41,   nil,
   nil,   nil,    12,    17,    21,    26,    31,   nil,   nil,   nil,
    44,     1,     5,    10,    15,    27,   nil,    25,    39,    41,
    38,   nil,   nil,    12,    17,    21,    26,    31,   nil,   nil,
   nil,    44,     1,     5,    10,    15,   nil,   nil,    25,    27,
   nil,    38,    39,    41,   nil,   nil,   nil,    12,    17,    21,
    26,    31,   nil,   nil,   nil,    44,     1,     5,    10,    15,
    27,   nil,    25,    39,    41,    38,   nil,   nil,    12,    17,
    21,    26,    31,   nil,   nil,   nil,    44,     1,     5,    10,
    15,   nil,   nil,    25,    27,   nil,    38,    39,    41,   nil,
   nil,   nil,    12,    17,    21,    26,    31,   nil,   nil,   nil,
    44,     1,     5,    10,    15,    27,   nil,   nil,    39,    41,
   nil,   nil,   nil,    12,    17,    21,    26,    31,   nil,   nil,
   nil,    44,     1,     5,    10,    15,    25,   nil,    36,    38,
   nil,   nil,   nil,     8,   nil,   nil,    23,   nil,    33,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    27,   nil,
   nil,    39,    41,   nil,   nil,   nil,    12,    17,    21,    26,
    31,   nil,   nil,   nil,    44,     1,     5,    10,    15,    25,
   nil,    36,    38,   nil,   nil,   nil,     8,   nil,   nil,    23,
   nil,    33,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    25,    27,   nil,    38,    39,    41,   nil,   nil,   nil,    12,
    17,    21,    26,    31,   nil,   nil,   nil,    44,     1,     5,
    10,    15,    27,   nil,    25,    39,    41,    38,   nil,   nil,
    12,    17,    21,    26,    31,   nil,   nil,   nil,    44,     1,
     5,    10,    15,   nil,   nil,    25,    27,   nil,    38,    39,
    41,   nil,   nil,   nil,    12,    17,    21,    26,    31,   nil,
   nil,   nil,    44,     1,     5,    10,    15,    27,   nil,    25,
    39,    41,    38,   nil,   nil,    12,    17,    21,    26,    31,
   nil,   nil,   nil,    44,     1,     5,    10,    15,   nil,   nil,
    25,    27,   nil,    38,    39,    41,   nil,   nil,   nil,    12,
    17,    21,    26,    31,   nil,   nil,   nil,    44,     1,     5,
    10,    15,    27,   nil,    25,    39,    41,    38,   nil,   nil,
    12,    17,    21,    26,    31,   nil,   nil,   nil,    44,     1,
     5,    10,    15,   nil,   nil,    25,    27,   nil,    38,   nil,
    41,   nil,   nil,   nil,    12,    17,    21,    26,    31,   nil,
   nil,   nil,    44,     1,     5,    10,    15,    27,   nil,    25,
    39,    41,    38,   nil,   nil,    12,    17,    21,    26,    31,
   nil,   nil,   nil,    44,     1,     5,    10,    15,   nil,   nil,
    25,    27,   nil,    38,    39,    41,   nil,   nil,   nil,    12,
    17,    21,    26,    31,   nil,   nil,   nil,    44,     1,     5,
    10,    15,    27,   nil,    25,   nil,    41,    38,   nil,   nil,
    12,    17,    21,    26,    31,   nil,   nil,   nil,    44,     1,
     5,    10,    15,   nil,   nil,    25,    27,   nil,    38,    39,
    41,   nil,   nil,   nil,    12,    17,    21,    26,    31,   nil,
   nil,   nil,    44,     1,     5,    10,    15,    27,   nil,   nil,
    39,    41,   nil,   nil,   nil,    12,    17,    21,    26,    31,
   nil,   nil,   nil,    44,     1,     5,    10,    15,    25,   nil,
    36,    38,   nil,   nil,   nil,     8,   nil,   nil,    23,   nil,
    33,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    27,   nil,   nil,    39,    41,   -11,   nil,   nil,    12,    17,
    21,    26,    31,   nil,   nil,   nil,    44,     1,     5,    10,
    15,   nil,   nil,    78,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    69,    70,    71,    72,    73,    74,
    75,    76,    77,   nil,   -11 ]

racc_action_check = [
     0,     0,    57,     0,     0,   124,    80,   142,     0,   124,
    12,     0,    57,     0,    12,   124,   124,   124,   143,    80,
    12,    12,    12,     0,   124,   124,     0,     0,    24,    12,
    12,     0,     0,     0,     0,     0,    34,    65,    34,     0,
     0,     0,     0,     0,    82,    82,   142,    82,    82,    17,
    65,    23,    82,    17,   123,    82,    22,    82,   123,    17,
    17,    17,   116,   116,   123,   123,   123,    82,    17,    17,
    82,    82,   139,   123,   123,    82,    82,    82,    82,    82,
    28,    59,     8,    82,    82,    82,    82,    82,   100,     6,
   100,   100,    26,     6,     6,   100,    59,    59,   100,   126,
   100,   118,   118,   118,     6,     6,    31,    26,    26,   153,
   100,    33,   153,   100,   100,   117,   117,   117,   100,   100,
   100,   100,   100,     7,     7,     7,   100,   100,   100,   100,
   100,   153,   157,   152,   153,   153,   152,    95,    95,   153,
   153,   153,   153,   153,   156,   156,    36,   153,   153,   153,
   153,   153,   164,   164,   151,   152,   102,   151,   152,   152,
    96,    96,    47,   152,   152,   152,   152,   152,   115,   115,
    87,   152,   152,   152,   152,   152,   151,    83,    83,   151,
   151,   110,   110,    83,   151,   151,   151,   151,   151,   168,
   168,    86,   151,   151,   151,   151,   151,    15,    85,    15,
    15,   163,   163,    56,    15,    81,   113,    15,   113,    15,
   119,   119,   113,   113,   173,   173,   173,   173,   150,    15,
    61,   150,    15,    15,   155,   155,     5,    15,    15,    15,
    15,    15,    60,    60,    62,    15,    15,    15,    15,    15,
   150,   174,   149,   150,   150,   149,   169,   169,   150,   150,
   150,   150,   150,    42,    42,    66,   150,   150,   150,   150,
   150,   165,   165,   148,   149,   nil,   148,   149,   149,   166,
   166,   nil,   149,   149,   149,   149,   149,    45,    45,   nil,
   149,   149,   149,   149,   149,   148,   nil,   147,   148,   148,
   147,    63,    63,   148,   148,   148,   148,   148,   167,   167,
   nil,   148,   148,   148,   148,   148,   162,   162,   146,   147,
   nil,   146,   147,   147,   135,   135,   nil,   147,   147,   147,
   147,   147,   nil,   nil,   nil,   147,   147,   147,   147,   147,
   146,   nil,    71,   146,   146,    71,   nil,   nil,   146,   146,
   146,   146,   146,   nil,   nil,   nil,   146,   146,   146,   146,
   146,   nil,   nil,   111,    71,   111,   nil,    71,    71,   111,
   111,   nil,    71,    71,    71,    71,    71,   nil,   nil,   nil,
    71,    71,    71,    71,    71,   128,   nil,   128,   128,    51,
   nil,   nil,   128,    51,    91,   128,   nil,   128,    91,    51,
    51,    51,   nil,   nil,    91,    91,    91,   128,    51,    51,
   128,   128,   nil,    91,    91,   128,   128,   128,   128,   128,
   nil,   nil,   nil,   128,   128,   128,   128,   128,   120,   nil,
   120,   120,    50,   nil,   nil,   120,    50,    92,   120,   nil,
   120,    92,    50,    50,    50,   nil,   nil,    92,    92,    92,
   120,    50,    50,   120,   120,   nil,    92,    92,   120,   120,
   120,   120,   120,   nil,   nil,   nil,   120,   120,   120,   120,
   120,   108,   nil,   108,   108,   nil,   nil,   nil,   108,   nil,
   nil,   108,   nil,   108,   nil,   nil,   130,   130,   130,   130,
   130,   130,   nil,   108,   130,   130,   108,   108,   nil,   nil,
   nil,   108,   108,   108,   108,   108,   nil,   nil,   nil,   108,
   108,   108,   108,   108,   107,   nil,   107,   107,   nil,   nil,
   nil,   107,   nil,   112,   107,   112,   107,   nil,   112,   112,
   nil,   nil,   114,   nil,   114,   nil,   107,   114,   114,   107,
   107,   nil,   nil,   nil,   107,   107,   107,   107,   107,   nil,
   nil,   nil,   107,   107,   107,   107,   107,   105,   nil,   105,
   105,   nil,   nil,   nil,   105,   nil,   nil,   105,   nil,   105,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   105,
   nil,   nil,   105,   105,   nil,   nil,   nil,   105,   105,   105,
   105,   105,   nil,   nil,   nil,   105,   105,   105,   105,   105,
    38,   nil,    38,    38,   nil,   nil,   nil,    38,   nil,   nil,
    38,   nil,    38,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    39,    38,   nil,    39,    38,    38,   nil,   nil,   nil,
    38,    38,    38,    38,    38,   nil,   nil,   nil,    38,    38,
    38,    38,    38,    39,   nil,   nil,    39,    39,   nil,   nil,
   nil,    39,    39,    39,    39,    39,   nil,   nil,   nil,    39,
    39,    39,    39,    39,   101,   nil,   101,   101,   nil,   nil,
   nil,   101,   nil,   nil,   101,   nil,   101,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   159,   101,   nil,   159,   101,
   101,   nil,   nil,   nil,   101,   101,   101,   101,   101,   nil,
   nil,   nil,   101,   101,   101,   101,   101,   159,   nil,    93,
   159,   159,    93,   nil,   nil,   159,   159,   159,   159,   159,
   nil,   nil,   nil,   159,   159,   159,   159,   159,   nil,   nil,
   nil,    93,   nil,   nil,    93,    93,   nil,   nil,   nil,    93,
    93,    93,    93,    93,   nil,   nil,   nil,    93,    93,    93,
    93,    93,    49,   nil,    49,    49,   nil,   nil,   nil,    49,
   nil,   nil,    49,   nil,    49,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    90,    49,   nil,    90,    49,    49,   nil,
   nil,   nil,    49,    49,    49,    49,    49,   nil,   nil,   nil,
    49,    49,    49,    49,    49,    90,   nil,    89,    90,    90,
    89,   nil,   nil,    90,    90,    90,    90,    90,   nil,   nil,
   nil,    90,    90,    90,    90,    90,   nil,   nil,    53,    89,
   nil,    53,    89,    89,   nil,   nil,   nil,    89,    89,    89,
    89,    89,   nil,   nil,   nil,    89,    89,    89,    89,    89,
    53,   nil,    54,    53,    53,    54,   nil,   nil,    53,    53,
    53,    53,    53,   nil,   nil,   nil,    53,    53,    53,    53,
    53,   nil,   nil,    55,    54,   nil,    55,    54,    54,   nil,
   nil,   nil,    54,    54,    54,    54,    54,   nil,   nil,   nil,
    54,    54,    54,    54,    54,    55,   nil,   nil,    55,    55,
   nil,   nil,   nil,    55,    55,    55,    55,    55,   nil,   nil,
   nil,    55,    55,    55,    55,    55,    84,   nil,    84,    84,
   nil,   nil,   nil,    84,   nil,   nil,    84,   nil,    84,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    84,   nil,
   nil,    84,    84,   nil,   nil,   nil,    84,    84,    84,    84,
    84,   nil,   nil,   nil,    84,    84,    84,    84,    84,   170,
   nil,   170,   170,   nil,   nil,   nil,   170,   nil,   nil,   170,
   nil,   170,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    78,   170,   nil,    78,   170,   170,   nil,   nil,   nil,   170,
   170,   170,   170,   170,   nil,   nil,   nil,   170,   170,   170,
   170,   170,    78,   nil,    77,    78,    78,    77,   nil,   nil,
    78,    78,    78,    78,    78,   nil,   nil,   nil,    78,    78,
    78,    78,    78,   nil,   nil,    76,    77,   nil,    76,    77,
    77,   nil,   nil,   nil,    77,    77,    77,    77,    77,   nil,
   nil,   nil,    77,    77,    77,    77,    77,    76,   nil,    75,
    76,    76,    75,   nil,   nil,    76,    76,    76,    76,    76,
   nil,   nil,   nil,    76,    76,    76,    76,    76,   nil,   nil,
    74,    75,   nil,    74,    75,    75,   nil,   nil,   nil,    75,
    75,    75,    75,    75,   nil,   nil,   nil,    75,    75,    75,
    75,    75,    74,   nil,    64,    74,    74,    64,   nil,   nil,
    74,    74,    74,    74,    74,   nil,   nil,   nil,    74,    74,
    74,    74,    74,   nil,   nil,    73,    64,   nil,    73,   nil,
    64,   nil,   nil,   nil,    64,    64,    64,    64,    64,   nil,
   nil,   nil,    64,    64,    64,    64,    64,    73,   nil,    72,
    73,    73,    72,   nil,   nil,    73,    73,    73,    73,    73,
   nil,   nil,   nil,    73,    73,    73,    73,    73,   nil,   nil,
    68,    72,   nil,    68,    72,    72,   nil,   nil,   nil,    72,
    72,    72,    72,    72,   nil,   nil,   nil,    72,    72,    72,
    72,    72,    68,   nil,    69,   nil,    68,    69,   nil,   nil,
    68,    68,    68,    68,    68,   nil,   nil,   nil,    68,    68,
    68,    68,    68,   nil,   nil,    70,    69,   nil,    70,    69,
    69,   nil,   nil,   nil,    69,    69,    69,    69,    69,   nil,
   nil,   nil,    69,    69,    69,    69,    69,    70,   nil,   nil,
    70,    70,   nil,   nil,   nil,    70,    70,    70,    70,    70,
   nil,   nil,   nil,    70,    70,    70,    70,    70,   175,   nil,
   175,   175,   nil,   nil,   nil,   175,   nil,   nil,   175,   nil,
   175,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   175,   nil,   nil,   175,   175,   141,   nil,   nil,   175,   175,
   175,   175,   175,   nil,   nil,   nil,   175,   175,   175,   175,
   175,   nil,   nil,   141,   141,   141,   141,   141,   141,   141,
   141,   141,   141,    29,    29,    29,    29,    29,    29,    29,
    29,    29,    29,   nil,   141 ]

racc_action_pointer = [
    -4,   nil,   nil,   nil,   nil,   218,    58,    92,    77,   nil,
   nil,   nil,   -17,   nil,   nil,   192,   nil,    22,   nil,   nil,
   nil,   nil,    22,    46,    23,   nil,    61,   nil,    46,  1262,
   nil,    66,   nil,   106,    36,   nil,   138,   nil,   585,   606,
   nil,   nil,   234,   nil,   nil,   242,   nil,   144,   nil,   737,
   395,   352,   nil,   803,   827,   848,   189,    -1,   nil,    50,
   197,   172,   193,   256,  1069,    34,   249,   nil,  1135,  1159,
  1180,   327,  1114,  1090,  1045,  1024,  1000,   979,   955,   nil,
     3,   205,    40,   142,   891,   189,   188,   161,   nil,   782,
   758,   357,   400,   694,   nil,   102,   125,   nil,   nil,   nil,
    83,   649,   151,   nil,   nil,   542,   nil,   499,   456,   nil,
   152,   330,   489,   183,   498,   139,    33,    84,    70,   181,
   413,   nil,   nil,    27,   -22,   nil,    90,   nil,   370,   nil,
   455,   nil,   nil,   nil,   nil,   295,   nil,   nil,   nil,    69,
   nil,  1252,     4,   -24,   nil,   nil,   303,   282,   258,   237,
   213,   149,   128,   104,   nil,   189,   109,   122,   nil,   670,
   nil,   nil,   277,   172,   123,   232,   240,   269,   160,   217,
   934,   nil,   nil,   187,   230,  1223,   nil ]

racc_action_default = [
    -3,   -90,   -66,   -29,    -7,  -100,  -100,   -47,  -100,    -8,
   -97,   -72,   -67,   -50,    -9,  -100,   -82,  -100,   -54,   -10,
   -78,   -76,   -56,  -100,  -100,   -86,  -100,   -77,   -57,   -32,
   -88,  -100,   -60,  -100,  -100,   -82,  -100,    -1,   -93,  -100,
    -4,   -99,   -24,    -5,   -89,   -65,   -26,    -6,   -91,   -93,
  -100,  -100,   -79,  -100,  -100,  -100,  -100,  -100,   -19,  -100,
   -68,  -100,   -75,   -69,  -100,  -100,  -100,   -80,  -100,  -100,
  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,   -81,
  -100,  -100,    -3,   -62,  -100,  -100,   -94,   -95,   -55,  -100,
  -100,  -100,  -100,  -100,   -95,   -70,   -71,   -53,   -51,   -52,
  -100,  -100,  -100,   -98,   -83,  -100,   -58,  -100,  -100,   -59,
   -31,   -33,   -34,   -35,   -36,   -45,   -46,   -48,   -49,   -30,
  -100,   177,    -2,  -100,  -100,   -61,  -100,   -92,  -100,   -87,
   -32,   -27,   -28,   -73,   -74,   -25,   -21,   -18,   -20,    -7,
   -13,   -32,  -100,  -100,   -22,   -15,  -100,  -100,  -100,  -100,
  -100,  -100,  -100,  -100,   -23,   -63,   -64,  -100,   -96,  -100,
   -85,   -84,   -37,   -38,   -41,   -42,   -39,   -40,   -43,   -44,
  -100,   -12,   -14,   -11,   -17,  -100,   -16 ]

racc_goto_table = [
    61,    62,    37,    59,   139,    60,    52,   140,    59,   106,
    63,    34,    57,   109,    88,   133,   134,   117,   118,   125,
    83,   131,   132,    87,   135,   138,    67,    65,    97,    98,
    99,   142,    48,   nil,    94,   nil,   nil,    80,   nil,   nil,
   nil,    59,    59,    95,    96,   nil,   nil,   nil,   nil,   nil,
   nil,   110,   111,   112,   113,   114,   115,   116,   171,    52,
   119,   172,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   126,
   nil,   130,   130,   nil,   nil,   130,   nil,   nil,   nil,   nil,
   nil,   nil,    59,    59,   122,   136,   137,   141,   nil,   nil,
   143,   nil,   144,   145,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   154,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   158,    59,    59,   155,   156,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   162,   163,
   164,   165,   166,   167,   168,   169,   nil,   nil,   nil,   nil,
   nil,   173,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   174,   nil,   nil,   nil,   nil,
   176 ]

racc_goto_check = [
     3,    25,     2,    29,     6,    27,    32,    10,    29,    21,
    27,     1,    13,    21,    19,    30,    30,    18,    18,    26,
    25,    16,    16,     3,    15,    14,    32,    13,    19,    19,
    19,    12,    34,   nil,     3,   nil,   nil,    13,   nil,   nil,
   nil,    29,    29,    27,    27,   nil,   nil,   nil,   nil,   nil,
   nil,    11,    11,    11,    11,    11,    11,    11,     6,    32,
    11,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,
   nil,    11,    11,   nil,   nil,    11,   nil,   nil,   nil,   nil,
   nil,   nil,    29,    29,     2,     3,     3,    11,   nil,   nil,
     3,   nil,     3,     3,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     3,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     3,    29,    29,    27,    27,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    11,    11,
    11,    11,    11,    11,    11,    11,   nil,   nil,   nil,   nil,
   nil,    11,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     3,   nil,   nil,   nil,   nil,
     3 ]

racc_goto_pointer = [
   nil,    11,     2,   -15,   nil,   nil,  -101,   nil,   nil,   nil,
   -98,   -18,   -74,     4,   -77,   -69,   -68,   nil,   -59,   -25,
   nil,   -55,   nil,   nil,   nil,   -15,   -64,    -7,   nil,    -9,
   -76,   nil,     0,   nil,    27,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,    40,    43,    47,     4,     9,    14,    19,
   nil,    29,   nil,   nil,    58,    42,    46,     3,     7,    13,
    18,    22,    28,    32,    35,   nil,   nil,    45,     2,     6,
    11,    16,    20,   104,    30,    85,    86 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 50, :_reduce_1,
  3, 50, :_reduce_2,
  0, 51, :_reduce_none,
  1, 51, :_reduce_none,
  1, 51, :_reduce_none,
  1, 52, :_reduce_none,
  1, 52, :_reduce_none,
  1, 52, :_reduce_none,
  1, 52, :_reduce_none,
  1, 52, :_reduce_none,
  1, 59, :_reduce_none,
  1, 59, :_reduce_none,
  1, 61, :_reduce_13,
  3, 61, :_reduce_14,
  4, 53, :_reduce_15,
  8, 56, :_reduce_16,
  6, 56, :_reduce_17,
  4, 57, :_reduce_18,
  1, 62, :_reduce_19,
  3, 62, :_reduce_20,
  3, 63, :_reduce_21,
  4, 58, :_reduce_22,
  4, 58, :_reduce_23,
  1, 54, :_reduce_none,
  3, 54, :_reduce_25,
  1, 64, :_reduce_none,
  3, 64, :_reduce_27,
  3, 64, :_reduce_28,
  1, 65, :_reduce_none,
  3, 65, :_reduce_30,
  3, 65, :_reduce_31,
  1, 66, :_reduce_none,
  3, 66, :_reduce_33,
  3, 66, :_reduce_34,
  3, 66, :_reduce_35,
  3, 66, :_reduce_36,
  5, 66, :_reduce_37,
  5, 66, :_reduce_38,
  5, 66, :_reduce_39,
  5, 66, :_reduce_40,
  5, 66, :_reduce_41,
  5, 66, :_reduce_42,
  5, 66, :_reduce_43,
  5, 66, :_reduce_44,
  3, 55, :_reduce_45,
  3, 55, :_reduce_46,
  1, 60, :_reduce_none,
  3, 60, :_reduce_48,
  3, 60, :_reduce_49,
  1, 67, :_reduce_none,
  3, 67, :_reduce_51,
  3, 67, :_reduce_52,
  3, 67, :_reduce_53,
  1, 68, :_reduce_none,
  2, 68, :_reduce_55,
  1, 69, :_reduce_none,
  1, 69, :_reduce_57,
  3, 71, :_reduce_58,
  3, 71, :_reduce_59,
  1, 70, :_reduce_60,
  3, 70, :_reduce_61,
  0, 75, :_reduce_none,
  2, 75, :_reduce_63,
  2, 75, :_reduce_64,
  1, 72, :_reduce_none,
  1, 72, :_reduce_none,
  1, 77, :_reduce_67,
  2, 77, :_reduce_68,
  2, 77, :_reduce_69,
  3, 77, :_reduce_70,
  3, 77, :_reduce_71,
  1, 76, :_reduce_72,
  3, 76, :_reduce_73,
  3, 76, :_reduce_74,
  2, 79, :_reduce_75,
  1, 79, :_reduce_76,
  1, 79, :_reduce_77,
  1, 80, :_reduce_78,
  2, 80, :_reduce_79,
  2, 80, :_reduce_80,
  2, 78, :_reduce_81,
  0, 74, :_reduce_82,
  2, 74, :_reduce_83,
  3, 82, :_reduce_84,
  3, 82, :_reduce_85,
  1, 73, :_reduce_86,
  3, 73, :_reduce_87,
  1, 73, :_reduce_none,
  1, 73, :_reduce_89,
  1, 73, :_reduce_90,
  2, 73, :_reduce_91,
  3, 83, :_reduce_92,
  0, 84, :_reduce_93,
  1, 84, :_reduce_none,
  1, 85, :_reduce_95,
  3, 85, :_reduce_96,
  1, 81, :_reduce_none,
  3, 81, :_reduce_98,
  1, 81, :_reduce_none ]

racc_reduce_n = 100

racc_shift_n = 177

racc_token_table = {
  false => 0,
  :error => 1,
  :SEMI => 2,
  :COMMA => 3,
  :LET => 4,
  :DOLLAR_QNAME => 5,
  :COLON_EQUAL => 6,
  :IF => 7,
  :LP => 8,
  :RP => 9,
  :THEN => 10,
  :ELSE => 11,
  :FOR => 12,
  :RETURN => 13,
  :IN => 14,
  :SOME => 15,
  :SATISFIES => 16,
  :EVERY => 17,
  :OR => 18,
  :AND => 19,
  :EXCEPT => 20,
  :EQ => 21,
  :NEQ => 22,
  :LT => 23,
  :GT => 24,
  :LTE => 25,
  :GTE => 26,
  :DOT_DOT => 27,
  :TO => 28,
  :PLUS => 29,
  :MINUS => 30,
  :STAR => 31,
  :DIV => 32,
  :MOD => 33,
  :PIPE => 34,
  :SLASH => 35,
  :SLASH_SLASH => 36,
  :DOT => 37,
  :AT => 38,
  :AXIS_NAME => 39,
  :COLON_COLON => 40,
  :LB => 41,
  :RB => 42,
  :LITERAL => 43,
  :NUMBER => 44,
  :FUNCTION_NAME => 45,
  :QNAME => 46,
  :LC => 47,
  :RC => 48 }

racc_nt_base = 49

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "SEMI",
  "COMMA",
  "LET",
  "DOLLAR_QNAME",
  "COLON_EQUAL",
  "IF",
  "LP",
  "RP",
  "THEN",
  "ELSE",
  "FOR",
  "RETURN",
  "IN",
  "SOME",
  "SATISFIES",
  "EVERY",
  "OR",
  "AND",
  "EXCEPT",
  "EQ",
  "NEQ",
  "LT",
  "GT",
  "LTE",
  "GTE",
  "DOT_DOT",
  "TO",
  "PLUS",
  "MINUS",
  "STAR",
  "DIV",
  "MOD",
  "PIPE",
  "SLASH",
  "SLASH_SLASH",
  "DOT",
  "AT",
  "AXIS_NAME",
  "COLON_COLON",
  "LB",
  "RB",
  "LITERAL",
  "NUMBER",
  "FUNCTION_NAME",
  "QNAME",
  "LC",
  "RC",
  "$start",
  "statements",
  "statement",
  "expr",
  "let_expr",
  "or_expr",
  "range_expr",
  "if_expr",
  "for_expr",
  "quant_expr",
  "num_expr",
  "additive_expr",
  "num_list",
  "for_vars",
  "for_var",
  "and_expr",
  "equality_expr",
  "relational_expr",
  "multiplicative_expr",
  "unary_expr",
  "union_expr",
  "path_expr",
  "union_expr_x",
  "location_path",
  "primary_expr",
  "predicates",
  "segment",
  "relative_location_path",
  "absolute_location_path",
  "axis_name",
  "step",
  "axis",
  "node_test",
  "predicate",
  "list",
  "opt_args",
  "args" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 10)
  def _reduce_1(val, _values, result)
     result = Fabulator::Expr::StatementList.new; result.add_statement(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 11)
  def _reduce_2(val, _values, result)
     result = val[0]; result.add_statement(val[2]) 
    result
  end
.,.,

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 26)
  def _reduce_13(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 27)
  def _reduce_14(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 29)
  def _reduce_15(val, _values, result)
     result = Fabulator::Expr::LetExpr.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 32)
  def _reduce_16(val, _values, result)
     result = Fabulator::Expr::IfExpr.new(val[2], val[5], val[7]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 33)
  def _reduce_17(val, _values, result)
     result = Fabulator::Expr::IfExpr.new(val[2], val[5], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 35)
  def _reduce_18(val, _values, result)
     result = Fabulator::Expr::ForExpr.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 37)
  def _reduce_19(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 38)
  def _reduce_20(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 40)
  def _reduce_21(val, _values, result)
     result = Fabulator::Expr::ForVar.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 42)
  def _reduce_22(val, _values, result)
     result = Fabulator::Expr::SomeExpr.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 43)
  def _reduce_23(val, _values, result)
     result = Fabulator::Expr::EveryExpr.new(val[1], val[3]) 
    result
  end
.,.,

# reduce 24 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 46)
  def _reduce_25(val, _values, result)
     result = Fabulator::Expr::OrExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 26 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 49)
  def _reduce_27(val, _values, result)
     result = Fabulator::Expr::AndExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 50)
  def _reduce_28(val, _values, result)
     result = Fabulator::Expr::ExceptExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 29 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 53)
  def _reduce_30(val, _values, result)
     result = Fabulator::Expr::EqExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 54)
  def _reduce_31(val, _values, result)
     result = Fabulator::Expr::NeqExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 32 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 57)
  def _reduce_33(val, _values, result)
     result = Fabulator::Expr::LtExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 58)
  def _reduce_34(val, _values, result)
     result = Fabulator::Expr::LtExpr.new(val[2], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 59)
  def _reduce_35(val, _values, result)
     result = Fabulator::Expr::LteExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 60)
  def _reduce_36(val, _values, result)
     result = Fabulator::Expr::LteExpr.new(val[2], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 61)
  def _reduce_37(val, _values, result)
     result = Fabulator::Expr::Between.new(val[2], val[0], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 62)
  def _reduce_38(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 63)
  def _reduce_39(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 64)
  def _reduce_40(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 65)
  def _reduce_41(val, _values, result)
     result = Fabulator::Expr::Between.new(val[2], val[4], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 66)
  def _reduce_42(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 67)
  def _reduce_43(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 68)
  def _reduce_44(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 70)
  def _reduce_45(val, _values, result)
     result = Fabulator::Expr::RangeExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 71)
  def _reduce_46(val, _values, result)
     result = Fabulator::Expr::RangeExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 47 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 74)
  def _reduce_48(val, _values, result)
     result = Fabulator::Expr::AddExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 75)
  def _reduce_49(val, _values, result)
     result = Fabulator::Expr::SubExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 50 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 78)
  def _reduce_51(val, _values, result)
     result = Fabulator::Expr::MpyExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 79)
  def _reduce_52(val, _values, result)
     result = Fabulator::Expr::DivExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 80)
  def _reduce_53(val, _values, result)
     result = Fabulator::Expr::ModExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 54 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 83)
  def _reduce_55(val, _values, result)
     result = Fabulator::Expr::NegExpr.new(val[1]) 
    result
  end
.,.,

# reduce 56 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 86)
  def _reduce_57(val, _values, result)
     result = Fabulator::Expr::UnionExpr.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 88)
  def _reduce_58(val, _values, result)
     result = [ val[0], val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 89)
  def _reduce_59(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 91)
  def _reduce_60(val, _values, result)
     result = Fabulator::Expr::PathExpr.new(nil, [], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 92)
  def _reduce_61(val, _values, result)
     result = Fabulator::Expr::PathExpr.new(val[0], val[1], val[2]) 
    result
  end
.,.,

# reduce 62 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 95)
  def _reduce_63(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 96)
  def _reduce_64(val, _values, result)
     result = [ Fabulator::Expr::AxisDescendentOrSelf.new ] + val[1] 
    result
  end
.,.,

# reduce 65 omitted

# reduce 66 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 104)
  def _reduce_67(val, _values, result)
     result = Fabulator::Expr::RootContext.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 105)
  def _reduce_68(val, _values, result)
     result = Fabulator::Expr::PathExpr.new(Fabulator::Expr::RootContext.new, [], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 106)
  def _reduce_69(val, _values, result)
     result = [ Fabulator::Expr::RootContext.new, Fabulator::Expr::AxisDescendentOrSelf.new(val[1][0]) ] + val[1][1..val[1].size-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 107)
  def _reduce_70(val, _values, result)
     result = [ Fabulator::Expr::RootContext.new(val[0]) ] + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 108)
  def _reduce_71(val, _values, result)
     result = [ Fabulator::Expr::RootContext.new(val[0]), Fabulator::Expr::AxisDescendentOrSelf.new(val[2][0]) ] + val[2][1..val[2].size-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 110)
  def _reduce_72(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 111)
  def _reduce_73(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 112)
  def _reduce_74(val, _values, result)
     result = val[0] + [ Fabulator::Expr::AxisDescendentOrSelf.new(val[2]) ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 115)
  def _reduce_75(val, _values, result)
     result = val[1].nil? || val[1].empty? ? val[0] : Fabulator::Expr::Predicates.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 116)
  def _reduce_76(val, _values, result)
     result = Fabulator::Expr::CurrentContext.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 117)
  def _reduce_77(val, _values, result)
     result = Fabulator::Expr::AxisParent.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 123)
  def _reduce_78(val, _values, result)
     result = Fabulator::Expr::AxisChild.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 124)
  def _reduce_79(val, _values, result)
     result = Fabulator::Expr::Axis.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 125)
  def _reduce_80(val, _values, result)
     result = Fabulator::Expr::AxisAttribute.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 127)
  def _reduce_81(val, _values, result)
     result = Fabulator::Expr::Axis.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 129)
  def _reduce_82(val, _values, result)
     result = [ ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 130)
  def _reduce_83(val, _values, result)
     result = val[0] + [ val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 132)
  def _reduce_84(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 133)
  def _reduce_85(val, _values, result)
     result = Fabulator::Expr::IndexPredicate.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 137)
  def _reduce_86(val, _values, result)
     result = Fabulator::Expr::Var.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 138)
  def _reduce_87(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 88 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 140)
  def _reduce_89(val, _values, result)
     result = Fabulator::Expr::Literal.new(val[0], [ Fabulator::FAB_NS, 'string' ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 141)
  def _reduce_90(val, _values, result)
     result = Fabulator::Expr::Literal.new(val[0] =~ /\./ ? val[0].to_d.to_r : val[0].to_i.to_r, [ Fabulator::FAB_NS, 'numeric' ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 142)
  def _reduce_91(val, _values, result)
     result = Fabulator::Expr::Function.new(@namespaces, val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 144)
  def _reduce_92(val, _values, result)
     result = Fabulator::Expr::List.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 146)
  def _reduce_93(val, _values, result)
     result = [ ] 
    result
  end
.,.,

# reduce 94 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 149)
  def _reduce_95(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 150)
  def _reduce_96(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

# reduce 97 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 153)
  def _reduce_98(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 99 omitted

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Expr
  end   # module Fabulator
