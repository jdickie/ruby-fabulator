#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Fabulator
  module Expr
    class Parser < Racc::Parser

module_eval(<<'...end xsm_expression_parser.racc/module_eval...', 'xsm_expression_parser.racc', 169)
  require 'fabulator/expr'
  require 'rational'
  require 'bigdecimal'
  require 'bigdecimal/util'

  def parse(t, xml = { })
    @source = t
    @curpos = 0
    @namespaces = { }
    @line = 0
    @col = 0

    if xml.nil?
      @namespaces = { }
    elsif xml.is_a?(Hash)
      @namespaces = xml
    else
      xml.namespaces.each do |ns|
        @namespaces[ns.prefix] = ns.href
      end
      begin
        @namespaces[''] = xml.namespaces.default.href
      rescue
      end
    end

    @yydebug = true

    @last_token = nil
      
    do_parse
  end

  def on_error(*args)
    raise Fabulator::Expr::ParserError.new("unable to parse '#{args[1]}' near line #{@line}, column #{@col}")
  end


  @@regex = {
    :simple_tokens => %r{\.\.|::|!=|>=|<=|\/\/|:=|\.|@|[*]|\(|\)|\[|\]|\{|\}|\/|\||\+|-|=|>|<|&|,|;},
    :ncname => %r{(?:[a-zA-Z_][-a-zA-Z0-9_.]*)},
    :event_type => %r{(?:processing-instruction|comment|text|node)},
    :axis_name => %r{(?:attribute|child|child-or-self|descendant|descendant-or-self|method|self)},
    :namespace_name => %r{(?:context|global|local|session|universal)},
    :number => %r{(-?\d+(?:\.\d+)?|\.\d+)},
  }

  @@regex[:axis] = %r{(#{@@regex[:ncname]})\s*(?=::)}
  @@regex[:name_colon_star] = %r{(#{@@regex[:ncname]}:\*)}
  @@regex[:qname] = %r{((?:#{@@regex[:ncname]}:)?#{@@regex[:ncname]})}
  @@regex[:dollar_qname] = %r{\$#{@@regex[:qname]}}
  @@regex[:dollar_int] = %r{\$([0-9]+)}
  @@regex[:function_name] = %r{#{@@regex[:qname]}\s*(?=\([^:])}

  @@ops = {
    '..' => :DOT_DOT,
    '::' => :COLON_COLON,
    '!=' => :NEQ,
    '>=' => :GTE,
    '<=' => :LTE,
    '//' => :SLASH_SLASH,
    ':=' => :COLON_EQUAL,
    '.'  => :DOT,
    '@'  => :AT,
    '*'  => :STAR,
    '('  => :LP,
    ')'  => :RP,
    '['  => :LB,
    ']'  => :RB,
    '{'  => :LC,
    '}'  => :RC,
    '/'  => :SLASH,
    '|'  => :PIPE,
    '+'  => :PLUS,
    '-'  => :MINUS,
    '='  => :EQ,
    '>'  => :GT,
    '<'  => :LT,
    '&'  => :AMP,
    ','  => :COMMA,
    ';'  => :SEMI
  }

  @@preceding_tokens = { }
  [%{
    @ :: ( 
    and or mod div 
    * 
    / // | + - = != < <= > >=
    == & && ||
  }.split(/\s*/), '[', ',', '$' ].each { |t| @@preceding_tokens[t] = true }

  @@regex[:general] = Regexp.compile(%{^(?:#{@@regex[:function_name]}|#{@@regex[:axis]}|#{@@regex[:name_colon_star]}|#{@@regex[:qname]}|('[^']*'|"[^"]*")|#{@@regex[:number]}|#{@@regex[:dollar_qname]}|#{@@regex[:dollar_int]}|(#{@@regex[:simple_tokens]}))})

  def next_token  
    @token = nil
    white_space = 0
    new_line = 0
    while @curpos < @source.length && @source[@curpos..@curpos] =~ /\s/ do
      if @source[@curpos..@curpos] =~ /\n/
        new_line = new_line + 1
        @line = @line + 1
        @col = 0
      else
        @col = @col + 1
      end
      @curpos = @curpos + 1
      white_space = white_space + 1
    end

    # skip comments delimited by (:  :)
    # comments can be nested
    # these are XPath 2.0 comments
    #
    if @curpos < @source.length && @source[@curpos..@curpos+1] == '(:'
      comment_depth = 1
      @curpos = @curpos + 2
      @col = @col + 2
      while comment_depth > 0 && @curpos < @source.length
        if @source[@curpos..@curpos+1] == '(:'
          comment_depth = comment_depth + 1
          @curpos = @curpos + 1
          @col = @col + 1
        end
        if @source[@curpos..@curpos+1] == ':)'
          comment_depth = comment_depth - 1
          @curpos = @curpos + 1
          @col = @col + 1
        end
        @curpos = @curpos + 1
        @col = @col + 1
      end
      white_space = white_space + 1
    end

    while @curpos < @source.length && @source[@curpos..@curpos] =~ /\s/ do
      if @source[@curpos..@curpos] =~ /\n/
        new_line = new_line + 1
        @line = @line + 1
        @col = 0
      else
        @col = @col + 1
      end
      @curpos = @curpos + 1
      white_space = white_space + 1
    end
        
    if @curpos >= @source.length
      @last_token = nil
      return [ false, false ]
    end

    #if new_line > 0 || white_space > 0
    #  @token = [ :SP, '' ]
    #end

    if @token.nil? && @last_token && ! @@preceding_tokens[@last_token[1]]
      if @source[@curpos..@curpos] == '*'
        @token = [ :STAR, '*' ]
      else
        if @source[@curpos..@source.length-1] =~ /^(#{@@regex[:ncname]})/
          ncname = $1
          case ncname
            when 'for':
              @token = [ :FOR, 'for' ]
            when 'return':
              @token = [ :RETURN, 'return' ]
            when 'in':
              @token = [ :IN, 'in' ]
            when 'let':
              @token = [ :LET, 'let' ]
            when 'except':
              @token = [ :EXCEPT, 'except' ]
            when 'every':
              @token = [ :EVERY, 'every' ]
            when 'some':
              @token = [ :SOME, 'some' ]
            when 'satisfies':
              @token = [ :SATISFIES, 'satisfies' ]
            when 'if':
              @token = [ :IF, 'if' ]
            when 'then':
              @token = [ :THEN, 'then' ]
            when 'else':
              @token = [ :ELSE, 'else' ]
            when 'to':
              @token = [ :TO, 'to' ]
            when 'and':
              @token = [ :AND, 'and' ]
            when 'or':
              @token = [ :OR, 'or' ]
            when 'mod':
              @token = [ :MOD, 'mod' ]
            when 'div':
              @token = [ :DIV, 'div' ]
            #when '*doh*':
            #  # do nothing
            #  @token = nil
            else
              @token = nil
          end
        end
      end
    end
 
    if @token.nil? && @source[@curpos..@curpos+1] == '..'
      @token = [ :DOT_DOT, '..' ]
    end

    if @token.nil?
      if @curpos >= @source.length
        @token = [false, false]
        return @token
      end

      res = @@regex[:general].match(@source[@curpos..@source.length-1])
      #@source[@curpos..@source.length-1] =~ @@regex[:general]
      #res = [ nil, $1, $2, $3, $4, $5, $6, $7, $8 ]
      if res.nil?
        raise "Failed to parse '#{@source}' at #{@curpos}': #{@source[@curpos..@source.length-1]}"
      else
        if !res[1].nil?
          if res[1] == 'if'
            @token = [ :IF, 'if' ]
          else
            @token = [ :FUNCTION_NAME, res[1] ]
          end
        elsif !res[2].nil?
          @token = [ res[2] == 'method' ? :AXIS_METHOD : :AXIS_NAME, res[2] ]
        elsif !res[3].nil?
          @token = [ :NAME_COLON_STAR, res[3] ]
        elsif !res[4].nil?
          qname = res[4]
          case qname
            when 'for':
              @token = [ :FOR, 'for' ]
            when 'return':
              @token = [ :RETURN, 'return' ]
            when 'in':
              @token = [ :IN, 'in' ]
            when 'let':
              @token = [ :LET, 'let' ]
            when 'except':
              @token = [ :EXCEPT, 'except' ]
            when 'every':
              @token = [ :EVERY, 'every' ]
            when 'some':
              @token = [ :SOME, 'some' ]   
            when 'satisfies':
              @token = [ :SATISFIES, 'satisfies' ]
            when 'if':
              @token = [ :IF, 'if' ]
            when 'then':
              @token = [ :THEN, 'then' ]
            when 'else':
              @token = [ :ELSE, 'else' ]
            when 'with':
              @token = [ :WITH, 'with' ]
            else
              @token = [ :QNAME, res[4] ]
          end
        elsif !res[5].nil?
          s = res[5]
          s = s[1..s.length-2]
          @curpos = @curpos + s.length
          @col = @col + s.length
          s.gsub!(/\\n/, "\n")
          @curpos = @curpos - s.length
          @col = @col - s.length
          @token = [ :LITERAL, s ]
          @curpos = @curpos + 2  # the quotes
          @col = @col + 2
        elsif !res[6].nil?
          @token = [ :NUMBER, res[6] ]
        elsif !res[7].nil?
          @curpos = @curpos + 1
          @col = @col + 1
          @token = [ :DOLLAR_QNAME, res[7] ]
        elsif !res[8].nil?
          @curpos = @curpos + 1
          @col = @col + 1
          @token = [ :DOLLAR_QNAME, res[8] ]
        elsif !res[9].nil?
          @token = [ @@ops[res[9]] || res[9], res[9] ]
        else
          raise "Failed to parse '#{@source}' at #{@curpos}: #{@source[@curpos..@source.length-1]}"
        end
      end
    end

    if !@token[1].nil?
      @curpos = @curpos + @token[1].length
      @col = @col + @token[1].length
    end
    @last_token = @token
    return @token
  end
...end xsm_expression_parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    86,    28,    29,    38,    40,    86,    44,   106,     7,    86,
    86,    22,   167,    33,   106,   106,    86,   127,   185,    56,
   115,     9,    14,    25,   105,    86,    42,    44,   120,    86,
    86,    10,    15,    19,    24,    30,   155,    95,    96,     1,
     4,     6,     9,    14,    86,   169,   112,    28,    29,    38,
    40,   168,    44,    77,     7,    78,   163,    22,   164,    33,
    95,    96,    95,    96,   159,    56,   160,     9,    14,    25,
    95,    96,    42,    44,    72,    70,    71,    10,    15,    19,
    24,    30,    72,    70,    71,     1,     4,     6,     9,    14,
    29,    38,    40,    25,    98,    99,     7,    44,   170,    22,
   100,    33,    86,    19,    24,    30,    93,    94,    95,    96,
    56,    25,     9,    14,    42,    44,    29,    86,    40,    10,
    15,    19,    24,    30,    72,    70,    71,     1,     4,     6,
     9,    14,    55,   161,    74,   162,    73,    25,    95,    96,
    42,    44,    29,    79,    40,    10,    15,    19,    24,    30,
    95,    96,    80,     1,     4,     6,     9,    14,    55,   165,
   -17,   166,    84,    25,    95,    96,    42,    44,    29,   158,
    40,    10,    15,    19,    24,    30,    59,    60,    55,     1,
     4,     6,     9,    14,    59,    60,    95,    96,    51,    25,
    95,    96,    42,    44,    59,    60,    86,    10,    15,    19,
    24,    30,    59,    60,   157,     1,     4,     6,     9,    14,
    29,    38,    40,    25,    95,    96,     7,    44,    86,    22,
   107,    33,    55,    19,    24,    30,    95,    96,    95,    96,
    56,    25,     9,    14,    42,    44,    29,    86,    40,    10,
    15,    19,    24,    30,    95,    96,   119,     1,     4,     6,
     9,    14,    59,    60,    59,    60,   100,    25,    95,    96,
    42,    44,    29,   121,    40,    10,    15,    19,    24,    30,
    61,    62,   125,     1,     4,     6,     9,    14,    95,    96,
    95,    96,   126,    25,    61,    62,    42,    44,    29,    50,
    40,    10,    15,    19,    24,    30,    59,    60,    86,     1,
     4,     6,     9,    14,   nil,   nil,   nil,   nil,   nil,    25,
   nil,   nil,    42,    44,    29,   nil,    40,    10,    15,    19,
    24,    30,   nil,   nil,   nil,     1,     4,     6,     9,    14,
   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,    42,    44,
    29,   nil,    40,    10,    15,    19,    24,    30,   nil,   nil,
   nil,     1,     4,     6,     9,    14,   nil,   nil,   nil,   nil,
   nil,    25,   nil,   nil,    42,    44,    29,   nil,    40,    10,
    15,    19,    24,    30,   nil,   nil,   nil,     1,     4,     6,
     9,    14,   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,
    42,    44,    29,   nil,    40,    10,    15,    19,    24,    30,
   nil,   nil,   nil,     1,     4,     6,     9,    14,   nil,   nil,
   nil,   nil,   nil,    25,   nil,   nil,    42,    44,   nil,   nil,
   nil,    10,    15,    19,    24,    30,   nil,   nil,   nil,     1,
     4,     6,     9,    14,    29,    38,    40,    25,   nil,   nil,
     7,    44,   nil,    22,   nil,    33,   nil,    19,    24,    30,
   nil,   nil,   nil,   nil,    56,    25,     9,    14,    42,    44,
    29,   nil,    40,    10,    15,    19,    24,    30,   nil,   nil,
   nil,     1,     4,     6,     9,    14,   nil,   nil,   nil,   nil,
   nil,    25,    29,   nil,    40,    44,   nil,   nil,   nil,    10,
    15,    19,    24,    30,   nil,   nil,   nil,     1,     4,     6,
     9,    14,   nil,    25,    29,   nil,    40,    44,   nil,   nil,
   nil,    10,    15,    19,    24,    30,   nil,   nil,   nil,     1,
     4,     6,     9,    14,   nil,    25,   nil,   nil,   nil,    44,
   nil,   nil,   nil,    10,    15,    19,    24,    30,   nil,   nil,
   nil,     1,     4,     6,     9,    14,    29,    38,    40,    25,
   nil,   nil,     7,    44,   nil,    22,   nil,    33,   nil,    19,
    24,    30,   nil,   nil,   nil,   nil,    56,    25,     9,    14,
    42,    44,    29,   nil,    40,    10,    15,    19,    24,    30,
   nil,   nil,   nil,     1,     4,     6,     9,    14,   nil,   nil,
   nil,   nil,   nil,    25,   nil,   nil,    42,    44,    29,   nil,
    40,    10,    15,    19,    24,    30,   nil,   nil,   nil,     1,
     4,     6,     9,    14,   nil,   nil,   nil,   nil,   nil,    25,
   nil,   nil,    42,    44,   nil,   nil,   nil,    10,    15,    19,
    24,    30,   nil,   nil,   nil,     1,     4,     6,     9,    14,
    29,    38,    40,    25,   nil,   nil,     7,    44,   nil,    22,
   nil,    33,   nil,    19,    24,    30,   nil,   nil,   nil,   nil,
    56,    25,     9,    14,    42,    44,   nil,   nil,   nil,    10,
    15,    19,    24,    30,   nil,   nil,   nil,     1,     4,     6,
     9,    14,    29,    38,    40,    25,   nil,   nil,     7,    44,
   nil,    22,   nil,    33,   nil,    19,    24,    30,   nil,   nil,
   nil,   nil,    56,    25,     9,    14,    42,    44,   nil,   nil,
   nil,    10,    15,    19,    24,    30,   nil,   nil,   nil,     1,
     4,     6,     9,    14,    29,    38,    40,    25,   nil,   nil,
     7,    44,   nil,    22,   nil,    33,   nil,    19,    24,    30,
   nil,   nil,   nil,   nil,    56,    25,     9,    14,    42,    44,
    29,   nil,    40,    10,    15,    19,    24,    30,   nil,   nil,
   nil,     1,     4,     6,     9,    14,   nil,   nil,   nil,   nil,
   nil,    25,   nil,   nil,    42,    44,   nil,   nil,   nil,    10,
    15,    19,    24,    30,   nil,   nil,   nil,     1,     4,     6,
     9,    14,    29,    38,    40,    25,   nil,   nil,     7,    44,
   nil,    22,   nil,    33,   nil,    19,    24,    30,   nil,   nil,
   nil,   nil,    56,    25,     9,    14,    42,    44,   nil,   nil,
   nil,    10,    15,    19,    24,    30,   nil,   nil,   nil,     1,
     4,     6,     9,    14,    29,    38,    40,    44,   nil,   nil,
     7,    65,    66,    22,   nil,    33,   nil,   nil,   nil,   nil,
    56,   nil,     9,    14,   nil,    25,   nil,   nil,    42,    44,
    29,   nil,    40,    10,    15,    19,    24,    30,   nil,   nil,
   nil,     1,     4,     6,     9,    14,   nil,   nil,   nil,   nil,
   nil,    25,   nil,   nil,    42,    44,   nil,   nil,   nil,    10,
    15,    19,    24,    30,   nil,   nil,   nil,     1,     4,     6,
     9,    14,    29,    38,    40,   nil,   nil,   nil,     7,   nil,
   nil,    22,   nil,    33,   nil,   nil,    87,    88,    89,    90,
    91,    92,   nil,    25,    95,    96,    42,    44,    29,   nil,
    40,    10,    15,    19,    24,    30,   nil,   nil,   nil,     1,
     4,     6,     9,    14,   nil,   nil,   nil,   nil,   nil,    25,
   nil,   nil,    42,    44,    29,   nil,    40,    10,    15,    19,
    24,    30,   nil,   nil,   nil,     1,     4,     6,     9,    14,
   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,    42,    44,
    29,   nil,    40,    10,    15,    19,    24,    30,   nil,   nil,
   nil,     1,     4,     6,     9,    14,   nil,   nil,   nil,   nil,
   nil,    25,   nil,   nil,    42,    44,    29,   nil,    40,    10,
    15,    19,    24,    30,   nil,   nil,   nil,     1,     4,     6,
     9,    14,   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,
    42,    44,    29,   nil,    40,    10,    15,    19,    24,    30,
   nil,   nil,   nil,     1,     4,     6,     9,    14,   nil,   nil,
   nil,   nil,   nil,    25,   nil,   nil,    42,    44,   nil,   nil,
   nil,    10,    15,    19,    24,    30,   nil,   nil,   nil,     1,
     4,     6,     9,    14,    29,    38,    40,   nil,   nil,   nil,
     7,   nil,   nil,    22,   nil,    33,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,    42,    44,
   nil,   nil,   nil,    10,    15,    19,    24,    30,   nil,   nil,
   nil,     1,     4,     6,     9,    14,    29,    38,    40,   nil,
   nil,   nil,     7,   nil,   nil,    22,   nil,    33,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,
    42,    44,    29,   nil,    40,    10,    15,    19,    24,    30,
   nil,   nil,   nil,     1,     4,     6,     9,    14,   nil,   nil,
   nil,   nil,   nil,    25,   nil,   nil,   nil,    44,   nil,   nil,
   nil,    10,    15,    19,    24,    30,   nil,   nil,   nil,     1,
     4,     6,     9,    14,    29,    38,    40,   nil,   nil,   nil,
     7,   nil,   nil,    22,   nil,    33,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,    42,    44,
    29,   nil,    40,    10,    15,    19,    24,    30,   nil,   nil,
   nil,     1,     4,     6,     9,    14,   nil,   nil,   nil,   nil,
   nil,    25,   nil,   nil,    42,    44,    29,   nil,    40,    10,
    15,    19,    24,    30,   nil,   nil,   nil,     1,     4,     6,
     9,    14,   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,
    42,    44,    29,   nil,    40,    10,    15,    19,    24,    30,
   nil,   nil,   nil,     1,     4,     6,     9,    14,   nil,   nil,
   nil,   nil,   nil,    25,   nil,   nil,    42,    44,    29,   nil,
    40,    10,    15,    19,    24,    30,   nil,   nil,   nil,     1,
     4,     6,     9,    14,   nil,   nil,   nil,   nil,   nil,    25,
   nil,   nil,    42,    44,    29,   nil,    40,    10,    15,    19,
    24,    30,   nil,   nil,   nil,     1,     4,     6,     9,    14,
   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,    42,    44,
    29,   nil,    40,    10,    15,    19,    24,    30,   nil,   nil,
   nil,     1,     4,     6,     9,    14,   nil,   nil,   nil,   nil,
   nil,    25,   nil,   nil,    42,    44,    29,   nil,    40,    10,
    15,    19,    24,    30,   nil,   nil,   nil,     1,     4,     6,
     9,    14,   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,
    42,    44,   nil,   nil,   nil,    10,    15,    19,    24,    30,
   nil,   nil,   nil,     1,     4,     6,     9,    14,    29,    38,
    40,   nil,   nil,   nil,     7,   nil,   nil,    22,   nil,    33,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,
   nil,   nil,    42,    44,   -16,   nil,   nil,    10,    15,    19,
    24,    30,   nil,   nil,   nil,     1,     4,     6,     9,    14,
   nil,   nil,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,   nil,   -16 ]

racc_action_check = [
    63,    78,    78,    78,    78,   147,    58,    68,    78,   184,
    83,    78,   144,    78,    53,    76,   151,    83,   184,    58,
    68,    58,    58,    78,    53,   152,    78,    78,    76,   124,
   153,    78,    78,    78,    78,    78,   124,   132,   132,    78,
    78,    78,    78,    78,   154,   147,    63,     0,     0,     0,
     0,   144,    24,    34,     0,    34,   136,     0,   136,     0,
   174,   174,   136,   136,   134,    24,   134,    24,    24,     0,
   134,   134,     0,     0,   141,   141,   141,     0,     0,     0,
     0,     0,   140,   140,   140,     0,     0,     0,     0,     0,
   107,   107,   107,    66,    49,    49,   107,    66,   155,   107,
    49,   107,   156,    66,    66,    66,   183,   183,   183,   183,
    66,   107,    66,    66,   107,   107,    88,   149,    88,   107,
   107,   107,   107,   107,    27,    27,    27,   107,   107,   107,
   107,   107,    33,   135,    30,   135,    28,    88,   135,   135,
    88,    88,   166,    36,   166,    88,    88,    88,    88,    88,
   173,   173,    38,    88,    88,    88,    88,    88,    22,   137,
   145,   137,    41,   166,   137,   137,   166,   166,   165,   131,
   165,   166,   166,   166,   166,   166,    11,    11,     7,   166,
   166,   166,   166,   166,    64,    64,   133,   133,     6,   165,
   179,   179,   165,   165,   114,   114,   172,   165,   165,   165,
   165,   165,   113,   113,   129,   165,   165,   165,   165,   165,
    14,    14,    14,    59,   175,   175,    14,    59,    43,    14,
    55,    14,   106,    59,    59,    59,   138,   138,   139,   139,
    59,    14,    59,    59,    14,    14,    87,   104,    87,    14,
    14,    14,    14,    14,   176,   176,    73,    14,    14,    14,
    14,    14,    57,    57,   142,   142,    75,    87,   177,   177,
    87,    87,   164,    77,   164,    87,    87,    87,    87,    87,
    12,    12,    81,    87,    87,    87,    87,    87,   180,   180,
   178,   178,    82,   164,   102,   102,   164,   164,   163,     3,
   163,   164,   164,   164,   164,   164,   143,   143,   186,   164,
   164,   164,   164,   164,   nil,   nil,   nil,   nil,   nil,   163,
   nil,   nil,   163,   163,   162,   nil,   162,   163,   163,   163,
   163,   163,   nil,   nil,   nil,   163,   163,   163,   163,   163,
   nil,   nil,   nil,   nil,   nil,   162,   nil,   nil,   162,   162,
   161,   nil,   161,   162,   162,   162,   162,   162,   nil,   nil,
   nil,   162,   162,   162,   162,   162,   nil,   nil,   nil,   nil,
   nil,   161,   nil,   nil,   161,   161,   160,   nil,   160,   161,
   161,   161,   161,   161,   nil,   nil,   nil,   161,   161,   161,
   161,   161,   nil,   nil,   nil,   nil,   nil,   160,   nil,   nil,
   160,   160,   159,   nil,   159,   160,   160,   160,   160,   160,
   nil,   nil,   nil,   160,   160,   160,   160,   160,   nil,   nil,
   nil,   nil,   nil,   159,   nil,   nil,   159,   159,   nil,   nil,
   nil,   159,   159,   159,   159,   159,   nil,   nil,   nil,   159,
   159,   159,   159,   159,   158,   158,   158,    60,   nil,   nil,
   158,    60,   nil,   158,   nil,   158,   nil,    60,    60,    60,
   nil,   nil,   nil,   nil,    60,   158,    60,    60,   158,   158,
   157,   nil,   157,   158,   158,   158,   158,   158,   nil,   nil,
   nil,   158,   158,   158,   158,   158,   nil,   nil,   nil,   nil,
   nil,   157,    86,   nil,    86,   157,   nil,   nil,   nil,   157,
   157,   157,   157,   157,   nil,   nil,   nil,   157,   157,   157,
   157,   157,   nil,    86,    84,   nil,    84,    86,   nil,   nil,
   nil,    86,    86,    86,    86,    86,   nil,   nil,   nil,    86,
    86,    86,    86,    86,   nil,    84,   nil,   nil,   nil,    84,
   nil,   nil,   nil,    84,    84,    84,    84,    84,   nil,   nil,
   nil,    84,    84,    84,    84,    84,    40,    40,    40,    99,
   nil,   nil,    40,    99,   nil,    40,   nil,    40,   nil,    99,
    99,    99,   nil,   nil,   nil,   nil,    99,    40,    99,    99,
    40,    40,    90,   nil,    90,    40,    40,    40,    40,    40,
   nil,   nil,   nil,    40,    40,    40,    40,    40,   nil,   nil,
   nil,   nil,   nil,    90,   nil,   nil,    90,    90,    42,   nil,
    42,    90,    90,    90,    90,    90,   nil,   nil,   nil,    90,
    90,    90,    90,    90,   nil,   nil,   nil,   nil,   nil,    42,
   nil,   nil,    42,    42,   nil,   nil,   nil,    42,    42,    42,
    42,    42,   nil,   nil,   nil,    42,    42,    42,    42,    42,
   126,   126,   126,    65,   nil,   nil,   126,    65,   nil,   126,
   nil,   126,   nil,    65,    65,    65,   nil,   nil,   nil,   nil,
    65,   126,    65,    65,   126,   126,   nil,   nil,   nil,   126,
   126,   126,   126,   126,   nil,   nil,   nil,   126,   126,   126,
   126,   126,   120,   120,   120,    15,   nil,   nil,   120,    15,
   nil,   120,   nil,   120,   nil,    15,    15,    15,   nil,   nil,
   nil,   nil,    15,   120,    15,    15,   120,   120,   nil,   nil,
   nil,   120,   120,   120,   120,   120,   nil,   nil,   nil,   120,
   120,   120,   120,   120,   119,   119,   119,    10,   nil,   nil,
   119,    10,   nil,   119,   nil,   119,   nil,    10,    10,    10,
   nil,   nil,   nil,   nil,    10,   119,    10,    10,   119,   119,
    50,   nil,    50,   119,   119,   119,   119,   119,   nil,   nil,
   nil,   119,   119,   119,   119,   119,   nil,   nil,   nil,   nil,
   nil,    50,   nil,   nil,    50,    50,   nil,   nil,   nil,    50,
    50,    50,    50,    50,   nil,   nil,   nil,    50,    50,    50,
    50,    50,    51,    51,    51,    98,   nil,   nil,    51,    98,
   nil,    51,   nil,    51,   nil,    98,    98,    98,   nil,   nil,
   nil,   nil,    98,    51,    98,    98,    51,    51,   nil,   nil,
   nil,    51,    51,    51,    51,    51,   nil,   nil,   nil,    51,
    51,    51,    51,    51,   115,   115,   115,    20,   nil,   nil,
   115,    20,    20,   115,   nil,   115,   nil,   nil,   nil,   nil,
    20,   nil,    20,    20,   nil,   115,   nil,   nil,   115,   115,
   167,   nil,   167,   115,   115,   115,   115,   115,   nil,   nil,
   nil,   115,   115,   115,   115,   115,   nil,   nil,   nil,   nil,
   nil,   167,   nil,   nil,   167,   167,   nil,   nil,   nil,   167,
   167,   167,   167,   167,   nil,   nil,   nil,   167,   167,   167,
   167,   167,   105,   105,   105,   nil,   nil,   nil,   105,   nil,
   nil,   105,   nil,   105,   nil,   nil,   103,   103,   103,   103,
   103,   103,   nil,   105,   103,   103,   105,   105,    93,   nil,
    93,   105,   105,   105,   105,   105,   nil,   nil,   nil,   105,
   105,   105,   105,   105,   nil,   nil,   nil,   nil,   nil,    93,
   nil,   nil,    93,    93,    91,   nil,    91,    93,    93,    93,
    93,    93,   nil,   nil,   nil,    93,    93,    93,    93,    93,
   nil,   nil,   nil,   nil,   nil,    91,   nil,   nil,    91,    91,
    92,   nil,    92,    91,    91,    91,    91,    91,   nil,   nil,
   nil,    91,    91,    91,    91,    91,   nil,   nil,   nil,   nil,
   nil,    92,   nil,   nil,    92,    92,    61,   nil,    61,    92,
    92,    92,    92,    92,   nil,   nil,   nil,    92,    92,    92,
    92,    92,   nil,   nil,   nil,   nil,   nil,    61,   nil,   nil,
    61,    61,    62,   nil,    62,    61,    61,    61,    61,    61,
   nil,   nil,   nil,    61,    61,    61,    61,    61,   nil,   nil,
   nil,   nil,   nil,    62,   nil,   nil,    62,    62,   nil,   nil,
   nil,    62,    62,    62,    62,    62,   nil,   nil,   nil,    62,
    62,    62,    62,    62,   170,   170,   170,   nil,   nil,   nil,
   170,   nil,   nil,   170,   nil,   170,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   170,   nil,   nil,   170,   170,
   nil,   nil,   nil,   170,   170,   170,   170,   170,   nil,   nil,
   nil,   170,   170,   170,   170,   170,    80,    80,    80,   nil,
   nil,   nil,    80,   nil,   nil,    80,   nil,    80,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    80,   nil,   nil,
    80,    80,    79,   nil,    79,    80,    80,    80,    80,    80,
   nil,   nil,   nil,    80,    80,    80,    80,    80,   nil,   nil,
   nil,   nil,   nil,    79,   nil,   nil,   nil,    79,   nil,   nil,
   nil,    79,    79,    79,    79,    79,   nil,   nil,   nil,    79,
    79,    79,    79,    79,   185,   185,   185,   nil,   nil,   nil,
   185,   nil,   nil,   185,   nil,   185,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   185,   nil,   nil,   185,   185,
    89,   nil,    89,   185,   185,   185,   185,   185,   nil,   nil,
   nil,   185,   185,   185,   185,   185,   nil,   nil,   nil,   nil,
   nil,    89,   nil,   nil,    89,    89,    70,   nil,    70,    89,
    89,    89,    89,    89,   nil,   nil,   nil,    89,    89,    89,
    89,    89,   nil,   nil,   nil,   nil,   nil,    70,   nil,   nil,
    70,    70,    71,   nil,    71,    70,    70,    70,    70,    70,
   nil,   nil,   nil,    70,    70,    70,    70,    70,   nil,   nil,
   nil,   nil,   nil,    71,   nil,   nil,    71,    71,    72,   nil,
    72,    71,    71,    71,    71,    71,   nil,   nil,   nil,    71,
    71,    71,    71,    71,   nil,   nil,   nil,   nil,   nil,    72,
   nil,   nil,    72,    72,    96,   nil,    96,    72,    72,    72,
    72,    72,   nil,   nil,   nil,    72,    72,    72,    72,    72,
   nil,   nil,   nil,   nil,   nil,    96,   nil,   nil,    96,    96,
    95,   nil,    95,    96,    96,    96,    96,    96,   nil,   nil,
   nil,    96,    96,    96,    96,    96,   nil,   nil,   nil,   nil,
   nil,    95,   nil,   nil,    95,    95,    94,   nil,    94,    95,
    95,    95,    95,    95,   nil,   nil,   nil,    95,    95,    95,
    95,    95,   nil,   nil,   nil,   nil,   nil,    94,   nil,   nil,
    94,    94,   nil,   nil,   nil,    94,    94,    94,    94,    94,
   nil,   nil,   nil,    94,    94,    94,    94,    94,   100,   100,
   100,   nil,   nil,   nil,   100,   nil,   nil,   100,   nil,   100,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   100,
   nil,   nil,   100,   100,   148,   nil,   nil,   100,   100,   100,
   100,   100,   nil,   nil,   nil,   100,   100,   100,   100,   100,
   nil,   nil,   148,   148,   148,   148,   148,   148,   148,   148,
   148,   148,    47,    47,    47,    47,    47,    47,    47,    47,
    47,    47,   nil,   148 ]

racc_action_pointer = [
    41,   nil,   nil,   270,   nil,   nil,   179,   171,   nil,   nil,
   699,   140,   250,   nil,   203,   657,   nil,   nil,   nil,   nil,
   805,   nil,   151,   nil,    20,   nil,   nil,    92,   129,   nil,
    93,   nil,   nil,   125,    53,   nil,   108,   nil,   143,   nil,
   539,   127,   591,   215,   nil,   nil,   nil,  1440,   nil,    58,
   743,   785,   nil,    10,   nil,   205,   nil,   216,   -26,   185,
   409,   999,  1025,    -3,   148,   615,    65,   nil,     3,   nil,
  1229,  1255,  1281,   241,   nil,   214,    11,   263,    -5,  1135,
  1109,   262,   278,     7,   497,   nil,   475,   229,   109,  1203,
   565,   947,   973,   921,  1359,  1333,  1307,   nil,   767,   521,
  1401,   nil,   264,   894,   234,   895,   215,    83,   nil,   nil,
   nil,   nil,   nil,   166,   158,   827,   nil,   nil,   nil,   717,
   675,   nil,   nil,   nil,    26,   nil,   633,   nil,   nil,   200,
   nil,   164,     7,   156,    40,   108,    32,   134,   196,   198,
    50,    42,   218,   260,     8,   156,   nil,     2,  1430,   114,
   nil,    13,    22,    27,    41,    87,    99,   453,   427,   385,
   359,   333,   307,   281,   255,   161,   135,   853,   nil,   nil,
  1067,   nil,   193,   120,    30,   184,   214,   228,   250,   160,
   248,   nil,   nil,    78,     6,  1177,   295 ]

racc_action_default = [
    -3,   -94,   -87,    -6,   -95,    -7,  -106,  -106,    -8,  -102,
   -72,   -70,   -29,    -9,  -106,  -106,   -71,   -31,   -10,   -81,
  -106,   -34,  -106,   -11,  -106,   -82,   -77,   -52,  -106,   -91,
  -106,   -87,   -55,  -106,  -106,   -83,   -61,   -59,  -106,    -1,
   -98,   -62,  -106,    -4,  -105,   -93,   -65,   -37,    -5,   -67,
  -106,   -98,   -96,  -106,   -24,  -106,  -103,   -73,  -106,  -106,
  -106,  -106,  -106,  -106,   -74,  -106,  -106,   -84,  -106,   -85,
  -106,  -106,  -106,  -106,   -86,   -80,  -106,  -106,    -3,  -106,
  -106,  -106,   -99,  -100,  -106,   -60,  -106,  -106,  -106,  -106,
  -106,  -106,  -106,  -106,  -106,  -106,  -106,   -66,  -106,  -106,
  -106,   -88,   -30,   -37,  -100,  -106,  -106,  -106,   -78,   -79,
   -32,   -33,  -104,   -75,   -76,  -106,   -57,   -58,   -56,  -106,
  -106,   187,    -2,   -63,  -106,   -97,  -106,   -92,   -64,   -12,
   -13,  -106,   -35,   -36,   -38,   -39,   -40,   -41,   -50,   -51,
   -53,   -54,   -68,   -69,  -106,    -7,   -18,  -106,   -37,   -23,
   -25,   -26,   -27,   -20,   -28,  -106,  -101,  -106,  -106,  -106,
  -106,  -106,  -106,  -106,  -106,  -106,  -106,  -106,   -90,   -89,
  -106,   -14,   -15,   -42,   -43,   -46,   -47,   -44,   -45,   -48,
   -49,   -17,   -19,   -16,   -22,  -106,   -21 ]

racc_goto_table = [
    63,    57,    39,   123,   103,   130,    64,   146,   128,    58,
   131,   145,    53,    67,    58,   103,   103,    69,   110,   111,
    49,   140,   141,   108,   109,   150,    83,    68,    97,   102,
   144,   129,    85,    34,    52,   nil,   nil,   104,    76,   nil,
   nil,   132,   133,   134,   135,   136,   137,   138,   139,    75,
   nil,    67,   nil,   nil,   148,   nil,   113,   114,    58,    58,
   116,   117,   118,   nil,    58,    58,   124,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   182,   nil,   171,   nil,   181,   nil,
   122,   131,   nil,   nil,   nil,   nil,   147,   nil,   nil,   142,
   143,   149,   nil,   151,   nil,   nil,   nil,    58,    58,   nil,
   nil,   152,   nil,   nil,   nil,   153,   154,   nil,   nil,   nil,
   nil,   nil,   156,   173,   174,   175,   176,   177,   178,   179,
   180,   183,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   172,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   184,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   186 ]

racc_goto_check = [
     3,    30,     2,    13,    15,    12,    30,    14,    13,    32,
    13,     6,    17,    35,    32,    15,    15,    35,    20,    20,
    28,    22,    22,    33,    33,    18,     3,    17,    29,    19,
    16,    11,    23,     1,    37,   nil,   nil,     3,    17,   nil,
   nil,    15,    15,    15,    15,    15,    15,    15,    15,    28,
   nil,    35,   nil,   nil,    15,   nil,    30,    30,    32,    32,
    23,    23,    23,   nil,    32,    32,     3,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    14,   nil,    12,   nil,     6,   nil,
     2,    13,   nil,   nil,   nil,   nil,     3,   nil,   nil,    30,
    30,     3,   nil,     3,   nil,   nil,   nil,    32,    32,   nil,
   nil,     3,   nil,   nil,   nil,     3,     3,   nil,   nil,   nil,
   nil,   nil,     3,    15,    15,    15,    15,    15,    15,    15,
    15,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     3,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     3 ]

racc_goto_pointer = [
   nil,    33,     2,   -14,   nil,   nil,   -89,   nil,   nil,   nil,
   nil,   -55,   -81,   -76,   -93,   -46,   -70,     5,   -81,   -21,
   -43,   nil,   -74,   -10,   nil,   nil,   nil,   nil,    18,   -21,
    -9,   nil,    -1,   -36,   nil,    -7,   nil,    28,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,    43,    48,     3,     5,     8,    13,    18,
    23,   nil,   nil,    36,   nil,    47,   nil,   nil,    54,    12,
    17,    21,    27,    32,    37,    41,    46,     2,   nil,   nil,
    11,    16,    20,    26,    31,    35,   101,    45,    81,    82 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 51, :_reduce_1,
  3, 51, :_reduce_2,
  0, 52, :_reduce_none,
  1, 52, :_reduce_none,
  1, 52, :_reduce_none,
  1, 53, :_reduce_none,
  1, 53, :_reduce_none,
  1, 53, :_reduce_none,
  1, 53, :_reduce_none,
  1, 53, :_reduce_none,
  1, 53, :_reduce_none,
  3, 60, :_reduce_12,
  1, 61, :_reduce_13,
  3, 61, :_reduce_14,
  3, 62, :_reduce_15,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 66, :_reduce_18,
  3, 66, :_reduce_19,
  4, 54, :_reduce_20,
  8, 57, :_reduce_21,
  6, 57, :_reduce_22,
  4, 58, :_reduce_23,
  1, 67, :_reduce_24,
  3, 67, :_reduce_25,
  3, 68, :_reduce_26,
  4, 59, :_reduce_27,
  4, 59, :_reduce_28,
  1, 55, :_reduce_none,
  3, 55, :_reduce_30,
  1, 69, :_reduce_none,
  3, 69, :_reduce_32,
  3, 69, :_reduce_33,
  1, 70, :_reduce_none,
  3, 70, :_reduce_35,
  3, 70, :_reduce_36,
  1, 71, :_reduce_none,
  3, 71, :_reduce_38,
  3, 71, :_reduce_39,
  3, 71, :_reduce_40,
  3, 71, :_reduce_41,
  5, 71, :_reduce_42,
  5, 71, :_reduce_43,
  5, 71, :_reduce_44,
  5, 71, :_reduce_45,
  5, 71, :_reduce_46,
  5, 71, :_reduce_47,
  5, 71, :_reduce_48,
  5, 71, :_reduce_49,
  3, 56, :_reduce_50,
  3, 56, :_reduce_51,
  1, 65, :_reduce_none,
  3, 65, :_reduce_53,
  3, 65, :_reduce_54,
  1, 72, :_reduce_none,
  3, 72, :_reduce_56,
  3, 72, :_reduce_57,
  3, 72, :_reduce_58,
  1, 73, :_reduce_none,
  2, 73, :_reduce_60,
  1, 74, :_reduce_none,
  1, 74, :_reduce_62,
  3, 75, :_reduce_63,
  3, 75, :_reduce_64,
  1, 63, :_reduce_65,
  3, 63, :_reduce_66,
  0, 79, :_reduce_none,
  2, 79, :_reduce_68,
  2, 79, :_reduce_69,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 81, :_reduce_72,
  2, 81, :_reduce_73,
  2, 81, :_reduce_74,
  3, 81, :_reduce_75,
  3, 81, :_reduce_76,
  1, 80, :_reduce_77,
  3, 80, :_reduce_78,
  3, 80, :_reduce_79,
  2, 83, :_reduce_80,
  1, 83, :_reduce_81,
  1, 83, :_reduce_82,
  1, 84, :_reduce_83,
  2, 84, :_reduce_84,
  2, 84, :_reduce_85,
  2, 82, :_reduce_86,
  0, 78, :_reduce_87,
  2, 78, :_reduce_88,
  3, 86, :_reduce_89,
  3, 86, :_reduce_90,
  1, 77, :_reduce_91,
  3, 77, :_reduce_92,
  1, 77, :_reduce_none,
  1, 77, :_reduce_94,
  1, 77, :_reduce_95,
  2, 77, :_reduce_96,
  3, 87, :_reduce_97,
  0, 88, :_reduce_98,
  1, 88, :_reduce_none,
  1, 89, :_reduce_100,
  3, 89, :_reduce_101,
  1, 85, :_reduce_none,
  1, 85, :_reduce_103,
  3, 85, :_reduce_104,
  1, 85, :_reduce_none ]

racc_reduce_n = 106

racc_shift_n = 187

racc_token_table = {
  false => 0,
  :error => 1,
  :SEMI => 2,
  :WITH => 3,
  :COMMA => 4,
  :COLON_EQUAL => 5,
  :LET => 6,
  :DOLLAR_QNAME => 7,
  :IF => 8,
  :LP => 9,
  :RP => 10,
  :THEN => 11,
  :ELSE => 12,
  :FOR => 13,
  :RETURN => 14,
  :IN => 15,
  :SOME => 16,
  :SATISFIES => 17,
  :EVERY => 18,
  :OR => 19,
  :AND => 20,
  :EXCEPT => 21,
  :EQ => 22,
  :NEQ => 23,
  :LT => 24,
  :GT => 25,
  :LTE => 26,
  :GTE => 27,
  :DOT_DOT => 28,
  :TO => 29,
  :PLUS => 30,
  :MINUS => 31,
  :STAR => 32,
  :DIV => 33,
  :MOD => 34,
  :PIPE => 35,
  :SLASH => 36,
  :SLASH_SLASH => 37,
  :DOT => 38,
  :AT => 39,
  :AXIS_NAME => 40,
  :COLON_COLON => 41,
  :LB => 42,
  :RB => 43,
  :LITERAL => 44,
  :NUMBER => 45,
  :FUNCTION_NAME => 46,
  :QNAME => 47,
  :LC => 48,
  :RC => 49 }

racc_nt_base = 50

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "SEMI",
  "WITH",
  "COMMA",
  "COLON_EQUAL",
  "LET",
  "DOLLAR_QNAME",
  "IF",
  "LP",
  "RP",
  "THEN",
  "ELSE",
  "FOR",
  "RETURN",
  "IN",
  "SOME",
  "SATISFIES",
  "EVERY",
  "OR",
  "AND",
  "EXCEPT",
  "EQ",
  "NEQ",
  "LT",
  "GT",
  "LTE",
  "GTE",
  "DOT_DOT",
  "TO",
  "PLUS",
  "MINUS",
  "STAR",
  "DIV",
  "MOD",
  "PIPE",
  "SLASH",
  "SLASH_SLASH",
  "DOT",
  "AT",
  "AXIS_NAME",
  "COLON_COLON",
  "LB",
  "RB",
  "LITERAL",
  "NUMBER",
  "FUNCTION_NAME",
  "QNAME",
  "LC",
  "RC",
  "$start",
  "statements",
  "statement",
  "expr",
  "let_expr",
  "or_expr",
  "range_expr",
  "if_expr",
  "for_expr",
  "quant_expr",
  "with_expr",
  "expr_set_list",
  "expr_set",
  "path_expr",
  "num_expr",
  "additive_expr",
  "num_list",
  "for_vars",
  "for_var",
  "and_expr",
  "equality_expr",
  "relational_expr",
  "multiplicative_expr",
  "unary_expr",
  "union_expr",
  "union_expr_x",
  "location_path",
  "primary_expr",
  "predicates",
  "segment",
  "relative_location_path",
  "absolute_location_path",
  "axis_name",
  "step",
  "axis",
  "node_test",
  "predicate",
  "list",
  "opt_args",
  "args" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 10)
  def _reduce_1(val, _values, result)
     result = Fabulator::Expr::StatementList.new; result.add_statement(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 11)
  def _reduce_2(val, _values, result)
     result = val[0]; result.add_statement(val[2]) 
    result
  end
.,.,

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 24)
  def _reduce_12(val, _values, result)
     result = Fabulator::Expr::WithExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 26)
  def _reduce_13(val, _values, result)
     result = Fabulator::Expr::StatementList.new; result.add_statement(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 27)
  def _reduce_14(val, _values, result)
     result = val[0]; result.add_statement(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 29)
  def _reduce_15(val, _values, result)
     result = Fabulator::Expr::DataSet.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 16 omitted

# reduce 17 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 36)
  def _reduce_18(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 37)
  def _reduce_19(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 39)
  def _reduce_20(val, _values, result)
     result = Fabulator::Expr::LetExpr.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 41)
  def _reduce_21(val, _values, result)
     result = Fabulator::Expr::IfExpr.new(val[2], val[5], val[7]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 42)
  def _reduce_22(val, _values, result)
     result = Fabulator::Expr::IfExpr.new(val[2], val[5], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 44)
  def _reduce_23(val, _values, result)
     result = Fabulator::Expr::ForExpr.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 46)
  def _reduce_24(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 47)
  def _reduce_25(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 49)
  def _reduce_26(val, _values, result)
     result = Fabulator::Expr::ForVar.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 51)
  def _reduce_27(val, _values, result)
     result = Fabulator::Expr::SomeExpr.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 52)
  def _reduce_28(val, _values, result)
     result = Fabulator::Expr::EveryExpr.new(val[1], val[3]) 
    result
  end
.,.,

# reduce 29 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 55)
  def _reduce_30(val, _values, result)
     result = Fabulator::Expr::OrExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 31 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 58)
  def _reduce_32(val, _values, result)
     result = Fabulator::Expr::AndExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 59)
  def _reduce_33(val, _values, result)
     result = Fabulator::Expr::ExceptExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 34 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 62)
  def _reduce_35(val, _values, result)
     result = Fabulator::Expr::EqExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 63)
  def _reduce_36(val, _values, result)
     result = Fabulator::Expr::NeqExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 37 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 66)
  def _reduce_38(val, _values, result)
     result = Fabulator::Expr::LtExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 67)
  def _reduce_39(val, _values, result)
     result = Fabulator::Expr::LtExpr.new(val[2], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 68)
  def _reduce_40(val, _values, result)
     result = Fabulator::Expr::LteExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 69)
  def _reduce_41(val, _values, result)
     result = Fabulator::Expr::LteExpr.new(val[2], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 70)
  def _reduce_42(val, _values, result)
     result = Fabulator::Expr::Between.new(val[2], val[0], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 71)
  def _reduce_43(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 72)
  def _reduce_44(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 73)
  def _reduce_45(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 74)
  def _reduce_46(val, _values, result)
     result = Fabulator::Expr::Between.new(val[2], val[4], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 75)
  def _reduce_47(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 76)
  def _reduce_48(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 77)
  def _reduce_49(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 79)
  def _reduce_50(val, _values, result)
     result = Fabulator::Expr::RangeExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 80)
  def _reduce_51(val, _values, result)
     result = Fabulator::Expr::RangeExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 52 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 83)
  def _reduce_53(val, _values, result)
     result = Fabulator::Expr::AddExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 84)
  def _reduce_54(val, _values, result)
     result = Fabulator::Expr::SubExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 55 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 87)
  def _reduce_56(val, _values, result)
     result = Fabulator::Expr::MpyExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 88)
  def _reduce_57(val, _values, result)
     result = Fabulator::Expr::DivExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 89)
  def _reduce_58(val, _values, result)
     result = Fabulator::Expr::ModExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 59 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 92)
  def _reduce_60(val, _values, result)
     result = Fabulator::Expr::NegExpr.new(val[1]) 
    result
  end
.,.,

# reduce 61 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 95)
  def _reduce_62(val, _values, result)
     result = Fabulator::Expr::UnionExpr.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 97)
  def _reduce_63(val, _values, result)
     result = [ val[0], val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 98)
  def _reduce_64(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 100)
  def _reduce_65(val, _values, result)
     result = Fabulator::Expr::PathExpr.new(nil, [], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 101)
  def _reduce_66(val, _values, result)
     result = Fabulator::Expr::PathExpr.new(val[0], val[1], val[2]) 
    result
  end
.,.,

# reduce 67 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 104)
  def _reduce_68(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 105)
  def _reduce_69(val, _values, result)
     result = [ Fabulator::Expr::AxisDescendentOrSelf.new ] + val[1] 
    result
  end
.,.,

# reduce 70 omitted

# reduce 71 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 113)
  def _reduce_72(val, _values, result)
     result = Fabulator::Expr::RootContext.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 114)
  def _reduce_73(val, _values, result)
     result = Fabulator::Expr::PathExpr.new(Fabulator::Expr::RootContext.new, [], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 115)
  def _reduce_74(val, _values, result)
     result = [ Fabulator::Expr::RootContext.new, Fabulator::Expr::AxisDescendentOrSelf.new(val[1][0]) ] + val[1][1..val[1].size-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 116)
  def _reduce_75(val, _values, result)
     result = [ Fabulator::Expr::RootContext.new(val[0]) ] + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 117)
  def _reduce_76(val, _values, result)
     result = [ Fabulator::Expr::RootContext.new(val[0]), Fabulator::Expr::AxisDescendentOrSelf.new(val[2][0]) ] + val[2][1..val[2].size-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 119)
  def _reduce_77(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 120)
  def _reduce_78(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 121)
  def _reduce_79(val, _values, result)
     result = val[0] + [ Fabulator::Expr::AxisDescendentOrSelf.new(val[2]) ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 123)
  def _reduce_80(val, _values, result)
     result = val[1].nil? || val[1].empty? ? val[0] : Fabulator::Expr::Predicates.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 124)
  def _reduce_81(val, _values, result)
     result = Fabulator::Expr::CurrentContext.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 125)
  def _reduce_82(val, _values, result)
     result = Fabulator::Expr::AxisParent.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 131)
  def _reduce_83(val, _values, result)
     result = Fabulator::Expr::AxisChild.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 132)
  def _reduce_84(val, _values, result)
     result = Fabulator::Expr::Axis.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 133)
  def _reduce_85(val, _values, result)
     result = Fabulator::Expr::AxisAttribute.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 135)
  def _reduce_86(val, _values, result)
     result = Fabulator::Expr::Axis.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 137)
  def _reduce_87(val, _values, result)
     result = [ ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 138)
  def _reduce_88(val, _values, result)
     result = val[0] + [ val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 140)
  def _reduce_89(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 141)
  def _reduce_90(val, _values, result)
     result = Fabulator::Expr::IndexPredicate.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 145)
  def _reduce_91(val, _values, result)
     result = Fabulator::Expr::Var.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 146)
  def _reduce_92(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 93 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 148)
  def _reduce_94(val, _values, result)
     result = Fabulator::Expr::Literal.new(val[0], [ Fabulator::FAB_NS, 'string' ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 149)
  def _reduce_95(val, _values, result)
     result = Fabulator::Expr::Literal.new(val[0] =~ /\./ ? val[0].to_d.to_r : val[0].to_i.to_r, [ Fabulator::FAB_NS, 'numeric' ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 150)
  def _reduce_96(val, _values, result)
     result = Fabulator::Expr::Function.new(@namespaces, val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 152)
  def _reduce_97(val, _values, result)
     result = Fabulator::Expr::List.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 154)
  def _reduce_98(val, _values, result)
     result = [ ] 
    result
  end
.,.,

# reduce 99 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 157)
  def _reduce_100(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 158)
  def _reduce_101(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

# reduce 102 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 161)
  def _reduce_103(val, _values, result)
     result = val[0].to_s 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 162)
  def _reduce_104(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 105 omitted

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Expr
  end   # module Fabulator
