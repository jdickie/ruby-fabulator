#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Fabulator
  module Expr
    class Parser < Racc::Parser

module_eval(<<'...end xsm_expression_parser.racc/module_eval...', 'xsm_expression_parser.racc', 187)
  require 'fabulator/expr'
  require 'rational'
  require 'bigdecimal'
  require 'bigdecimal/util'

  def parse(t, ctx)
    @source = t
    @curpos = 0
    @context = ctx
    @line = 0
    @col = 0

    @yydebug = true

    @last_token = nil
      
    do_parse
  end

  def on_error(*args)
    raise Fabulator::Expr::ParserError.new("unable to parse '#{args[1]}' near line #{@line + 1}, column #{@col}")
  end


  @@regex = {
    :simple_tokens => %r{\.\.|::|!=|>=|<=|\/\/|:=|\.|@|[*]|\(|\)|\[|\]|\{|\}|\/|\||\+|-|=|>|<|&|,|;},
    :ncname => %r{(?:[a-zA-Z_][-a-zA-Z0-9_.]*)},
    :event_type => %r{(?:processing-instruction|comment|text|node)},
    :axis_name => %r{(?:attribute|child|child-or-self|descendant|descendant-or-self|method|self)},
    :namespace_name => %r{(?:context|global|local|session|universal)},
    :number => %r{(-?\d+(?:\.\d+)?|\.\d+)},
    :literal => %r{((?:"(?:[^\\"]*(?:\\.[^\\"]*)*)")|(?:'(?:[^\\']*(?:\\.[^\\']*)*)'))},
  }

  @@regex[:axis] = %r{(#{@@regex[:ncname]})\s*(?=::)}
  @@regex[:name_colon_star] = %r{(#{@@regex[:ncname]}:\*)}
  @@regex[:qname] = %r{((?:#{@@regex[:ncname]}:)?#{@@regex[:ncname]})}
  @@regex[:dollar_qname] = %r{\$#{@@regex[:qname]}}
  @@regex[:dollar_int] = %r{\$([0-9]+)}
  @@regex[:function_name] = %r{#{@@regex[:qname]}\??\*?\s*(?=\([^:])}

  @@ops = {
    '..' => :DOT_DOT,
    '::' => :COLON_COLON,
    '!=' => :NEQ,
    '>=' => :GTE,
    '<=' => :LTE,
    '//' => :SLASH_SLASH,
    ':=' => :COLON_EQUAL,
    '.'  => :DOT,
    '@'  => :AT,
    '*'  => :STAR,
    '('  => :LP,
    ')'  => :RP,
    '['  => :LB,
    ']'  => :RB,
    '{'  => :LC,
    '}'  => :RC,
    '/'  => :SLASH,
    '|'  => :PIPE,
    '+'  => :PLUS,
    '-'  => :MINUS,
    '='  => :EQ,
    '>'  => :GT,
    '<'  => :LT,
    '&'  => :AMP,
    ','  => :COMMA,
    ';'  => :SEMI
  }

  @@preceding_tokens = { }
  [%{
    @ :: ( 
    and or mod div 
    * 
    / // | + - = != < <= > >=
    == & && ||
  }.split(/\s*/), '[', ',', '$' ].each { |t| @@preceding_tokens[t] = true }

  @@regex[:general] = Regexp.compile(%{^(?:#{@@regex[:function_name]}|#{@@regex[:axis]}|#{@@regex[:name_colon_star]}|#{@@regex[:qname]}|#{@@regex[:literal]}|#{@@regex[:number]}|#{@@regex[:dollar_qname]}|#{@@regex[:dollar_int]}|(#{@@regex[:simple_tokens]}))})

  def next_token  
    @token = nil
    white_space = 0
    new_line = 0
    while @curpos < @source.length && @source[@curpos..@curpos] =~ /\s/ do
      if @source[@curpos..@curpos] =~ /\n/
        new_line = new_line + 1
        @line = @line + 1
        @col = 0
      else
        @col = @col + 1
      end
      @curpos = @curpos + 1
      white_space = white_space + 1
    end

    # skip comments delimited by (:  :)
    # comments can be nested
    # these are XPath 2.0 comments
    #
    if @curpos < @source.length && @source[@curpos..@curpos+1] == '(:'
      comment_depth = 1
      @curpos = @curpos + 2
      @col = @col + 2
      while comment_depth > 0 && @curpos < @source.length
        if @source[@curpos..@curpos+1] == '(:'
          comment_depth = comment_depth + 1
          @curpos = @curpos + 1
          @col = @col + 1
        end
        if @source[@curpos..@curpos+1] == ':)'
          comment_depth = comment_depth - 1
          @curpos = @curpos + 1
          @col = @col + 1
        end
        @curpos = @curpos + 1
        @col = @col + 1
      end
      white_space = white_space + 1
    end

    while @curpos < @source.length && @source[@curpos..@curpos] =~ /\s/ do
      if @source[@curpos..@curpos] =~ /\n/
        new_line = new_line + 1
        @line = @line + 1
        @col = 0
      else
        @col = @col + 1
      end
      @curpos = @curpos + 1
      white_space = white_space + 1
    end
        
    if @curpos >= @source.length
      @last_token = nil
      return [ false, false ]
    end

    #if new_line > 0 || white_space > 0
    #  @token = [ :SP, '' ]
    #end

    if @token.nil? && @last_token && ! @@preceding_tokens[@last_token[1]]
      if @source[@curpos..@curpos] == '*'
        @token = [ :STAR, '*' ]
      else
        if @source[@curpos..@source.length-1] =~ /^(#{@@regex[:ncname]})/
          ncname = $1
          case ncname
            when 'for':
              @token = [ :FOR, 'for' ]
            when 'return':
              @token = [ :RETURN, 'return' ]
            when 'in':
              @token = [ :IN, 'in' ]
            when 'let':
              @token = [ :LET, 'let' ]
            when 'except':
              @token = [ :EXCEPT, 'except' ]
            when 'every':
              @token = [ :EVERY, 'every' ]
            when 'some':
              @token = [ :SOME, 'some' ]
            when 'satisfies':
              @token = [ :SATISFIES, 'satisfies' ]
            when 'if':
              @token = [ :IF, 'if' ]
            when 'then':
              @token = [ :THEN, 'then' ]
            when 'else':
              @token = [ :ELSE, 'else' ]
            when 'to':
              @token = [ :TO, 'to' ]
            when 'and':
              @token = [ :AND, 'and' ]
            when 'or':
              @token = [ :OR, 'or' ]
            when 'mod':
              @token = [ :MOD, 'mod' ]
            when 'div':
              @token = [ :DIV, 'div' ]
            #when '*doh*':
            #  # do nothing
            #  @token = nil
            else
              @token = nil
          end
        end
      end
    end
 
    if @token.nil? && @source[@curpos..@curpos+1] == '..'
      @token = [ :DOT_DOT, '..' ]
    end

    if @token.nil?
      if @curpos >= @source.length
        @token = [false, false]
        return @token
      end

      res = @@regex[:general].match(@source[@curpos..@source.length-1])
      #@source[@curpos..@source.length-1] =~ @@regex[:general]
      #res = [ nil, $1, $2, $3, $4, $5, $6, $7, $8 ]
      if res.nil?
        raise "Failed to parse '#{@source}' at #{@curpos}': #{@source[@curpos..@source.length-1]}"
      else
        if !res[1].nil?
          if res[1] == 'if'
            @token = [ :IF, 'if' ]
          else
            if @source[@curpos+res[1].length .. @curpos+res[1].length + 1] =~ /^(\??\*?)/
              @token = [ :FUNCTION_NAME, res[1]+$1 ]
            else
              @token = [ :FUNCTION_NAME, res[1] ]
            end
          end
        elsif !res[2].nil?
          @token = [ res[2] == 'method' ? :AXIS_METHOD : :AXIS_NAME, res[2] ]
        elsif !res[3].nil?
          @token = [ :NAME_COLON_STAR, res[3] ]
        elsif !res[4].nil?
          qname = res[4]
          case qname
            when 'for':
              @token = [ :FOR, 'for' ]
            when 'return':
              @token = [ :RETURN, 'return' ]
            when 'in':
              @token = [ :IN, 'in' ]
            when 'let':
              @token = [ :LET, 'let' ]
            when 'except':
              @token = [ :EXCEPT, 'except' ]
            when 'every':
              @token = [ :EVERY, 'every' ]
            when 'some':
              @token = [ :SOME, 'some' ]   
            when 'satisfies':
              @token = [ :SATISFIES, 'satisfies' ]
            when 'if':
              @token = [ :IF, 'if' ]
            when 'then':
              @token = [ :THEN, 'then' ]
            when 'else':
              @token = [ :ELSE, 'else' ]
            when 'with':
              @token = [ :WITH, 'with' ]
            else
              @token = [ :QNAME, res[4] ]
          end
        elsif !res[5].nil?
          s = res[5]
          s = s[1..s.length-2]
          @curpos = @curpos + s.length
          @col = @col + s.length
          s.gsub!(/\\n/, "\n")
          @curpos = @curpos - s.length
          @col = @col - s.length
          @token = [ :LITERAL, s ]
          @curpos = @curpos + 2  # the quotes
          @col = @col + 2
        elsif !res[6].nil?
          @token = [ :NUMBER, res[6] ]
        elsif !res[7].nil?
          @curpos = @curpos + 1
          @col = @col + 1
          @token = [ :DOLLAR_QNAME, res[7] ]
        elsif !res[8].nil?
          @curpos = @curpos + 1
          @col = @col + 1
          @token = [ :DOLLAR_QNAME, res[8] ]
        elsif !res[9].nil?
          @token = [ @@ops[res[9]] || res[9], res[9] ]
        else
          raise "Failed to parse '#{@source}' at #{@curpos}: #{@source[@curpos..@source.length-1]}"
        end
      end
    end

    if !@token[1].nil?
      @curpos = @curpos + @token[1].length
      @col = @col + @token[1].length
    end
    @last_token = @token
    return @token
  end
...end xsm_expression_parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    88,    28,    29,    39,    44,   164,   109,    88,    12,    88,
    74,    23,    75,    32,   109,   162,   174,   130,   161,   116,
    28,    29,    39,    44,   108,    35,   163,    12,     3,     5,
    23,   165,    32,    20,    26,    30,    34,    41,   159,     1,
     6,    10,    14,    17,    35,    58,   113,     3,     5,    29,
   104,    44,    20,    26,    30,    34,    41,    88,     1,     6,
    10,    14,    17,   130,   106,   107,    88,   128,    29,    39,
    44,    88,    35,   158,    12,     3,     5,    23,   131,    32,
    20,    26,    30,    34,    41,   109,     1,     6,    10,    14,
    17,    35,    98,    89,     3,     5,    59,    60,   120,    20,
    26,    30,    34,    41,     5,     1,     6,    10,    14,    17,
    29,    39,    44,     5,   104,    62,    12,    14,    17,    23,
   121,    32,    65,    66,    62,   117,    14,    17,   110,    29,
    39,    44,   -17,    35,    88,    12,     3,     5,    23,    82,
    32,    20,    26,    30,    34,    41,    81,     1,     6,    10,
    14,    17,    35,    65,    66,     3,     5,    78,    79,    80,
    20,    26,    30,    34,    41,    77,     1,     6,    10,    14,
    17,    29,    39,    44,     5,    98,    89,    12,    70,    71,
    23,    88,    32,    65,    66,    62,    88,    14,    17,    88,
    29,    39,    44,    88,    35,    88,    12,     3,     5,    23,
   166,    32,    20,    26,    30,    34,    41,   167,     1,     6,
    10,    14,    17,    35,    65,    66,     3,     5,    78,    79,
    80,    20,    26,    30,    34,    41,    88,     1,     6,    10,
    14,    17,    29,    39,    44,    78,    79,    80,    12,    59,
    60,    23,    58,    32,    96,    97,    98,    89,    65,    66,
    69,    29,    58,    44,    58,    35,    65,    66,     3,     5,
    98,    89,    88,    20,    26,    30,    34,    41,    54,     1,
     6,    10,    14,    17,    35,    98,    89,     3,     5,    65,
    66,    52,    20,    26,    30,    34,    41,    50,     1,     6,
    10,    14,    17,    29,    39,    44,    98,    89,    88,    12,
    98,    89,    23,   nil,    32,    98,    89,    98,    89,   nil,
   nil,   nil,    29,    39,    44,   nil,    35,   nil,    12,     3,
     5,    23,   nil,    32,    20,    26,    30,    34,    41,   nil,
     1,     6,    10,    14,    17,    35,   nil,   nil,     3,     5,
   nil,   nil,   nil,    20,    26,    30,    34,    41,   nil,     1,
     6,    10,    14,    17,    29,    39,    44,   nil,   nil,   nil,
    12,   nil,   nil,    23,   nil,    32,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    29,   nil,    44,   nil,    35,   nil,   nil,
     3,     5,   nil,   nil,   nil,    20,    26,    30,    34,    41,
   nil,     1,     6,    10,    14,    17,    35,    29,   nil,    44,
     5,   nil,   nil,   nil,    20,    26,    30,    34,    41,   nil,
     1,     6,    10,    14,    17,   nil,    29,   nil,    44,   nil,
    35,   nil,   nil,     3,     5,   nil,   nil,   nil,    20,    26,
    30,    34,    41,   nil,     1,     6,    10,    14,    17,    35,
   nil,   nil,     3,     5,    29,   nil,    44,    20,    26,    30,
    34,    41,   nil,     1,     6,    10,    14,    17,   nil,   nil,
   nil,   nil,   nil,    29,   nil,    44,   nil,    35,   nil,   nil,
     3,     5,   nil,   nil,   nil,    20,    26,    30,    34,    41,
   nil,     1,     6,    10,    14,    17,    35,   nil,   nil,     3,
     5,   nil,   nil,   nil,    20,    26,    30,    34,    41,   nil,
     1,     6,    10,    14,    17,    29,    39,    44,   nil,   nil,
   nil,    12,   nil,   nil,    23,   nil,    32,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    29,   nil,    44,   nil,    35,   nil,
   nil,     3,     5,   nil,   nil,   nil,    20,    26,    30,    34,
    41,   nil,     1,     6,    10,    14,    17,    35,   nil,   nil,
     3,     5,    29,   nil,    44,    20,    26,    30,    34,    41,
   nil,     1,     6,    10,    14,    17,   nil,   nil,   nil,   nil,
   nil,    29,   nil,    44,   nil,    35,   nil,   nil,     3,     5,
   nil,   nil,   nil,    20,    26,    30,    34,    41,   nil,     1,
     6,    10,    14,    17,    35,   nil,   nil,     3,     5,    29,
   nil,    44,    20,    26,    30,    34,    41,   nil,     1,     6,
    10,    14,    17,   nil,   nil,   nil,   nil,   nil,    29,   nil,
    44,   nil,    35,   nil,   nil,     3,     5,   nil,   nil,   nil,
    20,    26,    30,    34,    41,   nil,     1,     6,    10,    14,
    17,    35,    29,   nil,    44,     5,   nil,   nil,   nil,    20,
    26,    30,    34,    41,   nil,     1,     6,    10,    14,    17,
   nil,    29,    39,    44,   nil,    35,   nil,    12,     3,     5,
    23,   nil,    32,    20,    26,    30,    34,    41,   nil,     1,
     6,    10,    14,    17,    35,   nil,   nil,     3,     5,    29,
   nil,    44,    20,    26,    30,    34,    41,   nil,     1,     6,
    10,    14,    17,   nil,   nil,   nil,   nil,   nil,    29,   nil,
    44,   nil,    35,   nil,   nil,     3,     5,   nil,   nil,   nil,
    20,    26,    30,    34,    41,   nil,     1,     6,    10,    14,
    17,    35,   nil,   nil,     3,     5,    29,   nil,    44,    20,
    26,    30,    34,    41,   nil,     1,     6,    10,    14,    17,
   nil,   nil,   nil,   nil,   nil,    29,   nil,    44,   nil,    35,
   nil,   nil,   nil,     5,   nil,   nil,   nil,    20,    26,    30,
    34,    41,   nil,     1,     6,    10,    14,    17,    35,   nil,
   nil,     3,     5,    29,   nil,    44,    20,    26,    30,    34,
    41,   nil,     1,     6,    10,    14,    17,   nil,   nil,   nil,
   nil,   nil,    29,    39,    44,   nil,    35,   nil,    12,     3,
     5,    23,   nil,    32,    20,    26,    30,    34,    41,   nil,
     1,     6,    10,    14,    17,    35,   nil,   nil,     3,     5,
   nil,   nil,   nil,    20,    26,    30,    34,    41,   nil,     1,
     6,    10,    14,    17,    29,    39,    44,   nil,   nil,   nil,
    12,   nil,   nil,    23,   nil,    32,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    29,    39,    44,   nil,    35,   nil,    12,
     3,     5,    23,   nil,    32,    20,    26,    30,    34,    41,
   nil,     1,     6,    10,    14,    17,    35,   nil,   nil,     3,
     5,    29,   nil,    44,    20,    26,    30,    34,    41,   nil,
     1,     6,    10,    14,    17,   nil,   nil,   nil,   nil,   nil,
    29,   nil,    44,   nil,    35,   nil,   nil,     3,     5,   nil,
   nil,   nil,    20,    26,    30,    34,    41,   nil,     1,     6,
    10,    14,    17,    35,   nil,   nil,     3,     5,    29,   nil,
    44,    20,    26,    30,    34,    41,   nil,     1,     6,    10,
    14,    17,   nil,   nil,   nil,   nil,   nil,    29,   nil,    44,
   nil,    35,   nil,   nil,     3,     5,   nil,   nil,   nil,    20,
    26,    30,    34,    41,   nil,     1,     6,    10,    14,    17,
    35,   nil,   nil,   nil,     5,   nil,   nil,   nil,    20,    26,
    30,    34,    41,   nil,     1,     6,    10,    14,    17,    29,
    39,    44,    35,   nil,   nil,    12,     5,   nil,    23,   nil,
    32,   nil,    30,    34,    41,   nil,    85,    62,   nil,    14,
    17,   nil,    35,   -16,   nil,     3,     5,   nil,   nil,   nil,
    20,    26,    30,    34,    41,   nil,     1,     6,    10,    14,
    17,    90,    91,   nil,   -16,    92,    93,    94,    95,    96,
    97,    98,    89,    35,   nil,   nil,   nil,     5,   nil,   nil,
   nil,   nil,    35,    30,    34,    41,     5,   nil,    62,   nil,
    14,    17,    30,    34,    41,   nil,   nil,    62,    35,    14,
    17,   nil,     5,   nil,   nil,   nil,   nil,    35,    30,    34,
    41,     5,   nil,    62,   nil,    14,    17,    30,    34,    41,
   nil,   nil,    62,    35,    14,    17,   nil,     5,   nil,   nil,
   nil,   nil,    35,    30,    34,    41,     5,   nil,    62,   nil,
    14,    17,    30,    34,    41,   nil,   nil,    62,    35,    14,
    17,   nil,     5,   nil,   nil,   nil,   nil,   nil,    30,    34,
    41,   nil,   nil,    62,   nil,    14,    17,    90,    91,   nil,
   nil,    92,    93,    94,    95,    96,    97,    98,    89,    90,
    91,   nil,   nil,    92,    93,    94,    95,   nil,   nil,    98,
    89 ]

racc_action_check = [
    61,     0,     0,     0,     0,   145,    67,   173,     0,   148,
    33,     0,    33,     0,    56,   134,   173,   129,   132,    67,
    75,    75,    75,    75,    56,     0,   145,    75,     0,     0,
    75,   148,    75,     0,     0,     0,     0,     0,   129,     0,
     0,     0,     0,     0,    75,   109,    61,    75,    75,    94,
    55,    94,    75,    75,    75,    75,    75,   102,    75,    75,
    75,    75,    75,    86,    55,    55,   127,    84,   120,   120,
   120,    87,    94,   127,   120,    94,    94,   120,    87,   120,
    94,    94,    94,    94,    94,    73,    94,    94,    94,    94,
    94,   120,   139,   139,   120,   120,   100,   100,    73,   120,
   120,   120,   120,   120,    34,   120,   120,   120,   120,   120,
   166,   166,   166,    64,    83,    34,   166,    34,    34,   166,
    74,   166,   151,   151,    64,    69,    64,    64,    58,   117,
   117,   117,   146,   166,    45,   117,   166,   166,   117,    41,
   117,   166,   166,   166,   166,   166,    39,   166,   166,   166,
   166,   166,   117,   150,   150,   117,   117,   135,   135,   135,
   117,   117,   117,   117,   117,    37,   117,   117,   117,   117,
   117,    17,    17,    17,    31,   140,   140,    17,    31,    31,
    17,   152,    17,    21,    21,    31,   154,    31,    31,   155,
   116,   116,   116,   156,    17,   157,   116,    17,    17,   116,
   158,   116,    17,    17,    17,    17,    17,   159,    17,    17,
    17,    17,    17,   116,    63,    63,   116,   116,   144,   144,
   144,   116,   116,   116,   116,   116,   160,   116,   116,   116,
   116,   116,   110,   110,   110,    38,    38,    38,   110,    15,
    15,   110,    32,   110,   172,   172,   172,   172,   118,   118,
    28,   164,    23,   164,    12,   110,   119,   119,   110,   110,
   141,   141,   169,   110,   110,   110,   110,   110,    10,   110,
   110,   110,   110,   110,   164,   142,   142,   164,   164,    68,
    68,     4,   164,   164,   164,   164,   164,     2,   164,   164,
   164,   164,   164,   108,   108,   108,   143,   143,   175,   108,
   137,   137,   108,   nil,   108,   136,   136,   138,   138,   nil,
   nil,   nil,   162,   162,   162,   nil,   108,   nil,   162,   108,
   108,   162,   nil,   162,   108,   108,   108,   108,   108,   nil,
   108,   108,   108,   108,   108,   162,   nil,   nil,   162,   162,
   nil,   nil,   nil,   162,   162,   162,   162,   162,   nil,   162,
   162,   162,   162,   162,   104,   104,   104,   nil,   nil,   nil,
   104,   nil,   nil,   104,   nil,   104,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   161,   nil,   161,   nil,   104,   nil,   nil,
   104,   104,   nil,   nil,   nil,   104,   104,   104,   104,   104,
   nil,   104,   104,   104,   104,   104,   161,    98,   nil,    98,
   161,   nil,   nil,   nil,   161,   161,   161,   161,   161,   nil,
   161,   161,   161,   161,   161,   nil,    97,   nil,    97,   nil,
    98,   nil,   nil,    98,    98,   nil,   nil,   nil,    98,    98,
    98,    98,    98,   nil,    98,    98,    98,    98,    98,    97,
   nil,   nil,    97,    97,    96,   nil,    96,    97,    97,    97,
    97,    97,   nil,    97,    97,    97,    97,    97,   nil,   nil,
   nil,   nil,   nil,    95,   nil,    95,   nil,    96,   nil,   nil,
    96,    96,   nil,   nil,   nil,    96,    96,    96,    96,    96,
   nil,    96,    96,    96,    96,    96,    95,   nil,   nil,    95,
    95,   nil,   nil,   nil,    95,    95,    95,    95,    95,   nil,
    95,    95,    95,    95,    95,   130,   130,   130,   nil,   nil,
   nil,   130,   nil,   nil,   130,   nil,   130,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    93,   nil,    93,   nil,   130,   nil,
   nil,   130,   130,   nil,   nil,   nil,   130,   130,   130,   130,
   130,   nil,   130,   130,   130,   130,   130,    93,   nil,   nil,
    93,    93,     3,   nil,     3,    93,    93,    93,    93,    93,
   nil,    93,    93,    93,    93,    93,   nil,   nil,   nil,   nil,
   nil,    92,   nil,    92,   nil,     3,   nil,   nil,     3,     3,
   nil,   nil,   nil,     3,     3,     3,     3,     3,   nil,     3,
     3,     3,     3,     3,    92,   nil,   nil,    92,    92,    91,
   nil,    91,    92,    92,    92,    92,    92,   nil,    92,    92,
    92,    92,    92,   nil,   nil,   nil,   nil,   nil,    50,   nil,
    50,   nil,    91,   nil,   nil,    91,    91,   nil,   nil,   nil,
    91,    91,    91,    91,    91,   nil,    91,    91,    91,    91,
    91,    50,    52,   nil,    52,    50,   nil,   nil,   nil,    50,
    50,    50,    50,    50,   nil,    50,    50,    50,    50,    50,
   nil,    54,    54,    54,   nil,    52,   nil,    54,    52,    52,
    54,   nil,    54,    52,    52,    52,    52,    52,   nil,    52,
    52,    52,    52,    52,    54,   nil,   nil,    54,    54,    90,
   nil,    90,    54,    54,    54,    54,    54,   nil,    54,    54,
    54,    54,    54,   nil,   nil,   nil,   nil,   nil,    89,   nil,
    89,   nil,    90,   nil,   nil,    90,    90,   nil,   nil,   nil,
    90,    90,    90,    90,    90,   nil,    90,    90,    90,    90,
    90,    89,   nil,   nil,    89,    89,    88,   nil,    88,    89,
    89,    89,    89,    89,   nil,    89,    89,    89,    89,    89,
   nil,   nil,   nil,   nil,   nil,    59,   nil,    59,   nil,    88,
   nil,   nil,   nil,    88,   nil,   nil,   nil,    88,    88,    88,
    88,    88,   nil,    88,    88,    88,    88,    88,    59,   nil,
   nil,    59,    59,    60,   nil,    60,    59,    59,    59,    59,
    59,   nil,    59,    59,    59,    59,    59,   nil,   nil,   nil,
   nil,   nil,   174,   174,   174,   nil,    60,   nil,   174,    60,
    60,   174,   nil,   174,    60,    60,    60,    60,    60,   nil,
    60,    60,    60,    60,    60,   174,   nil,   nil,   174,   174,
   nil,   nil,   nil,   174,   174,   174,   174,   174,   nil,   174,
   174,   174,   174,   174,    85,    85,    85,   nil,   nil,   nil,
    85,   nil,   nil,    85,   nil,    85,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    81,    81,    81,   nil,    85,   nil,    81,
    85,    85,    81,   nil,    81,    85,    85,    85,    85,    85,
   nil,    85,    85,    85,    85,    85,    81,   nil,   nil,    81,
    81,    80,   nil,    80,    81,    81,    81,    81,    81,   nil,
    81,    81,    81,    81,    81,   nil,   nil,   nil,   nil,   nil,
    79,   nil,    79,   nil,    80,   nil,   nil,    80,    80,   nil,
   nil,   nil,    80,    80,    80,    80,    80,   nil,    80,    80,
    80,    80,    80,    79,   nil,   nil,    79,    79,    78,   nil,
    78,    79,    79,    79,    79,    79,   nil,    79,    79,    79,
    79,    79,   nil,   nil,   nil,   nil,   nil,    77,   nil,    77,
   nil,    78,   nil,   nil,    78,    78,   nil,   nil,   nil,    78,
    78,    78,    78,    78,   nil,    78,    78,    78,    78,    78,
    77,   nil,   nil,   nil,    77,   nil,   nil,   nil,    77,    77,
    77,    77,    77,   nil,    77,    77,    77,    77,    77,    44,
    44,    44,    66,   nil,   nil,    44,    66,   nil,    44,   nil,
    44,   nil,    66,    66,    66,   nil,    44,    66,   nil,    66,
    66,   nil,    44,   149,   nil,    44,    44,   nil,   nil,   nil,
    44,    44,    44,    44,    44,   nil,    44,    44,    44,    44,
    44,   149,   149,   nil,   149,   149,   149,   149,   149,   149,
   149,   149,   149,   106,   nil,   nil,   nil,   106,   nil,   nil,
   nil,   nil,    70,   106,   106,   106,    70,   nil,   106,   nil,
   106,   106,    70,    70,    70,   nil,   nil,    70,    26,    70,
    70,   nil,    26,   nil,   nil,   nil,   nil,    65,    26,    26,
    26,    65,   nil,    26,   nil,    26,    26,    65,    65,    65,
   nil,   nil,    65,    71,    65,    65,   nil,    71,   nil,   nil,
   nil,   nil,    20,    71,    71,    71,    20,   nil,    71,   nil,
    71,    71,    20,    20,    20,   nil,   nil,    20,   107,    20,
    20,   nil,   107,   nil,   nil,   nil,   nil,   nil,   107,   107,
   107,   nil,   nil,   107,   nil,   107,   107,    48,    48,   nil,
   nil,    48,    48,    48,    48,    48,    48,    48,    48,   101,
   101,   nil,   nil,   101,   101,   101,   101,   nil,   nil,   101,
   101 ]

racc_action_pointer = [
    -5,   nil,   250,   545,   262,   nil,   nil,   nil,   nil,   nil,
   259,   nil,   247,   nil,   nil,   219,   nil,   164,   nil,   nil,
  1082,   145,   nil,   245,   nil,   nil,  1048,   nil,   243,   nil,
   nil,   140,   235,    10,    70,   nil,   nil,   128,   201,   137,
   nil,    96,   nil,   nil,   992,   131,   nil,   nil,  1125,   nil,
   611,   nil,   635,   nil,   654,    26,    10,   nil,   113,   748,
   776,    -3,   nil,   176,    79,  1057,   972,     2,   241,   120,
  1032,  1073,   nil,    81,   120,    14,   nil,   950,   931,   903,
   884,   856,   nil,    90,    57,   837,    59,    68,   729,   701,
   682,   592,   564,   517,    42,   456,   437,   409,   390,   nil,
    76,  1137,    54,   nil,   347,   nil,  1023,  1098,   286,    38,
   225,   nil,   nil,   nil,   nil,   nil,   183,   122,   210,   218,
    61,   nil,   nil,   nil,   nil,   nil,   nil,    63,   nil,    13,
   498,   nil,    14,   nil,    10,   123,   273,   268,   275,    60,
   143,   228,   243,   264,   184,     1,   128,   nil,     6,  1019,
   115,    84,   178,   nil,   183,   186,   190,   192,   189,   197,
   223,   366,   305,   nil,   244,   nil,   103,   nil,   nil,   259,
   nil,   nil,   214,     4,   795,   295 ]

racc_action_default = [
    -3,   -88,   -55,  -100,    -6,   -99,   -89,   -86,   -58,    -7,
  -100,   -80,  -100,    -8,   -96,   -29,    -9,  -100,   -31,   -10,
   -65,   -63,   -34,  -100,   -11,   -87,  -100,   -64,  -100,   -84,
   -74,  -100,  -100,  -100,  -100,   -75,   -70,   -54,   -45,  -100,
    -1,  -100,   -80,   -48,   -92,    -4,   -76,   -52,   -38,    -5,
  -100,   -53,  -100,   -90,   -92,   -60,  -100,   -24,  -100,  -100,
  -100,  -100,   -97,   -66,  -100,  -100,  -100,  -100,   -67,  -100,
  -100,  -100,   -77,  -100,  -100,    -3,   -78,  -100,  -100,  -100,
  -100,  -100,   -79,   -73,  -100,  -100,   -93,   -94,  -100,  -100,
  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,  -100,   -57,
   -30,   -38,   -94,   -81,  -100,   -59,  -100,  -100,  -100,  -100,
  -100,   -32,   -33,   -98,   -71,   -72,  -100,  -100,   -68,   -69,
  -100,   176,    -2,   -56,   -49,   -50,   -51,  -100,   -91,  -100,
  -100,   -85,   -12,   -13,  -100,   -47,   -35,   -36,   -39,   -40,
   -41,   -42,   -43,   -44,   -46,  -100,    -7,   -18,  -100,   -38,
   -61,   -62,   -23,   -25,   -26,   -27,   -20,   -28,  -100,  -100,
   -95,  -100,  -100,   -83,  -100,   -82,  -100,   -37,   -14,   -15,
   -17,   -19,   -16,   -22,  -100,   -21 ]

racc_goto_table = [
    61,    99,   101,    51,   133,   147,    40,   146,    63,   101,
   101,    64,    56,   135,    68,    72,   100,    64,    76,    55,
   114,   115,   144,    67,   111,   112,   129,    87,   123,   105,
   153,   145,    73,   132,    33,    53,   nil,   102,   nil,   134,
   136,   137,   138,   139,   140,   141,   142,   143,    72,   nil,
    83,   nil,   nil,   nil,   149,   nil,    64,    64,   118,   119,
   nil,    64,    64,   nil,   127,   171,   nil,   170,   102,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   168,   124,   125,
   126,   122,   nil,   nil,   nil,   nil,   nil,   148,   nil,   nil,
   nil,   152,   nil,   154,   150,   151,   nil,    64,    64,   155,
   156,   nil,   nil,   157,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   134,   160,   172,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   169,   nil,   nil,   nil,   173,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   175 ]

racc_goto_check = [
     3,    13,    15,    25,    12,    14,     2,     6,    32,    15,
    15,    34,    17,    24,    32,    37,    19,    34,    37,    30,
    35,    35,    24,    17,    20,    20,    23,     3,    13,    31,
    18,    16,    17,    11,     1,    39,   nil,     3,   nil,    13,
    15,    15,    15,    15,    15,    15,    15,    15,    37,   nil,
    30,   nil,   nil,   nil,    15,   nil,    34,    34,    32,    32,
   nil,    34,    34,   nil,     3,    14,   nil,     6,     3,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,    25,    25,
    25,     2,   nil,   nil,   nil,   nil,   nil,     3,   nil,   nil,
   nil,     3,   nil,     3,    32,    32,   nil,    34,    34,     3,
     3,   nil,   nil,     3,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    13,     3,    15,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     3,   nil,   nil,   nil,     3,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3 ]

racc_goto_pointer = [
   nil,    34,     6,   -17,   nil,   nil,   -97,   nil,   nil,   nil,
   nil,   -55,   -84,   -49,   -99,   -50,   -73,     0,   -79,   -36,
   -35,   nil,   nil,   -59,   -76,     0,   nil,   nil,   nil,   nil,
     8,   -26,   -12,   nil,    -9,   -45,   nil,   -16,   nil,    25,
   nil ]

racc_goto_default = [
   nil,   nil,   nil,    45,    49,     4,     9,    13,    16,    19,
    24,   nil,   nil,    37,   nil,    48,   nil,   nil,    57,    15,
    18,    22,    25,    86,    38,    43,    47,     2,     8,    11,
   nil,   nil,    21,    27,    31,    36,    42,    46,   103,     7,
    84 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 51, :_reduce_1,
  3, 51, :_reduce_2,
  0, 52, :_reduce_none,
  1, 52, :_reduce_none,
  1, 52, :_reduce_none,
  1, 53, :_reduce_none,
  1, 53, :_reduce_none,
  1, 53, :_reduce_none,
  1, 53, :_reduce_none,
  1, 53, :_reduce_none,
  1, 53, :_reduce_none,
  3, 60, :_reduce_12,
  1, 61, :_reduce_13,
  3, 61, :_reduce_14,
  3, 62, :_reduce_15,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 66, :_reduce_18,
  3, 66, :_reduce_19,
  4, 54, :_reduce_20,
  8, 57, :_reduce_21,
  6, 57, :_reduce_22,
  4, 58, :_reduce_23,
  1, 67, :_reduce_24,
  3, 67, :_reduce_25,
  3, 68, :_reduce_26,
  4, 59, :_reduce_27,
  4, 59, :_reduce_28,
  1, 55, :_reduce_none,
  3, 55, :_reduce_30,
  1, 69, :_reduce_none,
  3, 69, :_reduce_32,
  3, 69, :_reduce_33,
  1, 70, :_reduce_none,
  3, 70, :_reduce_35,
  3, 70, :_reduce_36,
  5, 72, :_reduce_37,
  1, 71, :_reduce_none,
  3, 71, :_reduce_39,
  3, 71, :_reduce_40,
  3, 71, :_reduce_41,
  3, 71, :_reduce_42,
  3, 56, :_reduce_43,
  3, 56, :_reduce_44,
  1, 65, :_reduce_none,
  3, 65, :_reduce_46,
  3, 65, :_reduce_47,
  1, 74, :_reduce_none,
  3, 74, :_reduce_49,
  3, 74, :_reduce_50,
  3, 74, :_reduce_51,
  1, 75, :_reduce_none,
  2, 75, :_reduce_53,
  1, 76, :_reduce_none,
  1, 76, :_reduce_55,
  3, 77, :_reduce_56,
  3, 77, :_reduce_57,
  1, 63, :_reduce_58,
  3, 63, :_reduce_59,
  0, 81, :_reduce_none,
  2, 81, :_reduce_61,
  2, 81, :_reduce_62,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  1, 83, :_reduce_65,
  2, 83, :_reduce_66,
  2, 83, :_reduce_67,
  3, 83, :_reduce_68,
  3, 83, :_reduce_69,
  1, 82, :_reduce_70,
  3, 82, :_reduce_71,
  3, 82, :_reduce_72,
  2, 85, :_reduce_73,
  1, 85, :_reduce_74,
  1, 85, :_reduce_75,
  1, 86, :_reduce_76,
  2, 86, :_reduce_77,
  2, 86, :_reduce_78,
  2, 84, :_reduce_79,
  0, 80, :_reduce_80,
  2, 80, :_reduce_81,
  3, 88, :_reduce_82,
  3, 88, :_reduce_83,
  1, 79, :_reduce_84,
  3, 79, :_reduce_85,
  1, 79, :_reduce_none,
  1, 79, :_reduce_none,
  1, 79, :_reduce_88,
  1, 79, :_reduce_89,
  2, 79, :_reduce_90,
  3, 89, :_reduce_91,
  0, 90, :_reduce_92,
  1, 90, :_reduce_none,
  1, 73, :_reduce_94,
  3, 73, :_reduce_95,
  1, 87, :_reduce_none,
  1, 87, :_reduce_97,
  3, 87, :_reduce_98,
  1, 87, :_reduce_none ]

racc_reduce_n = 100

racc_shift_n = 176

racc_token_table = {
  false => 0,
  :error => 1,
  :SEMI => 2,
  :WITH => 3,
  :COMMA => 4,
  :COLON_EQUAL => 5,
  :LET => 6,
  :DOLLAR_QNAME => 7,
  :IF => 8,
  :LP => 9,
  :RP => 10,
  :THEN => 11,
  :ELSE => 12,
  :FOR => 13,
  :RETURN => 14,
  :IN => 15,
  :SOME => 16,
  :SATISFIES => 17,
  :EVERY => 18,
  :OR => 19,
  :AND => 20,
  :EXCEPT => 21,
  :EQ => 22,
  :NEQ => 23,
  :LB => 24,
  :RB => 25,
  :LT => 26,
  :GT => 27,
  :LTE => 28,
  :GTE => 29,
  :DOT_DOT => 30,
  :TO => 31,
  :PLUS => 32,
  :MINUS => 33,
  :STAR => 34,
  :DIV => 35,
  :MOD => 36,
  :PIPE => 37,
  :SLASH => 38,
  :SLASH_SLASH => 39,
  :DOT => 40,
  :AT => 41,
  :AXIS_NAME => 42,
  :COLON_COLON => 43,
  :LITERAL => 44,
  :NUMBER => 45,
  :FUNCTION_NAME => 46,
  :QNAME => 47,
  :LC => 48,
  :RC => 49 }

racc_nt_base = 50

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "SEMI",
  "WITH",
  "COMMA",
  "COLON_EQUAL",
  "LET",
  "DOLLAR_QNAME",
  "IF",
  "LP",
  "RP",
  "THEN",
  "ELSE",
  "FOR",
  "RETURN",
  "IN",
  "SOME",
  "SATISFIES",
  "EVERY",
  "OR",
  "AND",
  "EXCEPT",
  "EQ",
  "NEQ",
  "LB",
  "RB",
  "LT",
  "GT",
  "LTE",
  "GTE",
  "DOT_DOT",
  "TO",
  "PLUS",
  "MINUS",
  "STAR",
  "DIV",
  "MOD",
  "PIPE",
  "SLASH",
  "SLASH_SLASH",
  "DOT",
  "AT",
  "AXIS_NAME",
  "COLON_COLON",
  "LITERAL",
  "NUMBER",
  "FUNCTION_NAME",
  "QNAME",
  "LC",
  "RC",
  "$start",
  "statements",
  "statement",
  "expr",
  "let_expr",
  "or_expr",
  "range_expr",
  "if_expr",
  "for_expr",
  "quant_expr",
  "with_expr",
  "expr_set_list",
  "expr_set",
  "path_expr",
  "num_expr",
  "additive_expr",
  "num_list",
  "for_vars",
  "for_var",
  "and_expr",
  "equality_expr",
  "relational_expr",
  "tuple",
  "args",
  "multiplicative_expr",
  "unary_expr",
  "union_expr",
  "union_expr_x",
  "location_path",
  "primary_expr",
  "predicates",
  "segment",
  "relative_location_path",
  "absolute_location_path",
  "axis_name",
  "step",
  "axis",
  "node_test",
  "predicate",
  "list",
  "opt_args" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 10)
  def _reduce_1(val, _values, result)
     result = Fabulator::Expr::StatementList.new; result.add_statement(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 11)
  def _reduce_2(val, _values, result)
     result = val[0]; result.add_statement(val[2]) 
    result
  end
.,.,

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 24)
  def _reduce_12(val, _values, result)
     result = Fabulator::Expr::WithExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 26)
  def _reduce_13(val, _values, result)
     result = Fabulator::Expr::StatementList.new; result.add_statement(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 27)
  def _reduce_14(val, _values, result)
     result = val[0]; result.add_statement(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 29)
  def _reduce_15(val, _values, result)
     result = Fabulator::Expr::DataSet.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 16 omitted

# reduce 17 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 36)
  def _reduce_18(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 37)
  def _reduce_19(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 39)
  def _reduce_20(val, _values, result)
     result = Fabulator::Expr::LetExpr.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 41)
  def _reduce_21(val, _values, result)
     result = Fabulator::Expr::IfExpr.new(val[2], val[5], val[7]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 42)
  def _reduce_22(val, _values, result)
     result = Fabulator::Expr::IfExpr.new(val[2], val[5], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 44)
  def _reduce_23(val, _values, result)
     result = Fabulator::Expr::ForExpr.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 46)
  def _reduce_24(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 47)
  def _reduce_25(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 49)
  def _reduce_26(val, _values, result)
     result = Fabulator::Expr::ForVar.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 51)
  def _reduce_27(val, _values, result)
     result = Fabulator::Expr::SomeExpr.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 52)
  def _reduce_28(val, _values, result)
     result = Fabulator::Expr::EveryExpr.new(val[1], val[3]) 
    result
  end
.,.,

# reduce 29 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 55)
  def _reduce_30(val, _values, result)
     result = Fabulator::Expr::OrExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 31 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 58)
  def _reduce_32(val, _values, result)
     result = Fabulator::Expr::AndExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 59)
  def _reduce_33(val, _values, result)
     result = Fabulator::Expr::ExceptExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 34 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 62)
  def _reduce_35(val, _values, result)
     result = Fabulator::Expr::EqExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 63)
  def _reduce_36(val, _values, result)
     result = Fabulator::Expr::NeqExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 65)
  def _reduce_37(val, _values, result)
     result = Fabulator::Expr::Tuple.new(val[2]) 
    result
  end
.,.,

# reduce 38 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 70)
  def _reduce_39(val, _values, result)
     result = Fabulator::Expr::LtExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 71)
  def _reduce_40(val, _values, result)
     result = Fabulator::Expr::LtExpr.new(val[2], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 72)
  def _reduce_41(val, _values, result)
     result = Fabulator::Expr::LteExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 73)
  def _reduce_42(val, _values, result)
     result = Fabulator::Expr::LteExpr.new(val[2], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 84)
  def _reduce_43(val, _values, result)
     result = Fabulator::Expr::RangeExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 85)
  def _reduce_44(val, _values, result)
     result = Fabulator::Expr::RangeExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 45 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 88)
  def _reduce_46(val, _values, result)
     result = Fabulator::Expr::AddExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 89)
  def _reduce_47(val, _values, result)
     result = Fabulator::Expr::SubExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 48 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 92)
  def _reduce_49(val, _values, result)
     result = Fabulator::Expr::MpyExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 93)
  def _reduce_50(val, _values, result)
     result = Fabulator::Expr::DivExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 94)
  def _reduce_51(val, _values, result)
     result = Fabulator::Expr::ModExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 52 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 97)
  def _reduce_53(val, _values, result)
     result = Fabulator::Expr::NegExpr.new(val[1]) 
    result
  end
.,.,

# reduce 54 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 100)
  def _reduce_55(val, _values, result)
     result = Fabulator::Expr::UnionExpr.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 102)
  def _reduce_56(val, _values, result)
     result = [ val[0], val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 103)
  def _reduce_57(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 105)
  def _reduce_58(val, _values, result)
     result = Fabulator::Expr::PathExpr.new(nil, [], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 106)
  def _reduce_59(val, _values, result)
     result = Fabulator::Expr::PathExpr.new(val[0], val[1], val[2]) 
    result
  end
.,.,

# reduce 60 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 109)
  def _reduce_61(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 110)
  def _reduce_62(val, _values, result)
     result = [ Fabulator::Expr::AxisDescendentOrSelf.new ] + val[1] 
    result
  end
.,.,

# reduce 63 omitted

# reduce 64 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 118)
  def _reduce_65(val, _values, result)
     result = Fabulator::Expr::RootContext.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 119)
  def _reduce_66(val, _values, result)
     result = Fabulator::Expr::PathExpr.new(Fabulator::Expr::RootContext.new, [], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 120)
  def _reduce_67(val, _values, result)
     result = [ Fabulator::Expr::RootContext.new, Fabulator::Expr::AxisDescendentOrSelf.new(val[1][0]) ] + val[1][1..val[1].size-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 121)
  def _reduce_68(val, _values, result)
     result = [ Fabulator::Expr::RootContext.new(val[0]) ] + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 122)
  def _reduce_69(val, _values, result)
     result = [ Fabulator::Expr::RootContext.new(val[0]), Fabulator::Expr::AxisDescendentOrSelf.new(val[2][0]) ] + val[2][1..val[2].size-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 124)
  def _reduce_70(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 125)
  def _reduce_71(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 126)
  def _reduce_72(val, _values, result)
     result = val[0] + [ Fabulator::Expr::AxisDescendentOrSelf.new(val[2]) ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 128)
  def _reduce_73(val, _values, result)
     result = val[1].nil? || val[1].empty? ? val[0] : Fabulator::Expr::Predicates.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 129)
  def _reduce_74(val, _values, result)
     result = Fabulator::Expr::CurrentContext.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 130)
  def _reduce_75(val, _values, result)
     result = Fabulator::Expr::AxisParent.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 136)
  def _reduce_76(val, _values, result)
     result = Fabulator::Expr::AxisChild.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 137)
  def _reduce_77(val, _values, result)
     result = Fabulator::Expr::Axis.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 138)
  def _reduce_78(val, _values, result)
     result = Fabulator::Expr::AxisAttribute.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 140)
  def _reduce_79(val, _values, result)
     result = Fabulator::Expr::Axis.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 142)
  def _reduce_80(val, _values, result)
     result = [ ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 143)
  def _reduce_81(val, _values, result)
     result = val[0] + [ val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 145)
  def _reduce_82(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 146)
  def _reduce_83(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 153)
  def _reduce_84(val, _values, result)
     result = Fabulator::Expr::Var.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 154)
  def _reduce_85(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 86 omitted

# reduce 87 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 157)
  def _reduce_88(val, _values, result)
     result = Fabulator::Expr::Literal.new(val[0], [ Fabulator::FAB_NS, 'string' ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 158)
  def _reduce_89(val, _values, result)
     result = Fabulator::Expr::Literal.new(val[0] =~ /\./ ? val[0].to_d.to_r : val[0].to_i.to_r, [ Fabulator::FAB_NS, 'numeric' ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 160)
  def _reduce_90(val, _values, result)
            result = Fabulator::Expr::Function.new(@context, val[0], val[1]) 
#          when 'any' : Fabulator::Expr::AnyExpr.new(@context, val[1])
#          when 'all' : Fabulator::Expr::AllExpr.new(@context, val[1])
#          when 'one' : Fabulator::Expr::OneExpr.new(@context, val[1])
#          when 'none': Fabulator::Expr::NoneExpr.new(@context, val[1])
#          else Fabulator::Expr::Function.new(@context, val[0], val[1]) 
#        end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 169)
  def _reduce_91(val, _values, result)
     result = Fabulator::Expr::List.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 172)
  def _reduce_92(val, _values, result)
     result = [ ] 
    result
  end
.,.,

# reduce 93 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 175)
  def _reduce_94(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 176)
  def _reduce_95(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

# reduce 96 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 179)
  def _reduce_97(val, _values, result)
     result = val[0].to_s 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 180)
  def _reduce_98(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 99 omitted

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Expr
  end   # module Fabulator
