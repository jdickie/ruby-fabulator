#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Fabulator
  module Expr
    class Parser < Racc::Parser

module_eval(<<'...end xsm_expression_parser.racc/module_eval...', 'xsm_expression_parser.racc', 194)
  # == Fabulator Expression Parser
  #
  # <tt>Fabulator::Expr::Parser</tt> provides a parser for Fabulator
  # expressions operating on a DOM-like data model provided by
  # Fabulator::Expr::Context and Fabulator::Expr::Node.
  #
  # The expression language is based on XQuery and XPath.
  #

  require 'fabulator/expr'
  require 'rational'
  require 'bigdecimal'
  require 'bigdecimal/util'

  # Within the context of a Fabulator::Expr::Context object, this will
  # parse the given string and return an object that can be run to return
  # an array if Fabulator::Expr::Node objects.
  #
  # Example:
  #
  #   parser  = Fabulator::Expr::Parser.new
  #   context = Fabulator::Expr::Context.new
  #   expr    = parser.parse('//foo', context)
  #   foos    = expr.run(context)
  #
  # Results in 'foos' being an array of all of the nodes in the
  # context that are named 'foo' regardless of their depth in the
  # node tree.
  def parse(text, context)
    @source = text
    @curpos = 0
    @context = context.merge
    @line = 0
    @col = 0

    @yydebug = true

    @last_token = nil
      
    do_parse
  end

  # Used internally by the parser to raise a Fabulator::Expr::ParserError
  # when the parse fails.
  def on_error(*args)
    raise Fabulator::Expr::ParserError.new("unable to parse '#{args[1]}' near line #{@line + 1}, column #{@col}")
  end


  @@regex = {
    :simple_tokens => %r{\.\.|::|!=|>=|<=|\/\/|:=|\.|@|[*]|\(|\)|\[|\]|\{|\}|\/|\||\+|-|=|>|<|&|,|;},
    :ncname => %r{(?:[a-zA-Z_][-a-zA-Z0-9_.]*)},
    :event_type => %r{(?:processing-instruction|comment|text|node)},
    :axis_name => %r{(?:attribute|child|child-or-self|descendant|descendant-or-self|method|self)},
    :namespace_name => %r{(?:context|global|local|session|universal)},
    :number => %r{(-?\d+(?:\.\d+)?|\.\d+)},
    :literal => %r{((?:"(?:[^\\"]*(?:\\.[^\\"]*)*)")|(?:'(?:[^\\']*(?:\\.[^\\']*)*)'))},
  }

  @@regex[:axis] = %r{(#{@@regex[:ncname]})\s*(?=::)}
  @@regex[:name_colon_star] = %r{(#{@@regex[:ncname]}:\*)}
  @@regex[:qname] = %r{((?:#{@@regex[:ncname]}:)?#{@@regex[:ncname]})}
  @@regex[:xmlns] = %r{((?:xmlns:)#{@@regex[:ncname]})}
  @@regex[:dollar_qname] = %r{\$#{@@regex[:qname]}}
  @@regex[:dollar_int] = %r{\$([0-9]+)}
  @@regex[:function_name] = %r{#{@@regex[:qname]}\??\*?\s*(?=\([^:])}

  @@ops = {
    '..' => :DOT_DOT,
    '::' => :COLON_COLON,
    '!=' => :NEQ,
    '>=' => :GTE,
    '<=' => :LTE,
    '//' => :SLASH_SLASH,
    ':=' => :COLON_EQUAL,
    '.'  => :DOT,
    '@'  => :AT,
    '*'  => :STAR,
    '('  => :LP,
    ')'  => :RP,
    '['  => :LB,
    ']'  => :RB,
    '{'  => :LC,
    '}'  => :RC,
    '/'  => :SLASH,
    '|'  => :PIPE,
    '+'  => :PLUS,
    '-'  => :MINUS,
    '='  => :EQ,
    '>'  => :GT,
    '<'  => :LT,
    '&'  => :AMP,
    ','  => :COMMA,
    ';'  => :SEMI
  }

  @@preceding_tokens = { }
  [%{
    @ :: ( 
    and or mod div 
    * 
    / // | + - = != < <= > >=
    == & && ||
  }.split(/\s*/), '[', ',', '$' ].each { |t| @@preceding_tokens[t] = true }

  @@regex[:general] = Regexp.compile(%{^(?:#{@@regex[:xmlns]}|#{@@regex[:function_name]}|#{@@regex[:axis]}|#{@@regex[:name_colon_star]}|#{@@regex[:qname]}|#{@@regex[:literal]}|#{@@regex[:number]}|#{@@regex[:dollar_qname]}|#{@@regex[:dollar_int]}|(#{@@regex[:simple_tokens]}))})

  def next_token  
    @token = nil
    white_space = 0
    new_line = 0
    while @curpos < @source.length && @source[@curpos..@curpos] =~ /\s/ do
      if @source[@curpos..@curpos] =~ /\n/
        new_line = new_line + 1
        @line = @line + 1
        @col = 0
      else
        @col = @col + 1
      end
      @curpos = @curpos + 1
      white_space = white_space + 1
    end

    # skip comments delimited by (:  :)
    # comments can be nested
    # these are XPath 2.0 comments
    #
    if @curpos < @source.length && @source[@curpos..@curpos+1] == '(:'
      comment_depth = 1
      @curpos = @curpos + 2
      @col = @col + 2
      while comment_depth > 0 && @curpos < @source.length
        if @source[@curpos..@curpos+1] == '(:'
          comment_depth = comment_depth + 1
          @curpos = @curpos + 1
          @col = @col + 1
        end
        if @source[@curpos..@curpos+1] == ':)'
          comment_depth = comment_depth - 1
          @curpos = @curpos + 1
          @col = @col + 1
        end
        @curpos = @curpos + 1
        @col = @col + 1
      end
      white_space = white_space + 1
    end

    while @curpos < @source.length && @source[@curpos..@curpos] =~ /\s/ do
      if @source[@curpos..@curpos] =~ /\n/
        new_line = new_line + 1
        @line = @line + 1
        @col = 0
      else
        @col = @col + 1
      end
      @curpos = @curpos + 1
      white_space = white_space + 1
    end
        
    if @curpos >= @source.length
      @last_token = nil
      return [ false, false ]
    end

    #if new_line > 0 || white_space > 0
    #  @token = [ :SP, '' ]
    #end

    if @token.nil? && @last_token && ! @@preceding_tokens[@last_token[1]]
      if @source[@curpos..@curpos] == '*'
        @token = [ :STAR, '*' ]
      else
        if @source[@curpos..@source.length-1] =~ /^(#{@@regex[:ncname]})/
          ncname = $1
          case ncname
            when 'for':
              @token = [ :FOR, 'for' ]
            when 'return':
              @token = [ :RETURN, 'return' ]
            when 'in':
              @token = [ :IN, 'in' ]
            when 'let':
              @token = [ :LET, 'let' ]
            when 'except':
              @token = [ :EXCEPT, 'except' ]
            when 'every':
              @token = [ :EVERY, 'every' ]
            when 'some':
              @token = [ :SOME, 'some' ]
            when 'satisfies':
              @token = [ :SATISFIES, 'satisfies' ]
            when 'if':
              @token = [ :IF, 'if' ]
            when 'then':
              @token = [ :THEN, 'then' ]
            when 'else':
              @token = [ :ELSE, 'else' ]
            when 'to':
              @token = [ :TO, 'to' ]
            when 'and':
              @token = [ :AND, 'and' ]
            when 'or':
              @token = [ :OR, 'or' ]
            when 'mod':
              @token = [ :MOD, 'mod' ]
            when 'div':
              @token = [ :DIV, 'div' ]
            #when '*doh*':
            #  # do nothing
            #  @token = nil
            else
              @token = nil
          end
        end
      end
    end
 
    if @token.nil? && @source[@curpos..@curpos+1] == '..'
      @token = [ :DOT_DOT, '..' ]
    end

    if @token.nil?
      if @curpos >= @source.length
        @token = [false, false]
        return @token
      end

      res = @@regex[:general].match(@source[@curpos..@source.length-1])
      #@source[@curpos..@source.length-1] =~ @@regex[:general]
      #res = [ nil, $1, $2, $3, $4, $5, $6, $7, $8 ]
      if res.nil?
        raise "Failed to parse '#{@source}' at #{@curpos}': #{@source[@curpos..@source.length-1]}"
      else
        if !res[1].nil?
          @token = [ :XMLNS_COLON_NCNAME, res[1] ]
        elsif !res[2].nil?
          if res[2] == 'if'
            @token = [ :IF, 'if' ]
          else
            if @source[@curpos+res[2].length .. @curpos+res[2].length + 1] =~ /^(\??\*?)/
              @token = [ :FUNCTION_NAME, res[2]+$1 ]
            else
              @token = [ :FUNCTION_NAME, res[2] ]
            end
          end
        elsif !res[3].nil?
          @token = [ res[3] == 'method' ? :AXIS_METHOD : :AXIS_NAME, res[3] ]
        elsif !res[4].nil?
          @token = [ :NAME_COLON_STAR, res[4] ]
        elsif !res[5].nil?
          qname = res[5]
          case qname
            when 'for':
              @token = [ :FOR, 'for' ]
            when 'return':
              @token = [ :RETURN, 'return' ]
            when 'in':
              @token = [ :IN, 'in' ]
            when 'let':
              @token = [ :LET, 'let' ]
            when 'except':
              @token = [ :EXCEPT, 'except' ]
            when 'every':
              @token = [ :EVERY, 'every' ]
            when 'some':
              @token = [ :SOME, 'some' ]   
            when 'satisfies':
              @token = [ :SATISFIES, 'satisfies' ]
            when 'if':
              @token = [ :IF, 'if' ]
            when 'then':
              @token = [ :THEN, 'then' ]
            when 'else':
              @token = [ :ELSE, 'else' ]
            when 'with':
              @token = [ :WITH, 'with' ]
            else
              @token = [ :QNAME, qname ]
          end
        elsif !res[6].nil?
          s = res[6]
          s = s[1..s.length-2]
          @curpos = @curpos + s.length
          @col = @col + s.length
          s.gsub!(/\\n/, "\n")
          @curpos = @curpos - s.length
          @col = @col - s.length
          @token = [ :LITERAL, s ]
          @curpos = @curpos + 2  # the quotes
          @col = @col + 2
        elsif !res[7].nil?
          @token = [ :NUMBER, res[7] ]
        elsif !res[8].nil?
          @curpos = @curpos + 1
          @col = @col + 1
          @token = [ :DOLLAR_QNAME, res[8] ]
        elsif !res[9].nil?
          @curpos = @curpos + 1
          @col = @col + 1
          @token = [ :DOLLAR_QNAME, res[9] ]
        elsif !res[10].nil?
          @token = [ @@ops[res[10]] || res[10], res[10] ]
        else
          raise "Failed to parse '#{@source}' at #{@curpos}: #{@source[@curpos..@source.length-1]}"
        end
      end
    end

    if !@token[1].nil?
      @curpos = @curpos + @token[1].length
      @col = @col + @token[1].length
    end
    @last_token = @token
    return @token
  end
...end xsm_expression_parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
   102,    28,    30,   104,    40,    50,     1,   125,   102,   107,
    22,   167,   107,    34,   125,    43,   125,    66,    57,    58,
    59,    21,   135,   122,   123,    77,   124,    46,   126,   140,
    12,    14,   169,   161,   168,    31,    37,    41,    45,     2,
   102,    10,    15,    19,    24,    28,    30,   128,    40,    50,
     1,   177,    46,    90,    22,    91,    14,    34,   102,    43,
    14,    77,    41,    45,     2,    21,    83,   105,    19,    24,
    83,    46,    19,    24,    12,    14,   -17,    58,    59,    31,
    37,    41,    45,     2,    77,    10,    15,    19,    24,    30,
    97,    40,    77,     1,    79,    80,    60,    61,   101,   -17,
    62,    63,    64,    65,    66,    57,    58,    59,    21,   165,
   102,    98,    99,   100,    46,    58,    59,    12,    14,   164,
    86,    87,    31,    37,    41,    45,     2,   166,    10,    15,
    19,    24,    30,    46,    40,   102,     1,    14,    98,    99,
   100,   136,    46,    41,    45,     2,    14,    83,   132,    19,
    24,    21,    41,    45,     2,   -18,    83,    46,    19,    24,
    12,    14,    98,    99,   100,    31,    37,    41,    45,     2,
   131,    10,    15,    19,    24,    30,    46,    40,   102,     1,
    14,    86,    87,    58,    59,    46,    41,    45,     2,    14,
    83,   103,    19,    24,    21,    41,    45,     2,   102,    83,
    46,    19,    24,    12,    14,    58,    59,   102,    31,    37,
    41,    45,     2,   102,    10,    15,    19,    24,    30,   102,
    40,    50,     1,   102,    46,   170,    22,    70,    14,    34,
    69,    43,    14,    67,    41,    45,     2,    21,    83,   104,
    19,    24,    83,    46,    19,    24,    12,    14,    58,    59,
   102,    31,    37,    41,    45,     2,   127,    10,    15,    19,
    24,    30,    46,    40,   102,     1,    14,    58,    59,    58,
    59,    46,    41,    45,     2,    14,    83,    55,    19,    24,
    21,    41,    45,     2,   102,    83,    46,    19,    24,   nil,
    14,    81,    82,   nil,    31,    37,    41,    45,     2,   nil,
    10,    15,    19,    24,    30,   nil,    40,    50,     1,    14,
    58,    59,    22,    93,    94,    34,   nil,    43,   nil,    83,
   nil,    19,    24,    21,    86,    87,    79,    80,   nil,    46,
    86,    87,    12,    14,    86,    87,   nil,    31,    37,    41,
    45,     2,   nil,    10,    15,    19,    24,    30,   nil,    40,
    50,     1,    86,    87,   nil,    22,    86,    87,    34,   nil,
    43,   nil,   nil,    60,    61,   nil,    21,    62,    63,    64,
    65,   nil,    46,    58,    59,    12,    14,   nil,   nil,   nil,
    31,    37,    41,    45,     2,   nil,    10,    15,    19,    24,
    30,   nil,    40,    50,     1,   nil,   nil,   nil,    22,   nil,
   nil,    34,   nil,    43,   nil,   nil,   nil,   nil,   nil,    21,
   nil,   nil,   nil,   nil,   nil,    46,   nil,   nil,    12,    14,
   nil,   nil,   nil,    31,    37,    41,    45,     2,   nil,    10,
    15,    19,    24,    30,   nil,    40,    50,     1,   nil,   nil,
   nil,    22,   nil,   nil,    34,   nil,    43,   nil,   nil,   nil,
   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,    46,   nil,
   nil,    12,    14,   nil,   nil,   nil,    31,    37,    41,    45,
     2,   nil,    10,    15,    19,    24,    30,   nil,    40,   nil,
     1,    60,    61,   nil,   nil,    62,    63,    64,    65,    66,
    57,    58,    59,   nil,   nil,    21,   nil,   nil,   nil,   nil,
   nil,    46,   nil,   nil,   nil,    14,   nil,   nil,   nil,    31,
    37,    41,    45,     2,   nil,    10,    15,    19,    24,    30,
   nil,    40,    50,     1,   nil,   nil,   nil,    22,   nil,   nil,
    34,   nil,    43,   nil,   nil,   nil,   nil,   nil,    21,   nil,
   nil,   nil,   nil,   nil,    46,   nil,   nil,    12,    14,   nil,
   nil,   nil,    31,    37,    41,    45,     2,   nil,    10,    15,
    19,    24,    30,   nil,    40,    50,     1,   nil,   nil,   nil,
    22,   nil,   nil,    34,   nil,    43,   nil,   nil,   nil,   nil,
   nil,    21,   nil,   nil,   nil,   nil,   nil,    46,   nil,   nil,
    12,    14,   nil,   nil,   nil,    31,    37,    41,    45,     2,
   nil,    10,    15,    19,    24,    30,   nil,    40,    50,     1,
   nil,   nil,   nil,    22,   nil,   nil,    34,   nil,    43,   nil,
   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,
    46,   nil,   nil,    12,    14,   nil,   nil,   nil,    31,    37,
    41,    45,     2,   nil,    10,    15,    19,    24,    30,   nil,
    40,    50,     1,   nil,   nil,   nil,    22,   nil,   nil,    34,
   nil,    43,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,
   nil,   nil,   nil,    46,   nil,   nil,    12,    14,   nil,   nil,
   nil,    31,    37,    41,    45,     2,   nil,    10,    15,    19,
    24,    30,   nil,    40,   nil,     1,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    21,   nil,   nil,   nil,   nil,   nil,    46,   nil,   nil,   nil,
    14,   nil,   nil,   nil,    31,    37,    41,    45,     2,   nil,
    10,    15,    19,    24,    30,   nil,    40,    50,     1,   nil,
   nil,   nil,    22,   nil,   nil,    34,   nil,    43,   nil,   nil,
   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,    46,
   nil,   nil,    12,    14,   nil,   nil,   nil,    31,    37,    41,
    45,     2,   nil,    10,    15,    19,    24,    30,   nil,    40,
    50,     1,   nil,   nil,   nil,    22,   nil,   nil,    34,   nil,
    43,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,
   nil,   nil,    46,   nil,   nil,    12,    14,   nil,   nil,   nil,
    31,    37,    41,    45,     2,   nil,    10,    15,    19,    24,
    30,   nil,    40,   nil,     1,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,
   nil,   nil,   nil,   nil,   nil,    46,   nil,   nil,    12,    14,
   nil,   nil,   nil,    31,    37,    41,    45,     2,   nil,    10,
    15,    19,    24,    30,   nil,    40,   nil,     1,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,    46,   nil,
   nil,    12,    14,   nil,   nil,   nil,    31,    37,    41,    45,
     2,   nil,    10,    15,    19,    24,    30,   nil,    40,   nil,
     1,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,
   nil,    46,   nil,   nil,   nil,    14,   nil,   nil,   nil,    31,
    37,    41,    45,     2,   nil,    10,    15,    19,    24,    30,
   nil,    40,    50,     1,   nil,   nil,   nil,    22,   nil,   nil,
    34,   nil,    43,   nil,   nil,   nil,   nil,   nil,    21,   nil,
   nil,   nil,   nil,   nil,    46,   nil,   nil,    12,    14,   nil,
   nil,   nil,    31,    37,    41,    45,     2,   nil,    10,    15,
    19,    24,    30,   nil,    40,   nil,     1,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    21,   nil,   nil,   nil,   nil,   nil,    46,   nil,   nil,
    12,    14,   nil,   nil,   nil,    31,    37,    41,    45,     2,
   nil,    10,    15,    19,    24,    30,   nil,    40,   nil,     1,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,
    46,   nil,   nil,    12,    14,   nil,   nil,   nil,    31,    37,
    41,    45,     2,   nil,    10,    15,    19,    24,    30,   nil,
    40,    50,     1,   nil,   nil,   nil,    22,   nil,   nil,    34,
   nil,    43,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,
   nil,   nil,   nil,    46,   nil,   nil,    12,    14,   nil,   nil,
   nil,    31,    37,    41,    45,     2,   nil,    10,    15,    19,
    24,    30,   nil,    40,    50,     1,   nil,   nil,   nil,    22,
   nil,   nil,    34,   nil,    43,   nil,   nil,   nil,   nil,   nil,
    21,   nil,   nil,   nil,   nil,   nil,    46,   nil,   nil,    12,
    14,   nil,   nil,   nil,    31,    37,    41,    45,     2,   nil,
    10,    15,    19,    24,    30,   nil,    40,   nil,     1,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,    46,
   nil,   nil,    12,    14,   nil,   nil,   nil,    31,    37,    41,
    45,     2,   nil,    10,    15,    19,    24,    30,   nil,    40,
   nil,     1,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,
   nil,   nil,    46,   nil,   nil,    12,    14,   nil,   nil,   nil,
    31,    37,    41,    45,     2,   nil,    10,    15,    19,    24,
    30,   nil,    40,   nil,     1,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,
   nil,   nil,   nil,   nil,   nil,    46,   nil,   nil,    12,    14,
   nil,   nil,   nil,    31,    37,    41,    45,     2,   nil,    10,
    15,    19,    24,    30,   nil,    40,   nil,     1,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,    46,   nil,
   nil,    12,    14,   nil,   nil,   nil,    31,    37,    41,    45,
     2,   nil,    10,    15,    19,    24,    30,   nil,    40,   nil,
     1,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,
   nil,    46,   nil,   nil,    12,    14,   nil,   nil,   nil,    31,
    37,    41,    45,     2,   nil,    10,    15,    19,    24,    30,
   nil,    40,   nil,     1,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,
   nil,   nil,   nil,   nil,    46,   nil,   nil,    12,    14,   nil,
   nil,   nil,    31,    37,    41,    45,     2,   nil,    10,    15,
    19,    24,    30,   nil,    40,   nil,     1,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    21,   nil,   nil,   nil,   nil,   nil,    46,   nil,   nil,
    12,    14,   nil,   nil,   nil,    31,    37,    41,    45,     2,
   nil,    10,    15,    19,    24,    30,   nil,    40,   nil,     1,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,
    46,   nil,   nil,    12,    14,   nil,   nil,   nil,    31,    37,
    41,    45,     2,   nil,    10,    15,    19,    24,    30,   nil,
    40,   nil,     1,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,
   nil,   nil,   nil,    46,   nil,   nil,    12,    14,   nil,   nil,
   nil,    31,    37,    41,    45,     2,   nil,    10,    15,    19,
    24,    30,   nil,    40,   nil,     1,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    21,   nil,   nil,   nil,   nil,   nil,    46,   nil,   nil,    12,
    14,   nil,   nil,   nil,    31,    37,    41,    45,     2,   nil,
    10,    15,    19,    24,    30,   nil,    40,   nil,     1,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,    46,
   nil,   nil,    12,    14,   nil,   nil,   nil,    31,    37,    41,
    45,     2,   nil,    10,    15,    19,    24,    30,   nil,    40,
    50,     1,   nil,   nil,   nil,    22,   nil,   nil,    34,   nil,
    43,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,
   nil,   nil,    46,   nil,   nil,    12,    14,   nil,   nil,   nil,
    31,    37,    41,    45,     2,   nil,    10,    15,    19,    24 ]

racc_action_check = [
    78,     0,     0,    73,     0,     0,     0,    88,   154,    72,
     0,   152,    56,     0,    95,     0,    75,   174,   174,   174,
   174,     0,    88,    72,    72,   125,    73,     0,    75,    95,
     0,     0,   154,   132,   152,     0,     0,     0,     0,     0,
   176,     0,     0,     0,     0,    91,    91,    78,    91,    91,
    91,   176,    87,    39,    91,    39,    87,    91,    54,    91,
    85,    34,    87,    87,    87,    91,    87,    54,    87,    87,
    85,    91,    85,    85,    91,    91,   151,   116,   116,    91,
    91,    91,    91,    91,    43,    91,    91,    91,    91,   100,
    48,   100,    22,   100,    25,    25,   151,   151,    50,   151,
   151,   151,   151,   151,   151,   151,   151,   151,   100,   146,
   145,    49,    49,    49,   100,   108,   108,   100,   100,   145,
   139,   139,   100,   100,   100,   100,   100,   148,   100,   100,
   100,   100,   167,    37,   167,   149,   167,    37,   110,   110,
   110,    90,    93,    37,    37,    37,    93,    37,    82,    37,
    37,   167,    93,    93,    93,   153,    93,   167,    93,    93,
   167,   167,   109,   109,   109,   167,   167,   167,   167,   167,
    81,   167,   167,   167,   167,    12,    94,    12,    51,    12,
    94,   138,   138,   111,   111,    31,    94,    94,    94,    31,
    94,    52,    94,    94,    12,    31,    31,    31,   158,    31,
    12,    31,    31,    12,    12,   112,   112,   159,    12,    12,
    12,    12,    12,   160,    12,    12,    12,    12,   166,   162,
   166,   166,   166,   163,   123,   164,   166,    15,   123,   166,
    13,   166,    45,    11,   123,   123,   123,   166,   123,    53,
   123,   123,    45,   166,    45,    45,   166,   166,   113,   113,
   172,   166,   166,   166,   166,   166,    77,   166,   166,   166,
   166,   165,    86,   165,    74,   165,    86,   114,   114,   115,
   115,   122,    86,    86,    86,   122,    86,     2,    86,    86,
   165,   122,   122,   122,   178,   122,   165,   122,   122,   nil,
   165,    28,    28,   nil,   165,   165,   165,   165,   165,   nil,
   165,   165,   165,   165,    21,   nil,    21,    21,    21,    42,
   117,   117,    21,    42,    42,    21,   nil,    21,   nil,    42,
   nil,    42,    42,    21,    89,    89,   120,   120,   nil,    21,
    84,    84,    21,    21,   155,   155,   nil,    21,    21,    21,
    21,    21,   nil,    21,    21,    21,    21,   140,   nil,   140,
   140,   140,   156,   156,   nil,   140,    32,    32,   140,   nil,
   140,   nil,   nil,   119,   119,   nil,   140,   119,   119,   119,
   119,   nil,   140,   119,   119,   140,   140,   nil,   nil,   nil,
   140,   140,   140,   140,   140,   nil,   140,   140,   140,   140,
    24,   nil,    24,    24,    24,   nil,   nil,   nil,    24,   nil,
   nil,    24,   nil,    24,   nil,   nil,   nil,   nil,   nil,    24,
   nil,   nil,   nil,   nil,   nil,    24,   nil,   nil,    24,    24,
   nil,   nil,   nil,    24,    24,    24,    24,    24,   nil,    24,
    24,    24,    24,   135,   nil,   135,   135,   135,   nil,   nil,
   nil,   135,   nil,   nil,   135,   nil,   135,   nil,   nil,   nil,
   nil,   nil,   135,   nil,   nil,   nil,   nil,   nil,   135,   nil,
   nil,   135,   135,   nil,   nil,   nil,   135,   135,   135,   135,
   135,   nil,   135,   135,   135,   135,    67,   nil,    67,   nil,
    67,     8,     8,   nil,   nil,     8,     8,     8,     8,     8,
     8,     8,     8,   nil,   nil,    67,   nil,   nil,   nil,   nil,
   nil,    67,   nil,   nil,   nil,    67,   nil,   nil,   nil,    67,
    67,    67,    67,    67,   nil,    67,    67,    67,    67,   127,
   nil,   127,   127,   127,   nil,   nil,   nil,   127,   nil,   nil,
   127,   nil,   127,   nil,   nil,   nil,   nil,   nil,   127,   nil,
   nil,   nil,   nil,   nil,   127,   nil,   nil,   127,   127,   nil,
   nil,   nil,   127,   127,   127,   127,   127,   nil,   127,   127,
   127,   127,   126,   nil,   126,   126,   126,   nil,   nil,   nil,
   126,   nil,   nil,   126,   nil,   126,   nil,   nil,   nil,   nil,
   nil,   126,   nil,   nil,   nil,   nil,   nil,   126,   nil,   nil,
   126,   126,   nil,   nil,   nil,   126,   126,   126,   126,   126,
   nil,   126,   126,   126,   126,   107,   nil,   107,   107,   107,
   nil,   nil,   nil,   107,   nil,   nil,   107,   nil,   107,   nil,
   nil,   nil,   nil,   nil,   107,   nil,   nil,   nil,   nil,   nil,
   107,   nil,   nil,   107,   107,   nil,   nil,   nil,   107,   107,
   107,   107,   107,   nil,   107,   107,   107,   107,   104,   nil,
   104,   104,   104,   nil,   nil,   nil,   104,   nil,   nil,   104,
   nil,   104,   nil,   nil,   nil,   nil,   nil,   104,   nil,   nil,
   nil,   nil,   nil,   104,   nil,   nil,   104,   104,   nil,   nil,
   nil,   104,   104,   104,   104,   104,   nil,   104,   104,   104,
   104,   102,   nil,   102,   nil,   102,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   102,   nil,   nil,   nil,   nil,   nil,   102,   nil,   nil,   nil,
   102,   nil,   nil,   nil,   102,   102,   102,   102,   102,   nil,
   102,   102,   102,   102,   101,   nil,   101,   101,   101,   nil,
   nil,   nil,   101,   nil,   nil,   101,   nil,   101,   nil,   nil,
   nil,   nil,   nil,   101,   nil,   nil,   nil,   nil,   nil,   101,
   nil,   nil,   101,   101,   nil,   nil,   nil,   101,   101,   101,
   101,   101,   nil,   101,   101,   101,   101,   170,   nil,   170,
   170,   170,   nil,   nil,   nil,   170,   nil,   nil,   170,   nil,
   170,   nil,   nil,   nil,   nil,   nil,   170,   nil,   nil,   nil,
   nil,   nil,   170,   nil,   nil,   170,   170,   nil,   nil,   nil,
   170,   170,   170,   170,   170,   nil,   170,   170,   170,   170,
    99,   nil,    99,   nil,    99,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    99,
   nil,   nil,   nil,   nil,   nil,    99,   nil,   nil,    99,    99,
   nil,   nil,   nil,    99,    99,    99,    99,    99,   nil,    99,
    99,    99,    99,    98,   nil,    98,   nil,    98,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    98,   nil,   nil,   nil,   nil,   nil,    98,   nil,
   nil,    98,    98,   nil,   nil,   nil,    98,    98,    98,    98,
    98,   nil,    98,    98,    98,    98,    97,   nil,    97,   nil,
    97,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    97,   nil,   nil,   nil,   nil,
   nil,    97,   nil,   nil,   nil,    97,   nil,   nil,   nil,    97,
    97,    97,    97,    97,   nil,    97,    97,    97,    97,   177,
   nil,   177,   177,   177,   nil,   nil,   nil,   177,   nil,   nil,
   177,   nil,   177,   nil,   nil,   nil,   nil,   nil,   177,   nil,
   nil,   nil,   nil,   nil,   177,   nil,   nil,   177,   177,   nil,
   nil,   nil,   177,   177,   177,   177,   177,   nil,   177,   177,
   177,   177,    80,   nil,    80,   nil,    80,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    80,   nil,   nil,   nil,   nil,   nil,    80,   nil,   nil,
    80,    80,   nil,   nil,   nil,    80,    80,    80,    80,    80,
   nil,    80,    80,    80,    80,    79,   nil,    79,   nil,    79,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    79,   nil,   nil,   nil,   nil,   nil,
    79,   nil,   nil,    79,    79,   nil,   nil,   nil,    79,    79,
    79,    79,    79,   nil,    79,    79,    79,    79,     1,   nil,
     1,     1,     1,   nil,   nil,   nil,     1,   nil,   nil,     1,
   nil,     1,   nil,   nil,   nil,   nil,   nil,     1,   nil,   nil,
   nil,   nil,   nil,     1,   nil,   nil,     1,     1,   nil,   nil,
   nil,     1,     1,     1,     1,     1,   nil,     1,     1,     1,
     1,    70,   nil,    70,    70,    70,   nil,   nil,   nil,    70,
   nil,   nil,    70,   nil,    70,   nil,   nil,   nil,   nil,   nil,
    70,   nil,   nil,   nil,   nil,   nil,    70,   nil,   nil,    70,
    70,   nil,   nil,   nil,    70,    70,    70,    70,    70,   nil,
    70,    70,    70,    70,    69,   nil,    69,   nil,    69,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    69,   nil,   nil,   nil,   nil,   nil,    69,
   nil,   nil,    69,    69,   nil,   nil,   nil,    69,    69,    69,
    69,    69,   nil,    69,    69,    69,    69,    57,   nil,    57,
   nil,    57,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    57,   nil,   nil,   nil,
   nil,   nil,    57,   nil,   nil,    57,    57,   nil,   nil,   nil,
    57,    57,    57,    57,    57,   nil,    57,    57,    57,    57,
    58,   nil,    58,   nil,    58,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    58,
   nil,   nil,   nil,   nil,   nil,    58,   nil,   nil,    58,    58,
   nil,   nil,   nil,    58,    58,    58,    58,    58,   nil,    58,
    58,    58,    58,    59,   nil,    59,   nil,    59,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    59,   nil,   nil,   nil,   nil,   nil,    59,   nil,
   nil,    59,    59,   nil,   nil,   nil,    59,    59,    59,    59,
    59,   nil,    59,    59,    59,    59,    60,   nil,    60,   nil,
    60,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    60,   nil,   nil,   nil,   nil,
   nil,    60,   nil,   nil,    60,    60,   nil,   nil,   nil,    60,
    60,    60,    60,    60,   nil,    60,    60,    60,    60,    61,
   nil,    61,   nil,    61,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    61,   nil,
   nil,   nil,   nil,   nil,    61,   nil,   nil,    61,    61,   nil,
   nil,   nil,    61,    61,    61,    61,    61,   nil,    61,    61,
    61,    61,    62,   nil,    62,   nil,    62,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    62,   nil,   nil,   nil,   nil,   nil,    62,   nil,   nil,
    62,    62,   nil,   nil,   nil,    62,    62,    62,    62,    62,
   nil,    62,    62,    62,    62,    63,   nil,    63,   nil,    63,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    63,   nil,   nil,   nil,   nil,   nil,
    63,   nil,   nil,    63,    63,   nil,   nil,   nil,    63,    63,
    63,    63,    63,   nil,    63,    63,    63,    63,    64,   nil,
    64,   nil,    64,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    64,   nil,   nil,
   nil,   nil,   nil,    64,   nil,   nil,    64,    64,   nil,   nil,
   nil,    64,    64,    64,    64,    64,   nil,    64,    64,    64,
    64,    65,   nil,    65,   nil,    65,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    65,   nil,   nil,   nil,   nil,   nil,    65,   nil,   nil,    65,
    65,   nil,   nil,   nil,    65,    65,    65,    65,    65,   nil,
    65,    65,    65,    65,    66,   nil,    66,   nil,    66,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    66,   nil,   nil,   nil,   nil,   nil,    66,
   nil,   nil,    66,    66,   nil,   nil,   nil,    66,    66,    66,
    66,    66,   nil,    66,    66,    66,    66,   131,   nil,   131,
   131,   131,   nil,   nil,   nil,   131,   nil,   nil,   131,   nil,
   131,   nil,   nil,   nil,   nil,   nil,   131,   nil,   nil,   nil,
   nil,   nil,   131,   nil,   nil,   131,   131,   nil,   nil,   nil,
   131,   131,   131,   131,   131,   nil,   131,   131,   131,   131 ]

racc_action_pointer = [
    -5,  1071,   232,   nil,   nil,   nil,   nil,   nil,   457,   nil,
   nil,   194,   168,   209,   nil,   216,   nil,   nil,   nil,   nil,
   nil,   297,    85,   nil,   383,    72,   nil,   nil,   284,   nil,
   nil,   153,   316,   nil,    54,   nil,   nil,   101,   nil,    53,
   nil,   nil,   273,    77,   nil,   196,   nil,   nil,    51,    75,
    87,   175,   179,   235,    55,   nil,   -14,  1200,  1243,  1286,
  1329,  1372,  1415,  1458,  1501,  1544,  1587,   469,   nil,  1157,
  1114,   nil,   -17,    -1,   261,    12,   nil,   239,    -3,  1028,
   985,   165,   143,   nil,   290,    24,   230,    20,     3,   284,
   141,    39,   nil,   110,   144,    10,   nil,   899,   856,   813,
    82,   727,   684,   nil,   641,   nil,   nil,   598,    81,   126,
   102,   149,   171,   214,   233,   235,    43,   276,   nil,   339,
   304,   nil,   239,   192,   nil,    18,   555,   512,   nil,   nil,
   nil,  1630,    24,   nil,   nil,   426,   nil,   nil,   141,    80,
   340,   nil,   nil,   nil,   nil,   107,   105,   nil,   122,   132,
   nil,    72,     7,   151,     5,   294,   312,   nil,   195,   204,
   210,   nil,   216,   220,   212,   254,   211,   125,   nil,   nil,
   770,   nil,   247,   nil,   -15,   nil,    37,   942,   281 ]

racc_action_default = [
    -3,   -94,  -102,   -82,   -50,    -5,   -78,   -54,   -40,    -6,
   -91,   -57,  -102,    -7,  -101,  -102,   -88,   -60,    -8,   -98,
   -82,  -102,  -102,    -9,  -102,   -31,   -10,   -33,  -102,   -11,
   -86,   -67,   -65,   -36,  -102,   -12,   -89,  -102,   -66,  -102,
   -90,   -76,  -102,  -102,    -1,  -102,   -77,   -72,   -56,   -47,
  -102,    -4,  -102,   -95,   -96,   -81,   -75,  -102,  -102,  -102,
  -102,  -102,  -102,  -102,  -102,  -102,  -102,  -102,   -55,  -102,
   -94,   -92,   -62,  -102,   -96,  -102,   -26,  -102,  -102,  -102,
  -102,  -102,  -102,   -99,   -68,  -102,  -102,  -102,  -102,   -69,
  -102,    -3,   -79,  -102,  -102,  -102,   -80,  -102,  -102,  -102,
  -102,  -102,  -102,   -93,  -102,   -87,   -83,  -102,   -46,   -48,
   -49,   -37,   -38,   -41,   -42,   -43,   -44,   -45,   -59,   -40,
   -32,   -61,  -102,  -102,   -39,  -102,  -102,  -102,  -100,   -34,
   -35,  -102,  -102,   -73,   -74,  -102,   179,    -2,   -70,   -71,
  -102,   -58,   -51,   -52,   -53,  -102,   -13,   -14,  -102,   -97,
   -19,   -40,  -102,    -8,  -102,   -63,   -64,   -27,   -25,   -28,
   -21,   -22,   -29,   -30,  -102,  -102,  -102,  -102,   -85,   -84,
  -102,   -15,   -16,   -20,   -17,   -18,   -24,  -102,   -23 ]

racc_goto_table = [
    54,   118,   108,    44,    68,   111,   112,   113,   114,   115,
   116,   117,    92,    84,   119,    96,    85,   147,    75,    89,
    74,   150,    85,    78,   119,   119,   153,    56,   133,   134,
    88,   141,   129,   130,   109,   110,   148,   120,    73,    95,
   121,   157,   152,   146,    72,    39,    71,   nil,   nil,   nil,
   nil,   nil,   151,   nil,   nil,    92,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    74,
   nil,    85,    85,   nil,   nil,   138,   139,   nil,    85,    85,
   171,   173,   nil,   nil,   nil,   nil,   175,   nil,   nil,   nil,
   142,   143,   144,   nil,   137,   nil,   nil,   nil,   nil,   148,
   145,   nil,   nil,   149,   155,   156,   154,    85,    85,   nil,
   nil,   nil,   174,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   158,   159,   nil,   nil,   nil,
   160,   nil,   nil,   nil,   162,   nil,   nil,   nil,   nil,   163,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   172,   nil,   nil,   nil,   176,
   nil,   nil,   nil,   nil,   nil,   nil,   178 ]

racc_goto_check = [
     3,    14,    16,     2,    26,    16,    16,    16,    16,    16,
    16,    16,    38,    33,    16,    38,    35,    13,    18,    33,
     3,    15,    35,     3,    16,    16,     7,    31,    36,    36,
    18,    14,    21,    21,    25,    25,    14,    20,    24,    18,
    32,    19,    17,    12,    31,     1,    40,   nil,   nil,   nil,
   nil,   nil,    16,   nil,   nil,    38,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,
   nil,    35,    35,   nil,   nil,    33,    33,   nil,    35,    35,
    13,    15,   nil,   nil,   nil,   nil,     7,   nil,   nil,   nil,
    26,    26,    26,   nil,     2,   nil,   nil,   nil,   nil,    14,
     3,   nil,   nil,     3,    33,    33,     3,    35,    35,   nil,
   nil,   nil,    16,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     3,     3,   nil,   nil,   nil,
     3,   nil,   nil,   nil,     3,   nil,   nil,   nil,   nil,     3,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     3,   nil,   nil,   nil,     3,
   nil,   nil,   nil,   nil,   nil,   nil,     3 ]

racc_goto_pointer = [
   nil,    45,     3,    -1,   nil,   nil,   nil,   -81,   nil,   nil,
   nil,   nil,   -59,   -85,   -66,   -86,   -55,   -65,    -4,   -84,
   -32,   -47,   nil,   nil,    17,   -24,    -8,   nil,   nil,   nil,
   nil,    24,   -32,   -18,   nil,   -15,   -58,   nil,   -30,   nil,
    31,   nil ]

racc_goto_default = [
   nil,   nil,   nil,    51,     5,     9,    13,    18,    23,    26,
    29,    35,   nil,   nil,    48,   nil,     8,   nil,   nil,    76,
    25,    27,    33,    36,    53,    49,     4,     7,    11,    17,
    20,   nil,   nil,    32,    38,    42,    47,     3,     6,   106,
    16,    52 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 52, :_reduce_1,
  3, 52, :_reduce_2,
  0, 53, :_reduce_none,
  1, 53, :_reduce_none,
  1, 53, :_reduce_none,
  1, 53, :_reduce_6,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  3, 62, :_reduce_13,
  1, 63, :_reduce_14,
  3, 63, :_reduce_15,
  3, 64, :_reduce_16,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 68, :_reduce_19,
  3, 68, :_reduce_20,
  4, 55, :_reduce_21,
  4, 56, :_reduce_22,
  8, 59, :_reduce_23,
  6, 59, :_reduce_24,
  4, 60, :_reduce_25,
  1, 69, :_reduce_26,
  3, 69, :_reduce_27,
  3, 70, :_reduce_28,
  4, 61, :_reduce_29,
  4, 61, :_reduce_30,
  1, 57, :_reduce_none,
  3, 57, :_reduce_32,
  1, 71, :_reduce_none,
  3, 71, :_reduce_34,
  3, 71, :_reduce_35,
  1, 72, :_reduce_none,
  3, 72, :_reduce_37,
  3, 72, :_reduce_38,
  3, 74, :_reduce_39,
  1, 73, :_reduce_none,
  3, 73, :_reduce_41,
  3, 73, :_reduce_42,
  3, 73, :_reduce_43,
  3, 73, :_reduce_44,
  3, 58, :_reduce_45,
  3, 58, :_reduce_46,
  1, 67, :_reduce_none,
  3, 67, :_reduce_48,
  3, 67, :_reduce_49,
  1, 76, :_reduce_none,
  3, 76, :_reduce_51,
  3, 76, :_reduce_52,
  3, 76, :_reduce_53,
  1, 77, :_reduce_none,
  2, 77, :_reduce_55,
  1, 78, :_reduce_none,
  1, 78, :_reduce_57,
  3, 79, :_reduce_58,
  3, 79, :_reduce_59,
  1, 65, :_reduce_60,
  3, 65, :_reduce_61,
  0, 83, :_reduce_none,
  2, 83, :_reduce_63,
  2, 83, :_reduce_64,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 85, :_reduce_67,
  2, 85, :_reduce_68,
  2, 85, :_reduce_69,
  3, 85, :_reduce_70,
  3, 85, :_reduce_71,
  1, 84, :_reduce_72,
  3, 84, :_reduce_73,
  3, 84, :_reduce_74,
  2, 87, :_reduce_75,
  1, 87, :_reduce_76,
  1, 87, :_reduce_77,
  1, 88, :_reduce_78,
  2, 88, :_reduce_79,
  2, 88, :_reduce_80,
  2, 86, :_reduce_81,
  0, 82, :_reduce_82,
  2, 82, :_reduce_83,
  3, 90, :_reduce_84,
  3, 90, :_reduce_85,
  1, 81, :_reduce_86,
  3, 81, :_reduce_87,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_90,
  1, 81, :_reduce_91,
  2, 81, :_reduce_92,
  3, 91, :_reduce_93,
  0, 92, :_reduce_94,
  1, 92, :_reduce_none,
  1, 75, :_reduce_96,
  3, 75, :_reduce_97,
  1, 89, :_reduce_none,
  1, 89, :_reduce_99,
  3, 89, :_reduce_100,
  1, 89, :_reduce_none ]

racc_reduce_n = 102

racc_shift_n = 179

racc_token_table = {
  false => 0,
  :error => 1,
  :SEMI => 2,
  :WITH => 3,
  :COMMA => 4,
  :COLON_EQUAL => 5,
  :LET => 6,
  :DOLLAR_QNAME => 7,
  :XMLNS_COLON_NCNAME => 8,
  :LITERAL => 9,
  :IF => 10,
  :LP => 11,
  :RP => 12,
  :THEN => 13,
  :ELSE => 14,
  :FOR => 15,
  :RETURN => 16,
  :IN => 17,
  :SOME => 18,
  :SATISFIES => 19,
  :EVERY => 20,
  :OR => 21,
  :AND => 22,
  :EXCEPT => 23,
  :EQ => 24,
  :NEQ => 25,
  :LB => 26,
  :RB => 27,
  :LT => 28,
  :GT => 29,
  :LTE => 30,
  :GTE => 31,
  :DOT_DOT => 32,
  :TO => 33,
  :PLUS => 34,
  :MINUS => 35,
  :STAR => 36,
  :DIV => 37,
  :MOD => 38,
  :PIPE => 39,
  :SLASH => 40,
  :SLASH_SLASH => 41,
  :DOT => 42,
  :AT => 43,
  :AXIS_NAME => 44,
  :COLON_COLON => 45,
  :NUMBER => 46,
  :FUNCTION_NAME => 47,
  :QNAME => 48,
  :LC => 49,
  :RC => 50 }

racc_nt_base = 51

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "SEMI",
  "WITH",
  "COMMA",
  "COLON_EQUAL",
  "LET",
  "DOLLAR_QNAME",
  "XMLNS_COLON_NCNAME",
  "LITERAL",
  "IF",
  "LP",
  "RP",
  "THEN",
  "ELSE",
  "FOR",
  "RETURN",
  "IN",
  "SOME",
  "SATISFIES",
  "EVERY",
  "OR",
  "AND",
  "EXCEPT",
  "EQ",
  "NEQ",
  "LB",
  "RB",
  "LT",
  "GT",
  "LTE",
  "GTE",
  "DOT_DOT",
  "TO",
  "PLUS",
  "MINUS",
  "STAR",
  "DIV",
  "MOD",
  "PIPE",
  "SLASH",
  "SLASH_SLASH",
  "DOT",
  "AT",
  "AXIS_NAME",
  "COLON_COLON",
  "NUMBER",
  "FUNCTION_NAME",
  "QNAME",
  "LC",
  "RC",
  "$start",
  "statements",
  "statement",
  "expr",
  "let_expr",
  "ns_expr",
  "or_expr",
  "range_expr",
  "if_expr",
  "for_expr",
  "quant_expr",
  "with_expr",
  "expr_set_list",
  "expr_set",
  "path_expr",
  "num_expr",
  "additive_expr",
  "num_list",
  "for_vars",
  "for_var",
  "and_expr",
  "equality_expr",
  "relational_expr",
  "tuple",
  "args",
  "multiplicative_expr",
  "unary_expr",
  "union_expr",
  "union_expr_x",
  "location_path",
  "primary_expr",
  "predicates",
  "segment",
  "relative_location_path",
  "absolute_location_path",
  "axis_name",
  "step",
  "axis",
  "node_test",
  "predicate",
  "list",
  "opt_args" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 12)
  def _reduce_1(val, _values, result)
     result = Fabulator::Expr::StatementList.new; result.add_statement(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 13)
  def _reduce_2(val, _values, result)
     result = val[0]; result.add_statement(val[2]) 
    result
  end
.,.,

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 18)
  def _reduce_6(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 27)
  def _reduce_13(val, _values, result)
     result = Fabulator::Expr::WithExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 29)
  def _reduce_14(val, _values, result)
     result = Fabulator::Expr::StatementList.new; result.add_statement(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 30)
  def _reduce_15(val, _values, result)
     result = val[0]; result.add_statement(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 32)
  def _reduce_16(val, _values, result)
     result = Fabulator::Expr::DataSet.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 17 omitted

# reduce 18 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 39)
  def _reduce_19(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 40)
  def _reduce_20(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 42)
  def _reduce_21(val, _values, result)
     result = Fabulator::Expr::LetExpr.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 45)
  def _reduce_22(val, _values, result)
        @context.set_ns(val[1].gsub(/^xmlns:/, ''), val[3])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 48)
  def _reduce_23(val, _values, result)
     result = Fabulator::Expr::IfExpr.new(val[2], val[5], val[7]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 49)
  def _reduce_24(val, _values, result)
     result = Fabulator::Expr::IfExpr.new(val[2], val[5], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 51)
  def _reduce_25(val, _values, result)
     result = Fabulator::Expr::ForExpr.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 53)
  def _reduce_26(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 54)
  def _reduce_27(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 56)
  def _reduce_28(val, _values, result)
     result = Fabulator::Expr::ForVar.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 58)
  def _reduce_29(val, _values, result)
     result = Fabulator::Expr::SomeExpr.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 59)
  def _reduce_30(val, _values, result)
     result = Fabulator::Expr::EveryExpr.new(val[1], val[3]) 
    result
  end
.,.,

# reduce 31 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 62)
  def _reduce_32(val, _values, result)
     result = Fabulator::Expr::OrExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 33 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 65)
  def _reduce_34(val, _values, result)
     result = Fabulator::Expr::AndExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 66)
  def _reduce_35(val, _values, result)
     result = Fabulator::Expr::ExceptExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 36 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 69)
  def _reduce_37(val, _values, result)
     result = Fabulator::Expr::EqExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 70)
  def _reduce_38(val, _values, result)
     result = Fabulator::Expr::NeqExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 72)
  def _reduce_39(val, _values, result)
     result = Fabulator::Expr::Tuple.new(val[1]) 
    result
  end
.,.,

# reduce 40 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 77)
  def _reduce_41(val, _values, result)
     result = Fabulator::Expr::LtExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 78)
  def _reduce_42(val, _values, result)
     result = Fabulator::Expr::LtExpr.new(val[2], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 79)
  def _reduce_43(val, _values, result)
     result = Fabulator::Expr::LteExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 80)
  def _reduce_44(val, _values, result)
     result = Fabulator::Expr::LteExpr.new(val[2], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 91)
  def _reduce_45(val, _values, result)
     result = Fabulator::Expr::RangeExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 92)
  def _reduce_46(val, _values, result)
     result = Fabulator::Expr::RangeExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 47 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 95)
  def _reduce_48(val, _values, result)
     result = Fabulator::Expr::AddExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 96)
  def _reduce_49(val, _values, result)
     result = Fabulator::Expr::SubExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 50 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 99)
  def _reduce_51(val, _values, result)
     result = Fabulator::Expr::MpyExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 100)
  def _reduce_52(val, _values, result)
     result = Fabulator::Expr::DivExpr.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 101)
  def _reduce_53(val, _values, result)
     result = Fabulator::Expr::ModExpr.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 54 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 104)
  def _reduce_55(val, _values, result)
     result = Fabulator::Expr::NegExpr.new(val[1]) 
    result
  end
.,.,

# reduce 56 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 107)
  def _reduce_57(val, _values, result)
     result = Fabulator::Expr::UnionExpr.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 109)
  def _reduce_58(val, _values, result)
     result = [ val[0], val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 110)
  def _reduce_59(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 112)
  def _reduce_60(val, _values, result)
     result = Fabulator::Expr::PathExpr.new(nil, [], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 113)
  def _reduce_61(val, _values, result)
     result = Fabulator::Expr::PathExpr.new(val[0], val[1], val[2]) 
    result
  end
.,.,

# reduce 62 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 116)
  def _reduce_63(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 117)
  def _reduce_64(val, _values, result)
     result = [ Fabulator::Expr::AxisDescendentOrSelf.new ] + val[1] 
    result
  end
.,.,

# reduce 65 omitted

# reduce 66 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 125)
  def _reduce_67(val, _values, result)
     result = Fabulator::Expr::RootContext.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 126)
  def _reduce_68(val, _values, result)
     result = Fabulator::Expr::PathExpr.new(Fabulator::Expr::RootContext.new, [], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 127)
  def _reduce_69(val, _values, result)
     result = [ Fabulator::Expr::RootContext.new, Fabulator::Expr::AxisDescendentOrSelf.new(val[1][0]) ] + val[1][1..val[1].size-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 128)
  def _reduce_70(val, _values, result)
     result = [ Fabulator::Expr::RootContext.new(val[0]) ] + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 129)
  def _reduce_71(val, _values, result)
     result = [ Fabulator::Expr::RootContext.new(val[0]), Fabulator::Expr::AxisDescendentOrSelf.new(val[2][0]) ] + val[2][1..val[2].size-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 131)
  def _reduce_72(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 132)
  def _reduce_73(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 133)
  def _reduce_74(val, _values, result)
     result = val[0] + [ Fabulator::Expr::AxisDescendentOrSelf.new(val[2]) ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 135)
  def _reduce_75(val, _values, result)
     result = val[1].nil? || val[1].empty? ? val[0] : Fabulator::Expr::Predicates.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 136)
  def _reduce_76(val, _values, result)
     result = Fabulator::Expr::CurrentContext.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 137)
  def _reduce_77(val, _values, result)
     result = Fabulator::Expr::AxisParent.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 143)
  def _reduce_78(val, _values, result)
     result = Fabulator::Expr::AxisChild.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 144)
  def _reduce_79(val, _values, result)
     result = Fabulator::Expr::Axis.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 145)
  def _reduce_80(val, _values, result)
     result = Fabulator::Expr::AxisAttribute.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 147)
  def _reduce_81(val, _values, result)
     result = Fabulator::Expr::Axis.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 149)
  def _reduce_82(val, _values, result)
     result = [ ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 150)
  def _reduce_83(val, _values, result)
     result = val[0] + [ val[1] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 152)
  def _reduce_84(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 153)
  def _reduce_85(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 160)
  def _reduce_86(val, _values, result)
     result = Fabulator::Expr::Var.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 161)
  def _reduce_87(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 88 omitted

# reduce 89 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 164)
  def _reduce_90(val, _values, result)
     result = Fabulator::Expr::Literal.new(val[0], [ Fabulator::FAB_NS, 'string' ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 165)
  def _reduce_91(val, _values, result)
     result = Fabulator::Expr::Literal.new(val[0] =~ /\./ ? val[0].to_d.to_r : val[0].to_i.to_r, [ Fabulator::FAB_NS, 'numeric' ]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 167)
  def _reduce_92(val, _values, result)
            result = Fabulator::Expr::Function.new(@context, val[0], val[1]) 
#          when 'any' : Fabulator::Expr::AnyExpr.new(@context, val[1])
#          when 'all' : Fabulator::Expr::AllExpr.new(@context, val[1])
#          when 'one' : Fabulator::Expr::OneExpr.new(@context, val[1])
#          when 'none': Fabulator::Expr::NoneExpr.new(@context, val[1])
#          else Fabulator::Expr::Function.new(@context, val[0], val[1]) 
#        end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 176)
  def _reduce_93(val, _values, result)
     result = Fabulator::Expr::List.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 179)
  def _reduce_94(val, _values, result)
     result = [ ] 
    result
  end
.,.,

# reduce 95 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 182)
  def _reduce_96(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 183)
  def _reduce_97(val, _values, result)
     result = val[0] + [ val[2] ] 
    result
  end
.,.,

# reduce 98 omitted

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 186)
  def _reduce_99(val, _values, result)
     result = val[0].to_s 
    result
  end
.,.,

module_eval(<<'.,.,', 'xsm_expression_parser.racc', 187)
  def _reduce_100(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 101 omitted

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Expr
  end   # module Fabulator
